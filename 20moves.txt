----------------------********************-----------------------*********************-----------------
main.py==>  args:  {'numIters': 1, 'numEps': 2, 'tempThreshold': 3, 'updateThreshold': 0.6, 'maxlenOfQueue': 200000, 'numMCTSSims': 5, 'arenaCompare': 1, 'cpuct': 1, 'checkpoint': './temp/', 'load_model': False, 'load_folder_file': ('/dev/models/8x100x50', 'best.pth.tar'), 'numItersForTrainExamplesHistory': 2}
------ITER 1------
Coach.py==>learn  self.skipFirstSelfPlay:  False
Coach.py ==>executeEpisode
chessboard chess-pgn object:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
-----------************----------
Coach.py ==>executeEpisode  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
if player boardturn1:  True
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  1
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 1, 8, 3], [7, 1, 6, 3], [2, 1, 3, 3], [2, 1, 1, 3], [8, 2, 8, 3], [7, 2, 7, 3], [6, 2, 6, 3], [5, 2, 5, 3], [4, 2, 4, 3], [3, 2, 3, 3], [2, 2, 2, 3], [1, 2, 1, 3], [8, 2, 8, 4], [7, 2, 7, 4], [6, 2, 6, 4], [5, 2, 5, 4], [4, 2, 4, 4], [3, 2, 3, 4], [2, 2, 2, 4], [1, 2, 1, 4]]
inserting:  6 0 7 2  at:  3130
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  1 0 2 2  at:  530
count:  3
inserting:  1 0 0 2  at:  514
count:  4
inserting:  7 1 7 2  at:  3706
count:  5
inserting:  6 1 6 2  at:  3186
count:  6
inserting:  5 1 5 2  at:  2666
count:  7
inserting:  4 1 4 2  at:  2146
count:  8
inserting:  3 1 3 2  at:  1626
count:  9
inserting:  2 1 2 2  at:  1106
count:  10
inserting:  1 1 1 2  at:  586
count:  11
inserting:  0 1 0 2  at:  66
count:  12
inserting:  7 1 7 3  at:  3707
count:  13
inserting:  6 1 6 3  at:  3187
count:  14
inserting:  5 1 5 3  at:  2667
count:  15
inserting:  4 1 4 3  at:  2147
count:  16
inserting:  3 1 3 3  at:  1627
count:  17
inserting:  2 1 2 3  at:  1107
count:  18
inserting:  1 1 1 3  at:  587
count:  19
inserting:  0 1 0 3  at:  67
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  66  :  0.00024721265072003007
POLICY:  67  :  0.00024087243946269155
POLICY:  514  :  0.00024541481980122626
POLICY:  530  :  0.00024424053844995797
POLICY:  586  :  0.0002469710016157478
POLICY:  587  :  0.00024365683202631772
POLICY:  1106  :  0.00024453154765069485
POLICY:  1107  :  0.0002450050669722259
POLICY:  1626  :  0.00024249822308775038
POLICY:  1627  :  0.0002455232897773385
POLICY:  2146  :  0.0002428266016067937
POLICY:  2147  :  0.00024307778221555054
POLICY:  2666  :  0.00024324317928403616
POLICY:  2667  :  0.00024626811500638723
POLICY:  3114  :  0.0002424373960820958
POLICY:  3130  :  0.00024270592257380486
POLICY:  3186  :  0.00024260800273623317
POLICY:  3187  :  0.0002457162772770971
POLICY:  3706  :  0.0002431987813906744
POLICY:  3707  :  0.00024379634123761207
MCTS.py==>search  returning value of canonical board -v:  [-0.0278268]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  2
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2146  :  1
co:  2147  :  1
co:  2666  :  1
co:  2667  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu2:  0.0
in if
in if  cur_best:  0.0 best_act:  66
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
a:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
P . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
P . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  66 next_s:  r n b q k b n r
. p p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  3
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [1, 8, 1, 7], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  0 7 0 6  at:  454
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 5 0 4  at:  324
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  324  :  0.000244013499468565
POLICY:  454  :  0.0002446757280267775
POLICY:  908  :  0.00024270950234495103
POLICY:  909  :  0.0002427117433398962
POLICY:  981  :  0.0002438558149151504
POLICY:  1428  :  0.0002437088987790048
POLICY:  1429  :  0.0002415585913695395
POLICY:  1948  :  0.00024108416982926428
POLICY:  1949  :  0.00024325615959241986
POLICY:  2468  :  0.00024288932036142796
POLICY:  2469  :  0.00024310988374054432
POLICY:  2988  :  0.00024647219106554985
POLICY:  2989  :  0.00024444994051009417
POLICY:  3508  :  0.00024100139853544533
POLICY:  3509  :  0.0002445702557452023
POLICY:  3565  :  0.00024301516532432288
POLICY:  3581  :  0.00024404170108027756
POLICY:  4028  :  0.0002469556056894362
POLICY:  4029  :  0.00024471658980473876
MCTS.py==>search  returning value of canonical board -v:  [-0.02964671]
MCTS.py==>search  returning value of canonical board -v2:  [0.02964671]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  4
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2146  :  1
co:  2147  :  1
co:  2666  :  1
co:  2667  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [-0.00432691]
in if
in if  cur_best:  [-0.00432691] best_act:  66
uuuuu2:  0.04934085832761965
in if
in if  cur_best:  0.04934085832761965 best_act:  67
uuuuu2:  0.05027132984712498
in if
in if  cur_best:  0.05027132984712498 best_act:  514
uuuuu2:  0.05003078738440512
uuuuu2:  0.05059010166931271
in if
in if  cur_best:  0.05059010166931271 best_act:  586
uuuuu2:  0.04991121963303431
uuuuu2:  0.05009039837094066
uuuuu2:  0.05018739514571145
uuuuu2:  0.049673887542976664
uuuuu2:  0.05029354908373043
uuuuu2:  0.04974115334566498
uuuuu2:  0.049792605752835194
uuuuu2:  0.0498264860645145
uuuuu2:  0.050446120777641566
uuuuu2:  0.04966142760079652
uuuuu2:  0.04971643317808126
uuuuu2:  0.04969637505584916
uuuuu2:  0.05033308108210198
uuuuu2:  0.04981739149906196
uuuuu2:  0.04993979701716854
a:  586
ChessGame==>getNextState  param action number:  586 self.n*self.n:  64
selected action:  2 2 2 3
MOVE:  b2b3  by converting:  2 2 2 3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  b2b3
MOVE FROM:  9 MOVE TO:  17
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  17
piece moved: PAWN
position:  b2b3
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. P . . . . . .
P . P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. P . . . . . .
P . P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  586 next_s:  r n b q k b n r
p . p p p p p p
. p . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0
 -1  0 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0
 -1  0 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  5
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p . p p p p p p
. p . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [3, 8, 2, 7], [3, 8, 1, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [1, 7, 1, 6], [2, 6, 2, 5], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  2 7 1 6  at:  1486
count:  3
inserting:  2 7 0 5  at:  1477
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  5 6 5 5  at:  2989
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  1 5 1 4  at:  844
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.00024413061328232288
POLICY:  389  :  0.0002476276131346822
POLICY:  844  :  0.0002442468539811671
POLICY:  965  :  0.00024440704146400094
POLICY:  981  :  0.00024378515081480145
POLICY:  1428  :  0.00024371389008592814
POLICY:  1429  :  0.00024170297547243536
POLICY:  1477  :  0.00024500672589056194
POLICY:  1486  :  0.0002436548238620162
POLICY:  1948  :  0.00024110282538458705
POLICY:  1949  :  0.00024305553233716637
POLICY:  2468  :  0.00024294338072650135
POLICY:  2469  :  0.00024301742087118328
POLICY:  2988  :  0.00024654390290379524
POLICY:  2989  :  0.00024454909726046026
POLICY:  3508  :  0.0002410845918348059
POLICY:  3509  :  0.0002446105645503849
POLICY:  3565  :  0.00024296337505802512
POLICY:  3581  :  0.00024406681768596172
POLICY:  4028  :  0.0002468715829309076
POLICY:  4029  :  0.00024466734612360597
MCTS.py==>search  returning value of canonical board -v:  [-0.02793758]
MCTS.py==>search  returning value of canonical board -v2:  [0.02793758]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  6
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2146  :  1
co:  2147  :  1
co:  2666  :  1
co:  2667  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.0061609]
in if
in if  cur_best:  [0.0061609] best_act:  66
uuuuu2:  0.06977851102604918
in if
in if  cur_best:  0.06977851102604918 best_act:  67
uuuuu2:  0.07109439646833551
in if
in if  cur_best:  0.07109439646833551 best_act:  514
uuuuu2:  0.07075421805523047
uuuuu1:  [0.00783502]
uuuuu2:  0.07058512371961942
uuuuu2:  0.07083852072085547
uuuuu2:  0.07097569487524277
uuuuu2:  0.07024948545907354
uuuuu2:  0.07112581921408853
in if
in if  cur_best:  0.07112581921408853 best_act:  1627
uuuuu2:  0.07034461366951927
uuuuu2:  0.07041737836155613
uuuuu2:  0.07046529235783043
uuuuu2:  0.0713415881728519
in if
in if  cur_best:  0.0713415881728519 best_act:  2667
uuuuu2:  0.07023186443985599
uuuuu2:  0.07030965407325825
uuuuu2:  0.07028128760476186
uuuuu2:  0.07118172590233328
uuuuu2:  0.07045243070002356
uuuuu2:  0.07062553824383919
a:  2667
ChessGame==>getNextState  param action number:  2667 self.n*self.n:  64
selected action:  6 2 6 4
MOVE:  f2f4  by converting:  6 2 6 4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  f2f4
MOVE FROM:  13 MOVE TO:  29
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  29
piece moved: PAWN
position:  f2f4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2667 next_s:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  7
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  5 4 5 3  at:  2859
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  6 6 6 4  at:  3508
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.000243927221163176
POLICY:  389  :  0.0002476444060448557
POLICY:  908  :  0.00024285362451337278
POLICY:  909  :  0.00024279758508782834
POLICY:  965  :  0.0002442285476718098
POLICY:  981  :  0.00024380252580158412
POLICY:  1428  :  0.0002436102950014174
POLICY:  1429  :  0.0002413241600152105
POLICY:  1948  :  0.00024098853464238346
POLICY:  1949  :  0.00024309370201081038
POLICY:  2468  :  0.00024271957227028906
POLICY:  2469  :  0.00024305256374645978
POLICY:  2542  :  0.0002430583699606359
POLICY:  2859  :  0.00024556691641919315
POLICY:  3508  :  0.00024117412976920605
POLICY:  3509  :  0.0002442821569275111
POLICY:  3565  :  0.00024266194668598473
POLICY:  3581  :  0.0002440821990603581
POLICY:  4028  :  0.00024677879991941154
POLICY:  4029  :  0.00024469432537443936
MCTS.py==>search  returning value of canonical board -v:  [-0.02431469]
MCTS.py==>search  returning value of canonical board -v2:  [0.02431469]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  8
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2146  :  1
co:  2147  :  1
co:  2666  :  1
co:  2667  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.01420847]
in if
in if  cur_best:  [0.01420847] best_act:  66
uuuuu2:  0.08546087351249516
in if
in if  cur_best:  0.08546087351249516 best_act:  67
uuuuu2:  0.08707249745927421
in if
in if  cur_best:  0.08707249745927421 best_act:  514
uuuuu2:  0.08665586569246568
uuuuu1:  [0.01587473]
uuuuu2:  0.08644876827214468
uuuuu2:  0.08675911494983454
uuuuu2:  0.08692711829190787
uuuuu2:  0.08603769703389832
uuuuu2:  0.08711098230598026
in if
in if  cur_best:  0.08711098230598026 best_act:  1627
uuuuu2:  0.08615420482176639
uuuuu2:  0.08624332300515691
uuuuu2:  0.08630200542636175
uuuuu1:  [0.01937294]
uuuuu2:  0.08601611578098294
uuuuu2:  0.08611138823553977
uuuuu2:  0.08607664654872935
uuuuu2:  0.0871794537356845
in if
in if  cur_best:  0.0871794537356845 best_act:  3187
uuuuu2:  0.08628625317692519
uuuuu2:  0.08649826575341257
a:  3187
ChessGame==>getNextState  param action number:  3187 self.n*self.n:  64
selected action:  7 2 7 4
MOVE:  g2g4  by converting:  7 2 7 4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  g2g4
MOVE FROM:  14 MOVE TO:  30
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  30
piece moved: PAWN
position:  g2g4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . P .
. . . . . . . .
P P P P P P . P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . P .
. . . . . . . .
P P P P P P . P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  3187 next_s:  r n b q k b n r
p p p p p p . p
. . . . . . . .
. . . . . . p .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  9
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p . p
. . . . . . . .
. . . . . . p .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [6, 8, 7, 7], [6, 8, 8, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 7, 8, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [7, 5, 7, 4], [8, 7, 8, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  1 7 2 5  at:  981
count:  5
inserting:  1 7 0 5  at:  965
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  6 4 6 3  at:  3379
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.0002440868120174855
POLICY:  389  :  0.0002477696107234806
POLICY:  908  :  0.000242545225773938
POLICY:  909  :  0.00024277243937831372
POLICY:  965  :  0.00024446911993436515
POLICY:  981  :  0.0002437271032249555
POLICY:  1428  :  0.00024390149337705225
POLICY:  1429  :  0.00024152973492164165
POLICY:  1948  :  0.00024119661247823387
POLICY:  1949  :  0.0002432741894153878
POLICY:  2468  :  0.00024301667872350663
POLICY:  2469  :  0.00024299745564348996
POLICY:  2988  :  0.0002464499557390809
POLICY:  2989  :  0.00024440232664346695
POLICY:  3062  :  0.0002426812134217471
POLICY:  3069  :  0.00024052895605564117
POLICY:  3379  :  0.00024700071662664413
POLICY:  3565  :  0.00024269605637528002
POLICY:  3581  :  0.00024412602942902595
POLICY:  4028  :  0.00024677085457369685
POLICY:  4029  :  0.0002447021543048322
MCTS.py==>search  returning value of canonical board -v:  [-0.02853724]
MCTS.py==>search  returning value of canonical board -v2:  [0.02853724]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
IND:  66 PI:  0.25
IND:  586 PI:  0.25
IND:  2667 PI:  0.25
IND:  3187 PI:  0.25
Coach.py ==>executeEpisode  action:  2667
ChessGame==>getNextState  param action number:  2667 self.n*self.n:  64
selected action:  6 2 6 4
MOVE:  f2f4  by converting:  6 2 6 4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  f2f4
MOVE FROM:  13 MOVE TO:  29
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  29
piece moved: PAWN
position:  f2f4
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  10
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu2:  0.0
in if
in if  cur_best:  0.0 best_act:  388
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
a:  388
ChessGame==>getNextState  param action number:  388 self.n*self.n:  64
selected action:  1 7 1 5
MOVE:  a7a5  by converting:  1 7 1 5
board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a7a5
MOVE FROM:  48 MOVE TO:  32
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  32
piece moved: PAWN
position:  a7a5
board:  r n b q k b n r
. p p p p . p p
. . . . . . . .
P . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . p p
. . . . . . . .
P . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  388 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
p . . . . P . .
. . . . . . . .
. P P P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
 -1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
 -1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  11
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
p . . . . P . .
. . . . . . . .
. P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [1, 4, 1, 3], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  0 3 0 2  at:  194
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  6 6 6 4  at:  3508
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  194  :  0.0002472803753335029
POLICY:  388  :  0.00024389650207012892
POLICY:  389  :  0.00024764888803474605
POLICY:  908  :  0.00024257155018858612
POLICY:  909  :  0.0002428510197205469
POLICY:  965  :  0.000244295340962708
POLICY:  981  :  0.0002441472315695137
POLICY:  1428  :  0.00024416306405328214
POLICY:  1429  :  0.00024138178559951484
POLICY:  1948  :  0.00024087376368697733
POLICY:  1949  :  0.00024323577235918492
POLICY:  2468  :  0.0002430261083645746
POLICY:  2469  :  0.00024269198183901608
POLICY:  2988  :  0.0002463435521349311
POLICY:  2989  :  0.00024408032186329365
POLICY:  3508  :  0.00024095545813906938
POLICY:  3509  :  0.0002442075638100505
POLICY:  3565  :  0.00024334588670171797
POLICY:  3581  :  0.0002441412361804396
POLICY:  4028  :  0.0002466229198034853
POLICY:  4029  :  0.00024478218983858824
MCTS.py==>search  returning value of canonical board -v:  [-0.01899906]
MCTS.py==>search  returning value of canonical board -v2:  [0.01899906]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  12
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.00603277]
in if
in if  cur_best:  [0.00603277] best_act:  388
uuuuu2:  0.0508265690885397
in if
in if  cur_best:  0.0508265690885397 best_act:  389
uuuuu2:  0.0498433084835983
uuuuu2:  0.049831806944841156
uuuuu2:  0.05012549788581349
uuuuu2:  0.05003806110350906
uuuuu2:  0.04999860762987053
uuuuu2:  0.04952940099735275
uuuuu2:  0.04946051720356025
uuuuu2:  0.04989258201941121
uuuuu2:  0.04981579558434334
uuuuu2:  0.04988413879685435
uuuuu2:  0.04988533046498317
uuuuu2:  0.05040018485609983
uuuuu2:  0.04949860877076583
uuuuu2:  0.050136500656205944
uuuuu2:  0.049803968502162524
uuuuu2:  0.0500954612783659
uuuuu2:  0.05064891197832667
uuuuu2:  0.050221094160167914
a:  389
ChessGame==>getNextState  param action number:  389 self.n*self.n:  64
selected action:  1 7 1 6
MOVE:  a7a6  by converting:  1 7 1 6
board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a7a6
MOVE FROM:  48 MOVE TO:  40
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  40
piece moved: PAWN
position:  a7a6
board:  r n b q k b n r
. p p p p . p p
P . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . p p
P . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  389 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
p . . . . . . .
. P P P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  13
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
p . . . . . . .
. P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 2 1 1  at:  137
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  0 2 0 1  at:  129
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
inserting:  0 6 0 4  at:  388
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024307875719387084
POLICY:  137  :  0.00024210935225710273
POLICY:  388  :  0.00024379848036915064
POLICY:  389  :  0.0002478328242432326
POLICY:  908  :  0.00024239762569777668
POLICY:  909  :  0.00024267575645353645
POLICY:  965  :  0.00024413660867139697
POLICY:  981  :  0.00024403718998655677
POLICY:  1428  :  0.00024440509150736034
POLICY:  1429  :  0.00024133510305546224
POLICY:  1948  :  0.0002406387939117849
POLICY:  1949  :  0.0002431192115182057
POLICY:  2468  :  0.00024296365154441446
POLICY:  2469  :  0.0002425209677312523
POLICY:  2988  :  0.0002463554556015879
POLICY:  2989  :  0.0002441798278596252
POLICY:  3508  :  0.0002409603475825861
POLICY:  3509  :  0.0002444203128106892
POLICY:  3565  :  0.0002434094058116898
POLICY:  3581  :  0.0002442982222419232
POLICY:  4028  :  0.00024676445173099637
POLICY:  4029  :  0.0002447424631100148
MCTS.py==>search  returning value of canonical board -v:  [-0.01965301]
MCTS.py==>search  returning value of canonical board -v2:  [0.01965301]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  14
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.01640129]
in if
in if  cur_best:  [0.01640129] best_act:  388
uuuuu1:  [0.0162868]
uuuuu2:  0.07048908285105067
in if
in if  cur_best:  0.07048908285105067 best_act:  908
uuuuu2:  0.07047281721895216
uuuuu2:  0.07088815893082134
in if
in if  cur_best:  0.07088815893082134 best_act:  965
uuuuu2:  0.07076450464743615
uuuuu2:  0.07070870900993383
uuuuu2:  0.07004515062667177
uuuuu2:  0.0699477342312627
uuuuu2:  0.07055876615366335
uuuuu2:  0.0704501737357841
uuuuu2:  0.07054682563381331
uuuuu2:  0.07054851090704294
uuuuu2:  0.07127662496960746
in if
in if  cur_best:  0.07127662496960746 best_act:  2859
uuuuu2:  0.07000160384221688
uuuuu2:  0.07090371919793403
uuuuu2:  0.07043344771576068
uuuuu2:  0.07084568075320129
uuuuu2:  0.07162837823919069
in if
in if  cur_best:  0.07162837823919069 best_act:  4028
uuuuu2:  0.07102335247852572
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  8 7 8 5
MOVE:  h7h5  by converting:  8 7 8 5
board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  h7h5
MOVE FROM:  55 MOVE TO:  39
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  39
piece moved: PAWN
position:  h7h5
board:  r n b q k b n r
p p p p p . p .
. . . . . . . .
. . . . . p . P
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p . p .
. . . . . . . .
. . . . . p . P
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  4028 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . p
. . . . . . . .
P P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  15
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . p
. . . . . . . .
P P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [8, 4, 8, 3], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 3 7 2  at:  3834
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  6 6 6 4  at:  3508
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.00024374610802624375
POLICY:  389  :  0.0002477582893334329
POLICY:  908  :  0.00024244993983302265
POLICY:  909  :  0.00024268534616567194
POLICY:  965  :  0.0002441891119815409
POLICY:  981  :  0.0002437261282466352
POLICY:  1428  :  0.0002442387631163001
POLICY:  1429  :  0.0002411689783912152
POLICY:  1948  :  0.00024075870169326663
POLICY:  1949  :  0.00024345377460122108
POLICY:  2468  :  0.00024301439407281578
POLICY:  2469  :  0.0002426866558380425
POLICY:  2988  :  0.0002464301942382008
POLICY:  2989  :  0.00024390286125708371
POLICY:  3508  :  0.00024121513706631958
POLICY:  3509  :  0.0002441595424897969
POLICY:  3565  :  0.00024323767866007984
POLICY:  3581  :  0.0002444244164507836
POLICY:  3834  :  0.0002457391528878361
POLICY:  4028  :  0.00024694245075806975
POLICY:  4029  :  0.0002444640267640352
MCTS.py==>search  returning value of canonical board -v:  [-0.01886901]
MCTS.py==>search  returning value of canonical board -v2:  [0.01886901]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  16
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.02435734]
in if
in if  cur_best:  [0.02435734] best_act:  388
uuuuu1:  [0.02436408]
in if
in if  cur_best:  [0.02436408] best_act:  389
uuuuu2:  0.08633114271092111
in if
in if  cur_best:  0.08633114271092111 best_act:  908
uuuuu2:  0.08631122146142851
uuuuu2:  0.0868199090929153
in if
in if  cur_best:  0.0868199090929153 best_act:  965
uuuuu2:  0.08666846414351369
uuuuu2:  0.08660012872263669
uuuuu2:  0.08578743899586758
uuuuu2:  0.08566812876520087
uuuuu2:  0.08641648697841763
uuuuu2:  0.08628348897154799
uuuuu2:  0.08640186288796953
uuuuu2:  0.08640392691771441
uuuuu2:  0.08729568088162841
in if
in if  cur_best:  0.08729568088162841 best_act:  2859
uuuuu2:  0.08573410529494087
uuuuu2:  0.08683896645025904
uuuuu2:  0.08626300386430552
uuuuu2:  0.08676788416272907
uuuuu1:  [0.02499424]
uuuuu2:  0.08698548669711145
a:  2859
ChessGame==>getNextState  param action number:  2859 self.n*self.n:  64
selected action:  6 5 6 4
MOVE:  f5f4  by converting:  6 5 6 4
board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  f5f4
MOVE FROM:  37 MOVE TO:  29
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  29
piece moved: PAWN
position:  f5f4
board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2859 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  17
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  5 4 5 3  at:  2859
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  6 6 6 4  at:  3508
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.00024393951753154397
POLICY:  389  :  0.00024744821712374687
POLICY:  908  :  0.0002426563878543675
POLICY:  909  :  0.00024290957662742585
POLICY:  965  :  0.00024410970218013972
POLICY:  981  :  0.00024391543411184102
POLICY:  1428  :  0.00024398727691732347
POLICY:  1429  :  0.00024107127683237195
POLICY:  1948  :  0.00024080855655483902
POLICY:  1949  :  0.00024315938935615122
POLICY:  2468  :  0.00024305823899339885
POLICY:  2469  :  0.00024290684086736292
POLICY:  2859  :  0.00024538105935789645
POLICY:  2989  :  0.0002445274731144309
POLICY:  3508  :  0.00024128615041263402
POLICY:  3509  :  0.00024411504273302853
POLICY:  3565  :  0.00024298412608914077
POLICY:  3581  :  0.0002441506658215076
POLICY:  4028  :  0.00024647664395160973
POLICY:  4029  :  0.0002446018625050783
MCTS.py==>search  returning value of canonical board -v:  [-0.0197052]
MCTS.py==>search  returning value of canonical board -v2:  [0.0197052]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  18
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.0310646]
in if
in if  cur_best:  [0.0310646] best_act:  388
uuuuu1:  [0.03117355]
in if
in if  cur_best:  [0.03117355] best_act:  389
uuuuu2:  0.0996866169671966
in if
in if  cur_best:  0.0996866169671966 best_act:  908
uuuuu2:  0.09966361388968231
uuuuu2:  0.10025099577162698
in if
in if  cur_best:  0.10025099577162698 best_act:  965
uuuuu2:  0.10007612220701811
uuuuu2:  0.09999721525974106
uuuuu2:  0.0990588019947055
uuuuu2:  0.0989210344071205
uuuuu2:  0.09978516403882241
uuuuu2:  0.09963159116868668
uuuuu2:  0.0997682775937087
uuuuu2:  0.09977066092996634
uuuuu1:  [0.03069498]
uuuuu2:  0.09899721754153167
uuuuu2:  0.10027300131241189
in if
in if  cur_best:  0.10027300131241189 best_act:  3509
uuuuu2:  0.09960793700432505
uuuuu2:  0.1001909225567318
uuuuu1:  [0.03177991]
uuuuu2:  0.10044218832033583
in if
in if  cur_best:  0.10044218832033583 best_act:  4029
a:  4029
ChessGame==>getNextState  param action number:  4029 self.n*self.n:  64
selected action:  8 7 8 6
MOVE:  h7h6  by converting:  8 7 8 6
board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  h7h6
MOVE FROM:  55 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
piece moved: PAWN
position:  h7h6
board:  r n b q k b n r
p p p p p . p .
. . . . . . . P
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
p p p p p . p .
. . . . . . . P
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  4029 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . p
P P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0 -1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0 -1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  19
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . p
P P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 3, 7, 2], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [8, 3, 8, 2], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 2 6 1  at:  3761
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  7 2 7 1  at:  3769
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
inserting:  0 6 0 4  at:  388
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.00024363945703953505
POLICY:  389  :  0.0002476066292729229
POLICY:  908  :  0.00024287925043608993
POLICY:  909  :  0.00024265826505143195
POLICY:  965  :  0.00024415762163698673
POLICY:  981  :  0.00024387537268921733
POLICY:  1428  :  0.0002444491256028414
POLICY:  1429  :  0.00024127769574988633
POLICY:  1948  :  0.00024074518296401948
POLICY:  1949  :  0.0002434623020235449
POLICY:  2468  :  0.00024314103939104825
POLICY:  2469  :  0.00024256996402982622
POLICY:  2988  :  0.0002463310374878347
POLICY:  2989  :  0.00024433116777800024
POLICY:  3508  :  0.00024114354164339602
POLICY:  3509  :  0.00024409685283899307
POLICY:  3565  :  0.00024318916257470846
POLICY:  3581  :  0.0002442180993966758
POLICY:  3761  :  0.00024576642317697406
POLICY:  3769  :  0.00024333639885298908
POLICY:  4028  :  0.00024702493101358414
POLICY:  4029  :  0.0002446008729748428
MCTS.py==>search  returning value of canonical board -v:  [-0.01662793]
MCTS.py==>search  returning value of canonical board -v2:  [0.01662793]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
IND:  388 PI:  0.2
IND:  389 PI:  0.2
IND:  2859 PI:  0.2
IND:  4028 PI:  0.2
IND:  4029 PI:  0.2
Coach.py ==>executeEpisode  action:  389
ChessGame==>getNextState  param action number:  389 self.n*self.n:  64
selected action:  1 7 1 6
MOVE:  a7a6  by converting:  1 7 1 6
board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a7a6
MOVE FROM:  48 MOVE TO:  40
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  40
piece moved: PAWN
position:  a7a6
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  20
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 1, 8, 3], [7, 1, 6, 3], [5, 1, 6, 2], [2, 1, 3, 3], [2, 1, 1, 3], [1, 6, 2, 7], [1, 6, 1, 7], [6, 4, 6, 5], [8, 2, 8, 3], [7, 2, 7, 3], [5, 2, 5, 3], [4, 2, 4, 3], [3, 2, 3, 3], [2, 2, 2, 3], [1, 2, 1, 3], [8, 2, 8, 4], [7, 2, 7, 4], [5, 2, 5, 4], [4, 2, 4, 4], [3, 2, 3, 4], [2, 2, 2, 4], [1, 2, 1, 4]]
inserting:  6 0 7 2  at:  3130
count:  1
inserting:  6 0 5 2  at:  3114
count:  2
inserting:  4 0 5 1  at:  2089
count:  3
inserting:  1 0 2 2  at:  530
count:  4
inserting:  1 0 0 2  at:  514
count:  5
inserting:  0 5 1 6  at:  334
count:  6
inserting:  0 5 0 6  at:  326
count:  7
inserting:  5 3 5 4  at:  2796
count:  8
inserting:  7 1 7 2  at:  3706
count:  9
inserting:  6 1 6 2  at:  3186
count:  10
inserting:  4 1 4 2  at:  2146
count:  11
inserting:  3 1 3 2  at:  1626
count:  12
inserting:  2 1 2 2  at:  1106
count:  13
inserting:  1 1 1 2  at:  586
count:  14
inserting:  0 1 0 2  at:  66
count:  15
inserting:  7 1 7 3  at:  3707
count:  16
inserting:  6 1 6 3  at:  3187
count:  17
inserting:  4 1 4 3  at:  2147
count:  18
inserting:  3 1 3 3  at:  1627
count:  19
inserting:  2 1 2 3  at:  1107
count:  20
inserting:  1 1 1 3  at:  587
count:  21
inserting:  0 1 0 3  at:  67
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  66  :  0.00024727496202103794
POLICY:  67  :  0.00024066364858299494
POLICY:  326  :  0.0002468761522322893
POLICY:  334  :  0.00024058374401647598
POLICY:  514  :  0.00024522218154743314
POLICY:  530  :  0.0002445639402139932
POLICY:  586  :  0.0002469863393343985
POLICY:  587  :  0.0002435631031403318
POLICY:  1106  :  0.0002442280820105225
POLICY:  1107  :  0.0002450228785164654
POLICY:  1626  :  0.00024229787231888622
POLICY:  1627  :  0.000245602335780859
POLICY:  2089  :  0.0002446035505272448
POLICY:  2146  :  0.00024352439504582435
POLICY:  2147  :  0.00024357586516998708
POLICY:  2796  :  0.00024354711058549583
POLICY:  3114  :  0.00024247982946690172
POLICY:  3130  :  0.0002428156294627115
POLICY:  3186  :  0.0002424694102955982
POLICY:  3187  :  0.00024527983623556793
POLICY:  3706  :  0.00024352943000849336
POLICY:  3707  :  0.00024347654834855348
MCTS.py==>search  returning value of canonical board -v:  [-0.01889493]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  21
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu2:  0.0
in if
in if  cur_best:  0.0 best_act:  66
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
a:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  66 next_s:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  22
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002426511637168005
POLICY:  137  :  0.00024214076984208077
POLICY:  324  :  0.0002437537768855691
POLICY:  454  :  0.00024431516067124903
POLICY:  908  :  0.00024244390078820288
POLICY:  909  :  0.00024253253650385886
POLICY:  981  :  0.00024392243358306587
POLICY:  1428  :  0.00024381936236750335
POLICY:  1429  :  0.00024142740585375577
POLICY:  1948  :  0.00024089287035167217
POLICY:  1949  :  0.00024289224529638886
POLICY:  2468  :  0.00024262457736767828
POLICY:  2469  :  0.00024274378665722907
POLICY:  2542  :  0.00024318050418514758
POLICY:  2859  :  0.0002453849301673472
POLICY:  3508  :  0.00024114658299367875
POLICY:  3509  :  0.00024453256628476083
POLICY:  3565  :  0.00024303336977027357
POLICY:  3581  :  0.0002440988173475489
POLICY:  4028  :  0.000246765703195706
POLICY:  4029  :  0.00024479589774273336
MCTS.py==>search  returning value of canonical board -v:  [-0.02563829]
MCTS.py==>search  returning value of canonical board -v2:  [0.02563829]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  23
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [-0.00260678]
in if
in if  cur_best:  [-0.00260678] best_act:  66
uuuuu2:  0.044831459026679746
in if
in if  cur_best:  0.044831459026679746 best_act:  67
uuuuu2:  0.045988740587257396
in if
in if  cur_best:  0.045988740587257396 best_act:  326
uuuuu2:  0.04481657419334064
uuuuu2:  0.04568063456698367
uuuuu2:  0.04555801563577603
uuuuu2:  0.04600926653117357
in if
in if  cur_best:  0.04600926653117357 best_act:  586
uuuuu2:  0.04537157706674237
uuuuu2:  0.04549545108406111
uuuuu2:  0.04564350787286377
uuuuu2:  0.04513588653323262
uuuuu2:  0.04575145069995597
uuuuu2:  0.045565394349370826
uuuuu2:  0.04536436642083415
uuuuu2:  0.04537395441127677
uuuuu2:  0.04536859793145924
uuuuu2:  0.04516978199053952
uuuuu2:  0.04523233569917788
uuuuu2:  0.0451678410798364
uuuuu2:  0.045691374634310125
uuuuu2:  0.04536530434695605
uuuuu2:  0.045355453411907
a:  586
ChessGame==>getNextState  param action number:  586 self.n*self.n:  64
selected action:  2 2 2 3
MOVE:  b2b3  by converting:  2 2 2 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  b2b3
MOVE FROM:  9 MOVE TO:  17
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  17
piece moved: PAWN
position:  b2b3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. P . . . . . .
P . P P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. P . . . . . .
P . P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  586 next_s:  r n b q k b n r
p . p p p . p p
. p . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0 -1  0  0  0  0  0  0
 -1  0 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0 -1  0  0  0  0  0  0
 -1  0 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  24
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p . p p p . p p
. p . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [3, 8, 2, 7], [3, 8, 1, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [1, 7, 1, 6], [2, 6, 2, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  2 7 1 6  at:  1486
count:  4
inserting:  2 7 0 5  at:  1477
count:  5
inserting:  1 7 2 5  at:  981
count:  6
inserting:  1 7 0 5  at:  965
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  0 6 0 5  at:  389
count:  14
inserting:  1 5 1 4  at:  844
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  0 6 0 4  at:  388
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024278697674162686
POLICY:  137  :  0.00024203724751714617
POLICY:  388  :  0.00024432296049781144
POLICY:  389  :  0.00024771280004642904
POLICY:  844  :  0.00024400482652708888
POLICY:  965  :  0.00024408672470599413
POLICY:  981  :  0.00024385021242778748
POLICY:  1428  :  0.00024380875402130187
POLICY:  1429  :  0.0002416635979898274
POLICY:  1477  :  0.00024464429588988423
POLICY:  1486  :  0.00024354716879315674
POLICY:  1948  :  0.00024086992198135704
POLICY:  1949  :  0.0002426994760753587
POLICY:  2468  :  0.00024264981038868427
POLICY:  2469  :  0.0002426433056825772
POLICY:  2542  :  0.00024317439238075167
POLICY:  2859  :  0.00024541871971450746
POLICY:  3508  :  0.0002412015455774963
POLICY:  3509  :  0.0002445810241624713
POLICY:  3565  :  0.00024304407997988164
POLICY:  3581  :  0.00024406354350503534
POLICY:  4028  :  0.0002468593593221158
POLICY:  4029  :  0.00024481030413880944
MCTS.py==>search  returning value of canonical board -v:  [-0.02400192]
MCTS.py==>search  returning value of canonical board -v2:  [0.02400192]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  25
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.00693319]
in if
in if  cur_best:  [0.00693319] best_act:  66
uuuuu2:  0.06340125737650422
in if
in if  cur_best:  0.06340125737650422 best_act:  67
uuuuu2:  0.06503790065495743
in if
in if  cur_best:  0.06503790065495743 best_act:  326
uuuuu2:  0.0633802070433224
uuuuu2:  0.06460217294243753
uuuuu2:  0.06442876358691998
uuuuu1:  [0.00853155]
uuuuu2:  0.06416509963404315
uuuuu2:  0.06434028394936096
uuuuu2:  0.06454966786808708
uuuuu2:  0.0638317828850307
uuuuu2:  0.06470232207812177
uuuuu2:  0.06443919866375862
uuuuu2:  0.06415490224080628
uuuuu2:  0.06416846170692614
uuuuu2:  0.06416088650052161
uuuuu2:  0.06387971830045697
uuuuu2:  0.06396818260359008
uuuuu2:  0.06387697343821727
uuuuu2:  0.0646173616913114
uuuuu2:  0.06415622866864837
uuuuu2:  0.06414229734269995
a:  326
ChessGame==>getNextState  param action number:  326 self.n*self.n:  64
selected action:  1 6 1 7
MOVE:  a6a7  by converting:  1 6 1 7
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a6a7
MOVE FROM:  40 MOVE TO:  48
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  48
piece moved: PAWN
position:  a6a7
board:  r n b q k b n r
P p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
P p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  326 next_s:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
p P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4 -1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4 -1  1  1  1  1  1  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  26
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
p P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [1, 2, 2, 1], [1, 2, 2, 1], [1, 2, 2, 1], [1, 2, 2, 1], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  0 1 1 0  at:  72
count:  6
inserting:  0 1 1 0  at:  72
count:  6
inserting:  0 1 1 0  at:  72
count:  6
inserting:  0 1 1 0  at:  72
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  72  :  0.00024355700588785112
POLICY:  388  :  0.00024402420967817307
POLICY:  389  :  0.0002478163514751941
POLICY:  908  :  0.00024245528038591146
POLICY:  909  :  0.00024259465862996876
POLICY:  965  :  0.00024388072779402137
POLICY:  981  :  0.00024414403014816344
POLICY:  1428  :  0.0002438853116473183
POLICY:  1429  :  0.00024153701087925583
POLICY:  1948  :  0.00024113280232995749
POLICY:  1949  :  0.000242930487729609
POLICY:  2468  :  0.0002426947612548247
POLICY:  2469  :  0.00024276036128867418
POLICY:  2542  :  0.00024307322746608406
POLICY:  2859  :  0.0002453329798299819
POLICY:  3508  :  0.00024121592286974192
POLICY:  3509  :  0.00024425151059404016
POLICY:  3565  :  0.00024275007308460772
POLICY:  3581  :  0.00024402522831223905
POLICY:  4028  :  0.00024658997426740825
POLICY:  4029  :  0.00024470171774737537
MCTS.py==>search  returning value of canonical board -v:  [-0.02476189]
MCTS.py==>search  returning value of canonical board -v2:  [0.02476189]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  27
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.01425346]
in if
in if  cur_best:  [0.01425346] best_act:  66
uuuuu2:  0.07765036481165168
in if
in if  cur_best:  0.07765036481165168 best_act:  67
uuuuu1:  [0.01506553]
uuuuu2:  0.07762458352404615
uuuuu2:  0.07912117999200284
in if
in if  cur_best:  0.07912117999200284 best_act:  514
uuuuu2:  0.07890879777318141
uuuuu1:  [0.01584328]
uuuuu2:  0.07858587669912467
uuuuu2:  0.0788004327908584
uuuuu2:  0.07905687467147009
uuuuu2:  0.07817764872022276
uuuuu2:  0.0792438371323064
in if
in if  cur_best:  0.0792438371323064 best_act:  1627
uuuuu2:  0.07892157808002209
uuuuu2:  0.07857338749405625
uuuuu2:  0.07858999438064534
uuuuu2:  0.07858071668545166
uuuuu2:  0.0782363573744241
uuuuu2:  0.0783447035759876
uuuuu2:  0.07823299561847334
uuuuu2:  0.07913978233428896
uuuuu2:  0.07857501202975312
uuuuu2:  0.0785579497097461
a:  1627
ChessGame==>getNextState  param action number:  1627 self.n*self.n:  64
selected action:  4 2 4 4
MOVE:  d2d4  by converting:  4 2 4 4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  d2d4
MOVE FROM:  11 MOVE TO:  27
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  27
piece moved: PAWN
position:  d2d4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . P . P . .
. . . . . . . .
P P P . P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . P . P . .
. . . . . . . .
P P P . P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  1627 next_s:  r n b q k b n r
p p p . p . p p
. . . . . . . .
. . . p . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1  0 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0 -1  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1  0 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  28
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p . p . p p
. . . . . . . .
. . . p . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [5, 8, 4, 7], [4, 8, 4, 7], [4, 8, 4, 6], [3, 8, 4, 7], [3, 8, 5, 6], [2, 8, 4, 7], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [4, 5, 4, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  4 7 3 6  at:  2526
count:  4
inserting:  3 7 3 6  at:  2014
count:  5
inserting:  3 7 3 5  at:  2013
count:  6
inserting:  2 7 3 6  at:  1502
count:  7
inserting:  2 7 4 5  at:  1509
count:  8
inserting:  1 7 3 6  at:  990
count:  9
inserting:  1 7 2 5  at:  981
count:  10
inserting:  1 7 0 5  at:  965
count:  11
inserting:  0 2 1 1  at:  137
count:  12
inserting:  7 6 7 5  at:  4029
count:  13
inserting:  6 6 6 5  at:  3509
count:  14
inserting:  4 6 4 5  at:  2469
count:  15
inserting:  2 6 2 5  at:  1429
count:  16
inserting:  1 6 1 5  at:  909
count:  17
inserting:  0 6 0 5  at:  389
count:  18
inserting:  5 4 5 3  at:  2859
count:  19
inserting:  3 4 3 3  at:  1819
count:  20
inserting:  0 2 0 1  at:  129
count:  21
inserting:  7 6 7 4  at:  4028
count:  22
inserting:  6 6 6 4  at:  3508
count:  23
inserting:  4 6 4 4  at:  2468
count:  24
inserting:  2 6 2 4  at:  1428
count:  25
inserting:  1 6 1 4  at:  908
count:  26
inserting:  0 6 0 4  at:  388
count:  27
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024265798856504261
POLICY:  137  :  0.0002419940719846636
POLICY:  388  :  0.00024409254547208548
POLICY:  389  :  0.00024761928943917155
POLICY:  908  :  0.00024252910225186497
POLICY:  909  :  0.00024285867402795702
POLICY:  965  :  0.00024404031864833087
POLICY:  981  :  0.00024415479856543243
POLICY:  990  :  0.00024518504505977035
POLICY:  1428  :  0.00024376745568588376
POLICY:  1429  :  0.0002415274066152051
POLICY:  1502  :  0.00024570681853219867
POLICY:  1509  :  0.00024256746110040694
POLICY:  1819  :  0.00024628432583995163
POLICY:  2013  :  0.00024461254361085594
POLICY:  2014  :  0.00024631558335386217
POLICY:  2468  :  0.0002427055878797546
POLICY:  2469  :  0.0002427214931230992
POLICY:  2526  :  0.0002447415317874402
POLICY:  2542  :  0.00024341822427231818
POLICY:  2859  :  0.0002453774504829198
POLICY:  3508  :  0.00024141476023942232
POLICY:  3509  :  0.00024446114548482
POLICY:  3565  :  0.0002427843282930553
POLICY:  3581  :  0.00024375082284677774
POLICY:  4028  :  0.0002469970495440066
POLICY:  4029  :  0.00024480573483742774
MCTS.py==>search  returning value of canonical board -v:  [-0.02021375]
MCTS.py==>search  returning value of canonical board -v2:  [0.02021375]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  1627 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  29
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu2:  0.0
in if
in if  cur_best:  0.0 best_act:  129
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
a:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
P P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  129 next_s:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  30
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 6 7 5  at:  4029
count:  5
inserting:  6 6 6 5  at:  3509
count:  6
inserting:  5 6 5 5  at:  2989
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
inserting:  0 6 0 4  at:  388
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.00024384933931287378
POLICY:  389  :  0.00024764760746620595
POLICY:  908  :  0.000242567592067644
POLICY:  909  :  0.00024295599723700434
POLICY:  965  :  0.0002442830300424248
POLICY:  981  :  0.00024428151664324105
POLICY:  1428  :  0.00024397090601269156
POLICY:  1429  :  0.00024117343127727509
POLICY:  1948  :  0.00024073553504422307
POLICY:  1949  :  0.00024324138939846307
POLICY:  2468  :  0.0002427833096589893
POLICY:  2469  :  0.00024270900757983327
POLICY:  2988  :  0.0002461845870129764
POLICY:  2989  :  0.00024404953001067042
POLICY:  3508  :  0.0002410660235909745
POLICY:  3509  :  0.00024412982747890055
POLICY:  3565  :  0.00024321104865521193
POLICY:  3581  :  0.0002439920062897727
POLICY:  4028  :  0.00024662239593453705
POLICY:  4029  :  0.00024487380869686604
MCTS.py==>search  returning value of canonical board -v:  [-0.01819554]
MCTS.py==>search  returning value of canonical board -v2:  [0.01819554]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  31
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.00555142]
in if
in if  cur_best:  [0.00555142] best_act:  129
uuuuu2:  0.047394031726483626
in if
in if  cur_best:  0.047394031726483626 best_act:  137
uuuuu2:  0.047709744388353764
in if
in if  cur_best:  0.047709744388353764 best_act:  324
uuuuu2:  0.047819623616732365
in if
in if  cur_best:  0.047819623616732365 best_act:  454
uuuuu2:  0.047453363319784336
uuuuu2:  0.04747071192209793
uuuuu2:  0.04774275543757633
uuuuu2:  0.04772258138566576
uuuuu2:  0.04725440552674347
uuuuu2:  0.04714978129282696
uuuuu2:  0.047541117454948024
uuuuu2:  0.04748872701151404
uuuuu2:  0.04751205975657282
uuuuu2:  0.04759753815158734
uuuuu2:  0.04802900879986847
in if
in if  cur_best:  0.04802900879986847 best_act:  2859
uuuuu2:  0.04719944027843484
uuuuu2:  0.04786217625481563
uuuuu2:  0.0475687396426409
uuuuu2:  0.047777278899839196
uuuuu2:  0.04829926647170039
in if
in if  cur_best:  0.04829926647170039 best_act:  4028
uuuuu2:  0.04791371792407633
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  8 7 8 5
MOVE:  h7h5  by converting:  8 7 8 5
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  h7h5
MOVE FROM:  55 MOVE TO:  39
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  39
piece moved: PAWN
position:  h7h5
board:  r n b q k b n r
. p p p p . p .
p . . . . . . .
. . . . . p . P
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . p .
p . . . . . . .
. . . . . p . P
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  4028 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . p
P . . . . . . .
. P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  0  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0 -1  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  0  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0 -1  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  32
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . p
P . . . . . . .
. P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 4, 8, 3], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 3 7 2  at:  3834
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  5 6 5 4  at:  2988
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024384526477660984
POLICY:  454  :  0.0002450791362207383
POLICY:  901  :  0.00024709667195566
POLICY:  908  :  0.0002423889673082158
POLICY:  909  :  0.00024284074606839567
POLICY:  965  :  0.0002442575932946056
POLICY:  981  :  0.0002440456737531349
POLICY:  1428  :  0.00024413617211394012
POLICY:  1429  :  0.0002412166359135881
POLICY:  1948  :  0.00024081100127659738
POLICY:  1949  :  0.00024338554067071527
POLICY:  2468  :  0.00024283344100695103
POLICY:  2469  :  0.00024265507818199694
POLICY:  2988  :  0.0002463820856064558
POLICY:  2989  :  0.00024385332653764635
POLICY:  3508  :  0.00024117555585689843
POLICY:  3509  :  0.0002442122786305845
POLICY:  3565  :  0.00024329252482857555
POLICY:  3581  :  0.0002441701653879136
POLICY:  3834  :  0.0002458259405102581
POLICY:  4028  :  0.0002468060120008886
POLICY:  4029  :  0.00024481170112267137
MCTS.py==>search  returning value of canonical board -v:  [-0.01628632]
MCTS.py==>search  returning value of canonical board -v2:  [0.01628632]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  33
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.01538774]
in if
in if  cur_best:  [0.01538774] best_act:  129
uuuuu2:  0.0670252824431339
in if
in if  cur_best:  0.0670252824431339 best_act:  137
uuuuu2:  0.06747176757136356
in if
in if  cur_best:  0.06747176757136356 best_act:  324
uuuuu2:  0.06762716026635968
in if
in if  cur_best:  0.06762716026635968 best_act:  454
uuuuu2:  0.06710918998705698
uuuuu2:  0.06713372461573708
uuuuu2:  0.06751845224488227
uuuuu2:  0.06748992182706234
uuuuu2:  0.06682782117779876
uuuuu2:  0.06667986016724113
uuuuu2:  0.06723329307515978
uuuuu2:  0.0671592017995167
uuuuu2:  0.06719219928402623
uuuuu2:  0.06731308398954564
uuuuu2:  0.06792327563211072
in if
in if  cur_best:  0.06792327563211072 best_act:  2859
uuuuu2:  0.06675008857818149
uuuuu2:  0.06768733878425179
uuuuu2:  0.06727235674761746
uuuuu2:  0.0675672757934345
uuuuu1:  [0.01786642]
uuuuu2:  0.0677602297119476
a:  2859
ChessGame==>getNextState  param action number:  2859 self.n*self.n:  64
selected action:  6 5 6 4
MOVE:  f5f4  by converting:  6 5 6 4
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  f5f4
MOVE FROM:  37 MOVE TO:  29
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  29
piece moved: PAWN
position:  f5f4
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . . . .
. . . . . P . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . . . .
. . . . . P . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2859 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . p . .
. . . . . . . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  34
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . p . .
. . . . . . . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [6, 5, 6, 4], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  5 4 5 3  at:  2859
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024403615680057555
POLICY:  454  :  0.0002451626060064882
POLICY:  901  :  0.0002473725180607289
POLICY:  908  :  0.00024259850033558905
POLICY:  909  :  0.00024304052931256592
POLICY:  965  :  0.0002441089745843783
POLICY:  981  :  0.0002442567201796919
POLICY:  1428  :  0.00024383998243138194
POLICY:  1429  :  0.00024117859720718116
POLICY:  1948  :  0.00024075948749668896
POLICY:  1949  :  0.00024304146063514054
POLICY:  2468  :  0.00024278175260405988
POLICY:  2469  :  0.00024282545200549066
POLICY:  2859  :  0.0002451858890708536
POLICY:  2989  :  0.0002444739220663905
POLICY:  3508  :  0.00024133763508871198
POLICY:  3509  :  0.00024402154667768627
POLICY:  3565  :  0.00024303360260091722
POLICY:  3581  :  0.0002438654046272859
POLICY:  4028  :  0.0002463381679262966
POLICY:  4029  :  0.000244776631006971
MCTS.py==>search  returning value of canonical board -v:  [-0.01843412]
MCTS.py==>search  returning value of canonical board -v2:  [0.01843412]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  35
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.02293541]
in if
in if  cur_best:  [0.02293541] best_act:  129
uuuuu2:  0.08208887092580096
in if
in if  cur_best:  0.08208887092580096 best_act:  137
uuuuu2:  0.08263570129675285
in if
in if  cur_best:  0.08263570129675285 best_act:  324
uuuuu2:  0.08282601770300105
in if
in if  cur_best:  0.08282601770300105 best_act:  454
uuuuu2:  0.0821916362598918
uuuuu2:  0.08222168492053925
uuuuu2:  0.08269287811121748
uuuuu2:  0.08265793562831385
uuuuu2:  0.08184703125378323
uuuuu2:  0.08166581676493687
uuuuu2:  0.08234363088056956
uuuuu2:  0.08225288797071084
uuuuu2:  0.0822933014706327
uuuuu2:  0.0824413543937473
uuuuu1:  [0.02316022]
uuuuu2:  0.08175182865106205
uuuuu2:  0.08289972103415735
in if
in if  cur_best:  0.08289972103415735 best_act:  3509
uuuuu2:  0.08239147391306983
uuuuu2:  0.08275267450190996
uuuuu1:  [0.02554207]
uuuuu2:  0.08298899382402379
in if
in if  cur_best:  0.08298899382402379 best_act:  4029
a:  4029
ChessGame==>getNextState  param action number:  4029 self.n*self.n:  64
selected action:  8 7 8 6
MOVE:  h7h6  by converting:  8 7 8 6
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  h7h6
MOVE FROM:  55 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
piece moved: PAWN
position:  h7h6
board:  r n b q k b n r
. p p p p . p .
p . . . . . . P
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . p .
p . . . . . . P
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  4029 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . p
. P P P P . P .
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  0  1  0  0  0  0  0  0 -1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  0  1  0  0  0  0  0  0 -1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  36
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . p
. P P P P . P .
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 3, 7, 2], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 3, 8, 2], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 2 6 1  at:  3761
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  5 6 5 5  at:  2989
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  7 2 7 1  at:  3769
count:  16
inserting:  7 6 7 4  at:  4028
count:  17
inserting:  6 6 6 4  at:  3508
count:  18
inserting:  5 6 5 4  at:  2988
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024396985827479511
POLICY:  454  :  0.0002452446206007153
POLICY:  901  :  0.0002470698964316398
POLICY:  908  :  0.00024275039322674274
POLICY:  909  :  0.00024278424098156393
POLICY:  965  :  0.00024420328554697335
POLICY:  981  :  0.0002442051190882921
POLICY:  1428  :  0.0002443223784212023
POLICY:  1429  :  0.00024131829559337348
POLICY:  1948  :  0.00024078745627775788
POLICY:  1949  :  0.00024335943453479558
POLICY:  2468  :  0.00024292938178405166
POLICY:  2469  :  0.00024256574397441
POLICY:  2988  :  0.0002462909906171262
POLICY:  2989  :  0.00024424053844995797
POLICY:  3508  :  0.00024109725200105458
POLICY:  3509  :  0.0002440761454636231
POLICY:  3565  :  0.0002432459150440991
POLICY:  3581  :  0.00024399871472269297
POLICY:  3761  :  0.0002457130467519164
POLICY:  3769  :  0.00024315649352502078
POLICY:  4028  :  0.0002468368911650032
POLICY:  4029  :  0.00024494706303812563
MCTS.py==>search  returning value of canonical board -v:  [-0.01447958]
MCTS.py==>search  returning value of canonical board -v2:  [0.01447958]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  37
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.02929839]
in if
in if  cur_best:  [0.02929839] best_act:  129
uuuuu2:  0.09478806345296725
in if
in if  cur_best:  0.09478806345296725 best_act:  137
uuuuu2:  0.09541948877670753
in if
in if  cur_best:  0.09541948877670753 best_act:  324
uuuuu2:  0.09563924723346473
in if
in if  cur_best:  0.09563924723346473 best_act:  454
uuuuu2:  0.09490672663956867
uuuuu2:  0.09494142384419586
uuuuu2:  0.09548551087515265
uuuuu2:  0.09544516277133153
uuuuu2:  0.09450881105348694
uuuuu2:  0.09429956258565392
uuuuu2:  0.09508223490989605
uuuuu2:  0.09497745402302808
uuuuu2:  0.09502411951314564
uuuuu2:  0.09519507630317468
uuuuu1:  [0.02959489]
uuuuu2:  0.09439888055686968
uuuuu2:  0.09572435250963127
in if
in if  cur_best:  0.09572435250963127 best_act:  3509
uuuuu2:  0.0951374792852818
uuuuu2:  0.09555455779967839
uuuuu1:  [0.03201295]
uuuuu1:  [0.03343413]
a:  3509
ChessGame==>getNextState  param action number:  3509 self.n*self.n:  64
selected action:  7 7 7 6
MOVE:  g7g6  by converting:  7 7 7 6
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  g7g6
MOVE FROM:  54 MOVE TO:  46
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  46
piece moved: PAWN
position:  g7g6
board:  r n b q k b n r
. p p p p . . p
p . . . . . P .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . . p
p . . . . . P .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  3509 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . p .
. P P P P . . P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  0  1  1  0  0  0  0  0 -1  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  0  1  1  0  0  0  0  0 -1  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  38
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . p .
. P P P P . . P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [7, 3, 8, 2], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [7, 3, 7, 2], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  6 2 7 1  at:  3257
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  5 6 5 5  at:  2989
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  6 2 6 1  at:  3249
count:  16
inserting:  7 6 7 4  at:  4028
count:  17
inserting:  6 6 6 4  at:  3508
count:  18
inserting:  5 6 5 4  at:  2988
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024373563064727932
POLICY:  454  :  0.00024532838142476976
POLICY:  901  :  0.0002473189088050276
POLICY:  908  :  0.00024270314315799624
POLICY:  909  :  0.0002429632586427033
POLICY:  965  :  0.0002442917029839009
POLICY:  981  :  0.0002443075936753303
POLICY:  1428  :  0.0002441870456095785
POLICY:  1429  :  0.00024109457444865257
POLICY:  1948  :  0.00024040545395109802
POLICY:  1949  :  0.0002435019996482879
POLICY:  2468  :  0.00024300739460159093
POLICY:  2469  :  0.00024253560695797205
POLICY:  2988  :  0.0002459186944179237
POLICY:  2989  :  0.00024426972959190607
POLICY:  3249  :  0.00024279004719574004
POLICY:  3257  :  0.0002455238427501172
POLICY:  3508  :  0.0002413597103441134
POLICY:  3509  :  0.00024407610180787742
POLICY:  3565  :  0.00024327074061147869
POLICY:  3581  :  0.00024396201479248703
POLICY:  4028  :  0.00024635656154714525
POLICY:  4029  :  0.0002448877494316548
MCTS.py==>search  returning value of canonical board -v:  [-0.0189903]
MCTS.py==>search  returning value of canonical board -v2:  [0.0189903]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  39
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.02042474]
in if
in if  cur_best:  [0.02042474] best_act:  66
uuuuu2:  0.08966291805335949
in if
in if  cur_best:  0.08966291805335949 best_act:  67
uuuuu1:  [0.02122685]
uuuuu2:  0.08963314838668128
uuuuu2:  0.09136126913396735
in if
in if  cur_best:  0.09136126913396735 best_act:  514
uuuuu2:  0.09111603127155206
uuuuu1:  [0.02200735]
uuuuu2:  0.09074315413348474
uuuuu2:  0.09099090216812222
uuuuu2:  0.09128701574572753
uuuuu2:  0.09027177306646524
uuuuu1:  [0.0255377]
uuuuu2:  0.09113078869874165
uuuuu2:  0.0907287328416683
uuuuu2:  0.09074790882255354
uuuuu2:  0.09073719586291848
uuuuu2:  0.09033956398107904
uuuuu2:  0.09046467139835576
uuuuu2:  0.0903356821596728
uuuuu2:  0.09138274926862025
in if
in if  cur_best:  0.09138274926862025 best_act:  3187
uuuuu2:  0.0907306086939121
uuuuu2:  0.090710906823814
a:  3187
ChessGame==>getNextState  param action number:  3187 self.n*self.n:  64
selected action:  7 2 7 4
MOVE:  g2g4  by converting:  7 2 7 4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  g2g4
MOVE FROM:  14 MOVE TO:  30
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  30
piece moved: PAWN
position:  g2g4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P P .
. . . . . . . .
P P P P P . . P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P P .
. . . . . . . .
P P P P P . . P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  3187 next_s:  r n b q k b n r
p p p p p . . p
. . . . . . . .
. . . . . p p .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1 -1  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1 -1  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0  0 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  40
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . . p
. . . . . . . .
. . . . . p p .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [6, 8, 7, 7], [6, 8, 8, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [7, 5, 7, 4], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  5 7 6 6  at:  3062
count:  3
inserting:  5 7 7 5  at:  3069
count:  4
inserting:  4 7 5 6  at:  2542
count:  5
inserting:  1 7 2 5  at:  981
count:  6
inserting:  1 7 0 5  at:  965
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  0 6 0 5  at:  389
count:  14
inserting:  6 4 6 3  at:  3379
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
inserting:  0 6 0 4  at:  388
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024259167548734695
POLICY:  137  :  0.00024221334024332464
POLICY:  388  :  0.00024410935293417424
POLICY:  389  :  0.00024776210193522274
POLICY:  908  :  0.00024248540285043418
POLICY:  909  :  0.00024238011974375695
POLICY:  965  :  0.00024406258307863027
POLICY:  981  :  0.0002438278024783358
POLICY:  1428  :  0.00024389020109083503
POLICY:  1429  :  0.0002415362832834944
POLICY:  1948  :  0.00024085069890134037
POLICY:  1949  :  0.00024295176262967288
POLICY:  2468  :  0.00024276158364955336
POLICY:  2469  :  0.00024257264158222824
POLICY:  2542  :  0.00024309573927894235
POLICY:  2859  :  0.00024532043607905507
POLICY:  3062  :  0.00024257792392745614
POLICY:  3069  :  0.00024033855879679322
POLICY:  3379  :  0.0002470341860316694
POLICY:  3565  :  0.00024287382257170975
POLICY:  3581  :  0.0002443200210109353
POLICY:  4028  :  0.00024652498541399837
POLICY:  4029  :  0.0002448747691232711
MCTS.py==>search  returning value of canonical board -v:  [-0.02514743]
MCTS.py==>search  returning value of canonical board -v2:  [0.02514743]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  41
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.02586174]
in if
in if  cur_best:  [0.02586174] best_act:  66
uuuuu2:  0.10024618991415248
in if
in if  cur_best:  0.10024618991415248 best_act:  67
uuuuu1:  [0.02665508]
uuuuu2:  0.10021290641497248
uuuuu2:  0.10214500414710216
in if
in if  cur_best:  0.10214500414710216 best_act:  514
uuuuu2:  0.10187081988159351
uuuuu1:  [0.02743801]
uuuuu2:  0.10145393056760646
uuuuu2:  0.10173092129097715
uuuuu2:  0.10206198633527022
uuuuu2:  0.10092691051302546
uuuuu1:  [0.03093792]
uuuuu2:  0.10188731918677797
uuuuu2:  0.101437807073194
uuuuu2:  0.10145924647159131
uuuuu2:  0.10144726901859921
uuuuu2:  0.10100270305969213
uuuuu2:  0.10114257740445222
uuuuu2:  0.10099836305142171
uuuuu1:  [0.02593708]
uuuuu2:  0.10143990433976044
uuuuu2:  0.10141787697934883
a:  514
ChessGame==>getNextState  param action number:  514 self.n*self.n:  64
selected action:  2 1 1 3
MOVE:  b1a3  by converting:  2 1 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  b1a3
MOVE FROM:  1 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
position:  b1a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
N . . . . . . .
P P P P P . P P
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
N . . . . . . .
P P P P P . P P
R . B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  514 next_s:  r . b q k b n r
p p p p p . p p
n . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -2  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4  0 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -2  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4  0 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  42
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r . b q k b n r
p p p p p . p p
n . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [1, 8, 2, 8], [1, 6, 2, 8], [1, 6, 3, 5], [1, 6, 2, 4], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  0 7 1 7  at:  463
count:  4
inserting:  0 5 1 7  at:  335
count:  5
inserting:  0 5 2 4  at:  340
count:  6
inserting:  0 5 1 3  at:  331
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  5 4 5 3  at:  2859
count:  15
inserting:  0 2 0 1  at:  129
count:  16
inserting:  7 6 7 4  at:  4028
count:  17
inserting:  6 6 6 4  at:  3508
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024265573301818222
POLICY:  137  :  0.00024211838899645954
POLICY:  331  :  0.0002448379236739129
POLICY:  335  :  0.00024332852626685053
POLICY:  340  :  0.0002467271115165204
POLICY:  463  :  0.00024537264835089445
POLICY:  908  :  0.0002423323894618079
POLICY:  909  :  0.00024249219859484583
POLICY:  1428  :  0.00024380265676882118
POLICY:  1429  :  0.00024135281273629516
POLICY:  1948  :  0.00024094514083117247
POLICY:  1949  :  0.00024292834859807044
POLICY:  2468  :  0.0002426260180072859
POLICY:  2469  :  0.00024271522124763578
POLICY:  2542  :  0.00024321441014762968
POLICY:  2859  :  0.00024532273528166115
POLICY:  3508  :  0.00024116932763718069
POLICY:  3509  :  0.000244490074692294
POLICY:  3565  :  0.00024302874226123095
POLICY:  3581  :  0.00024399049289058894
POLICY:  4028  :  0.0002467589220032096
POLICY:  4029  :  0.0002448188024573028
MCTS.py==>search  returning value of canonical board -v:  [-0.0262349]
MCTS.py==>search  returning value of canonical board -v2:  [0.0262349]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  43
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.03077717]
in if
in if  cur_best:  [0.03077717] best_act:  66
uuuuu2:  0.10981419903985636
in if
in if  cur_best:  0.10981419903985636 best_act:  67
uuuuu1:  [0.03156258]
uuuuu2:  0.10977773879326917
uuuuu1:  [0.02971222]
uuuuu2:  0.11159389200138903
in if
in if  cur_best:  0.11159389200138903 best_act:  530
uuuuu1:  [0.0323477]
uuuuu2:  0.1111372126388819
uuuuu2:  0.1114406407737015
uuuuu2:  0.11180330435922302
in if
in if  cur_best:  0.11180330435922302 best_act:  1107
uuuuu2:  0.11055989109457867
uuuuu1:  [0.0358201]
uuuuu2:  0.11161196608465442
uuuuu2:  0.11111955023569087
uuuuu2:  0.11114303591993398
uuuuu2:  0.11112991527756351
uuuuu2:  0.11064291766957886
uuuuu2:  0.11079614233726158
uuuuu2:  0.11063816342871992
uuuuu1:  [0.03081284]
uuuuu2:  0.11112184767610596
uuuuu2:  0.11109771791174648
a:  1107
ChessGame==>getNextState  param action number:  1107 self.n*self.n:  64
selected action:  3 2 3 4
MOVE:  c2c4  by converting:  3 2 3 4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  c2c4
MOVE FROM:  10 MOVE TO:  26
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  26
piece moved: PAWN
position:  c2c4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . P . . P . .
. . . . . . . .
P P . P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . P . . P . .
. . . . . . . .
P P . P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  1107 next_s:  r n b q k b n r
p p . p p . p p
. . . . . . . .
. . p . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1  0 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1  0 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  44
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p . p p . p p
. . . . . . . .
. . p . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [4, 8, 3, 7], [4, 8, 2, 6], [4, 8, 1, 5], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [3, 5, 3, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  3 7 2 6  at:  2006
count:  4
inserting:  3 7 1 5  at:  1997
count:  5
inserting:  3 7 0 4  at:  1988
count:  6
inserting:  1 7 2 5  at:  981
count:  7
inserting:  1 7 0 5  at:  965
count:  8
inserting:  0 2 1 1  at:  137
count:  9
inserting:  7 6 7 5  at:  4029
count:  10
inserting:  6 6 6 5  at:  3509
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  2 4 2 3  at:  1299
count:  17
inserting:  0 2 0 1  at:  129
count:  18
inserting:  7 6 7 4  at:  4028
count:  19
inserting:  6 6 6 4  at:  3508
count:  20
inserting:  4 6 4 4  at:  2468
count:  21
inserting:  3 6 3 4  at:  1948
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024260101781692356
POLICY:  137  :  0.00024190561089199036
POLICY:  388  :  0.0002443603007122874
POLICY:  389  :  0.0002475707442499697
POLICY:  908  :  0.00024266012769658118
POLICY:  909  :  0.0002425690327072516
POLICY:  965  :  0.00024409903562627733
POLICY:  981  :  0.00024379875685553998
POLICY:  1299  :  0.0002447059378027916
POLICY:  1948  :  0.00024095081607811153
POLICY:  1949  :  0.00024288168060593307
POLICY:  1988  :  0.000244886934524402
POLICY:  1997  :  0.00024225888773798943
POLICY:  2006  :  0.00024220858176704496
POLICY:  2468  :  0.00024235938326455653
POLICY:  2469  :  0.00024266907712444663
POLICY:  2542  :  0.00024324793776031584
POLICY:  2859  :  0.00024537526769563556
POLICY:  3508  :  0.00024125519848894328
POLICY:  3509  :  0.0002445713325869292
POLICY:  3565  :  0.00024310237495228648
POLICY:  3581  :  0.00024389340251218528
POLICY:  4028  :  0.0002468311577104032
POLICY:  4029  :  0.000244618218857795
MCTS.py==>search  returning value of canonical board -v:  [-0.02050982]
MCTS.py==>search  returning value of canonical board -v2:  [0.02050982]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  45
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.03529737]
in if
in if  cur_best:  [0.03529737] best_act:  66
uuuuu2:  0.11861289149677642
in if
in if  cur_best:  0.11861289149677642 best_act:  67
uuuuu1:  [0.0360755]
uuuuu2:  0.11857350992945451
uuuuu1:  [0.0341949]
uuuuu2:  0.12053517959785555
in if
in if  cur_best:  0.12053517959785555 best_act:  530
uuuuu1:  [0.03686262]
uuuuu2:  0.12004190950940175
uuuuu2:  0.12036964935312965
uuuuu1:  [0.03987087]
uuuuu2:  0.1194183309713628
uuuuu1:  [0.04030973]
uuuuu2:  0.12055470183902296
in if
in if  cur_best:  0.12055470183902296 best_act:  2089
uuuuu2:  0.12002283193353644
uuuuu2:  0.12004819937182049
uuuuu2:  0.12003402745832056
uuuuu2:  0.11950800992197166
uuuuu2:  0.11967351147861356
uuuuu2:  0.11950287475493424
uuuuu1:  [0.03529658]
uuuuu2:  0.12002531345280315
uuuuu2:  0.11999925032848191
a:  2089
ChessGame==>getNextState  param action number:  2089 self.n*self.n:  64
selected action:  5 1 6 2
MOVE:  e1f2  by converting:  5 1 6 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  e1f2
MOVE FROM:  4 MOVE TO:  13
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  13
position:  e1f2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P K P P
R N B Q . B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P K P P
R N B Q . B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2089 next_s:  r n b q . b n r
p p p p p k p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -6 -1 -1 -4 -2 -3 -5  0 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1 -6 -1 -1 -4 -2 -3 -5  0 -3 -2 -4]
NUMBER RECUSRIONS:  46
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q . b n r
p p p p p k p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [4, 8, 5, 8], [2, 8, 3, 6], [2, 8, 1, 6], [6, 7, 5, 8], [6, 7, 7, 6], [6, 7, 6, 6], [6, 7, 5, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  3 7 4 7  at:  2023
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  5 6 4 7  at:  2983
count:  6
inserting:  5 6 6 5  at:  2997
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  5 6 4 5  at:  2981
count:  9
inserting:  0 2 1 1  at:  137
count:  10
inserting:  7 6 7 5  at:  4029
count:  11
inserting:  6 6 6 5  at:  3509
count:  12
inserting:  4 6 4 5  at:  2469
count:  13
inserting:  3 6 3 5  at:  1949
count:  14
inserting:  2 6 2 5  at:  1429
count:  15
inserting:  1 6 1 5  at:  909
count:  16
inserting:  0 6 0 5  at:  389
count:  17
inserting:  5 4 5 3  at:  2859
count:  18
inserting:  0 2 0 1  at:  129
count:  19
inserting:  7 6 7 4  at:  4028
count:  20
inserting:  6 6 6 4  at:  3508
count:  21
inserting:  4 6 4 4  at:  2468
count:  22
inserting:  3 6 3 4  at:  1948
count:  23
inserting:  2 6 2 4  at:  1428
count:  24
inserting:  1 6 1 4  at:  908
count:  25
inserting:  0 6 0 4  at:  388
count:  26
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024278507044073194
POLICY:  137  :  0.00024193200806621462
POLICY:  388  :  0.00024386541917920113
POLICY:  389  :  0.0002477072412148118
POLICY:  908  :  0.00024262799706775695
POLICY:  909  :  0.00024263995874207467
POLICY:  965  :  0.00024392212799284607
POLICY:  981  :  0.00024406118609476835
POLICY:  1428  :  0.00024399506219197065
POLICY:  1429  :  0.00024124444462358952
POLICY:  1948  :  0.0002408277796348557
POLICY:  1949  :  0.00024313446192536503
POLICY:  2023  :  0.0002442997938487679
POLICY:  2468  :  0.0002427853032713756
POLICY:  2469  :  0.00024245404347311705
POLICY:  2859  :  0.0002451219188515097
POLICY:  2981  :  0.00024394075444433838
POLICY:  2983  :  0.000245121045736596
POLICY:  2989  :  0.0002440483949612826
POLICY:  2997  :  0.00024445378221571445
POLICY:  3508  :  0.00024098048743326217
POLICY:  3509  :  0.0002444552374072373
POLICY:  3565  :  0.0002428874868201092
POLICY:  3581  :  0.0002443879784550518
POLICY:  4028  :  0.0002472063060849905
POLICY:  4029  :  0.0002446147846058011
MCTS.py==>search  returning value of canonical board -v:  [-0.02345159]
MCTS.py==>search  returning value of canonical board -v2:  [0.02345159]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  47
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.03950467]
in if
in if  cur_best:  [0.03950467] best_act:  66
uuuuu2:  0.12680251475300844
in if
in if  cur_best:  0.12680251475300844 best_act:  67
uuuuu1:  [0.04027601]
uuuuu2:  0.1267604140866448
uuuuu1:  [0.03836727]
uuuuu2:  0.12885752717383997
in if
in if  cur_best:  0.12885752717383997 best_act:  530
uuuuu1:  [0.04106501]
uuuuu2:  0.1283301992680863
uuuuu2:  0.12868056789872193
uuuuu1:  [0.04403985]
uuuuu2:  0.1276635657700614
uuuuu1:  [0.04448857]
uuuuu1:  [0.04098761]
uuuuu2:  0.12830980448161255
uuuuu2:  0.12833692341385228
uuuuu2:  0.12832177300104322
uuuuu2:  0.12775943660091393
uuuuu2:  0.12793636520718016
uuuuu2:  0.12775394687643454
uuuuu1:  [0.03946993]
uuuuu2:  0.12831245733729674
uuuuu2:  0.1282845946853999
a:  530
ChessGame==>getNextState  param action number:  530 self.n*self.n:  64
selected action:  2 1 3 3
MOVE:  b1c3  by converting:  2 1 3 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  b1c3
MOVE FROM:  1 MOVE TO:  18
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  18
position:  b1c3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . N . . . . .
P P P P P . P P
R . B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . N . . . . .
P P P P P . P P
R . B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  530 next_s:  r . b q k b n r
p p p p p . p p
. . n . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0 -2  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4  0 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0 -2  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4  0 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  48
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r . b q k b n r
p p p p p . p p
. . n . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [1, 8, 2, 8], [3, 6, 2, 8], [3, 6, 5, 5], [3, 6, 1, 5], [3, 6, 4, 4], [3, 6, 2, 4], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  0 7 1 7  at:  463
count:  4
inserting:  2 5 1 7  at:  1359
count:  5
inserting:  2 5 4 4  at:  1380
count:  6
inserting:  2 5 0 4  at:  1348
count:  7
inserting:  2 5 3 3  at:  1371
count:  8
inserting:  2 5 1 3  at:  1355
count:  9
inserting:  0 2 1 1  at:  137
count:  10
inserting:  7 6 7 5  at:  4029
count:  11
inserting:  6 6 6 5  at:  3509
count:  12
inserting:  4 6 4 5  at:  2469
count:  13
inserting:  3 6 3 5  at:  1949
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  0 6 0 5  at:  389
count:  16
inserting:  5 4 5 3  at:  2859
count:  17
inserting:  0 2 0 1  at:  129
count:  18
inserting:  7 6 7 4  at:  4028
count:  19
inserting:  6 6 6 4  at:  3508
count:  20
inserting:  4 6 4 4  at:  2468
count:  21
inserting:  3 6 3 4  at:  1948
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002430237946100533
POLICY:  137  :  0.00024187529925256968
POLICY:  388  :  0.00024416210362687707
POLICY:  389  :  0.0002476898953318596
POLICY:  463  :  0.00024540512822568417
POLICY:  908  :  0.00024237149045802653
POLICY:  909  :  0.00024236038734670728
POLICY:  1348  :  0.0002441630349494517
POLICY:  1355  :  0.00024336566275451332
POLICY:  1359  :  0.00024282159574795514
POLICY:  1371  :  0.00024088435748126358
POLICY:  1380  :  0.0002468999591656029
POLICY:  1948  :  0.00024079855938907713
POLICY:  1949  :  0.00024266430409625173
POLICY:  2468  :  0.00024273864983115345
POLICY:  2469  :  0.00024252741422969848
POLICY:  2542  :  0.00024317904899362475
POLICY:  2859  :  0.0002457530645187944
POLICY:  3508  :  0.00024154651327989995
POLICY:  3509  :  0.000244305090745911
POLICY:  3565  :  0.0002430915046716109
POLICY:  3581  :  0.00024369178572669625
POLICY:  4028  :  0.0002467925369273871
POLICY:  4029  :  0.0002447516017127782
MCTS.py==>search  returning value of canonical board -v:  [-0.02214323]
MCTS.py==>search  returning value of canonical board -v2:  [0.02214323]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  514 COUNT:  1
CNT NUM:  530 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  1107 COUNT:  1
CNT NUM:  1627 COUNT:  1
CNT NUM:  2089 COUNT:  1
CNT NUM:  3187 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  49
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03490429]
in if
in if  cur_best:  [0.03490429] best_act:  129
uuuuu2:  0.10597627666819912
in if
in if  cur_best:  0.10597627666819912 best_act:  137
uuuuu2:  0.10668223164149815
in if
in if  cur_best:  0.10668223164149815 best_act:  324
uuuuu2:  0.10692792906546793
in if
in if  cur_best:  0.10692792906546793 best_act:  454
uuuuu2:  0.10610894614403288
uuuuu2:  0.10614773879812069
uuuuu2:  0.10675604659156838
uuuuu2:  0.10671093604011476
uuuuu2:  0.10566406299414015
uuuuu2:  0.105430116095009
uuuuu2:  0.10630517035556558
uuuuu2:  0.10618802176267583
uuuuu2:  0.10624019536672895
uuuuu2:  0.106431330868589
uuuuu1:  [0.03526395]
uuuuu2:  0.1055411569625219
uuuuu1:  [0.03452124]
uuuuu2:  0.1063669354449341
uuuuu2:  0.10683324340000681
uuuuu1:  [0.03771391]
uuuuu1:  [0.03908958]
a:  454
ChessGame==>getNextState  param action number:  454 self.n*self.n:  64
selected action:  1 8 1 7
MOVE:  a8a7  by converting:  1 8 1 7
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a8a7
MOVE FROM:  56 MOVE TO:  48
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  48
position:  a8a7
board:  . n b q k b n r
R p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
R p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  454 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
r P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4 -4  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2  4 -4  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  50
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
r P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [1, 2, 1, 3], [1, 2, 2, 2], [1, 2, 1, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  0 1 0 2  at:  66
count:  7
inserting:  0 1 1 1  at:  73
count:  8
inserting:  0 1 0 0  at:  64
count:  9
inserting:  1 6 0 5  at:  901
count:  10
inserting:  7 6 7 5  at:  4029
count:  11
inserting:  6 6 6 5  at:  3509
count:  12
inserting:  5 6 5 5  at:  2989
count:  13
inserting:  4 6 4 5  at:  2469
count:  14
inserting:  3 6 3 5  at:  1949
count:  15
inserting:  2 6 2 5  at:  1429
count:  16
inserting:  1 6 1 5  at:  909
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  5 6 5 4  at:  2988
count:  20
inserting:  4 6 4 4  at:  2468
count:  21
inserting:  3 6 3 4  at:  1948
count:  22
inserting:  2 6 2 4  at:  1428
count:  23
inserting:  1 6 1 4  at:  908
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  64  :  0.0002455012290738523
POLICY:  66  :  0.0002471468469593674
POLICY:  73  :  0.00024375200155191123
POLICY:  453  :  0.00024368875892832875
POLICY:  454  :  0.00024545908672735095
POLICY:  901  :  0.0002474254579283297
POLICY:  908  :  0.00024246974498964846
POLICY:  909  :  0.00024324354308191687
POLICY:  965  :  0.00024388052406720817
POLICY:  981  :  0.00024447846226394176
POLICY:  1428  :  0.0002442078257445246
POLICY:  1429  :  0.00024194562865886837
POLICY:  1948  :  0.0002406068961136043
POLICY:  1949  :  0.0002432701294310391
POLICY:  2468  :  0.00024312453751917928
POLICY:  2469  :  0.00024241635401267558
POLICY:  2988  :  0.0002461130789015442
POLICY:  2989  :  0.0002441871911287308
POLICY:  3508  :  0.00024167619994841516
POLICY:  3509  :  0.00024406841839663684
POLICY:  3565  :  0.000243340982706286
POLICY:  3581  :  0.00024384600692428648
POLICY:  4028  :  0.00024625417427159846
POLICY:  4029  :  0.00024454103549942374
MCTS.py==>search  returning value of canonical board -v:  [-0.01094309]
MCTS.py==>search  returning value of canonical board -v2:  [0.01094309]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  51
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03997241]
in if
in if  cur_best:  [0.03997241] best_act:  129
uuuuu2:  0.11609119458316215
in if
in if  cur_best:  0.11609119458316215 best_act:  137
uuuuu2:  0.11686452951007982
in if
in if  cur_best:  0.11686452951007982 best_act:  324
uuuuu1:  [0.04762375]
uuuuu2:  0.11623652671237522
uuuuu2:  0.116279021935794
uuuuu2:  0.116945389736549
in if
in if  cur_best:  0.116945389736549 best_act:  981
uuuuu2:  0.1168959736033237
uuuuu2:  0.11574918163907484
uuuuu2:  0.1154929056512498
uuuuu2:  0.11645147956634548
uuuuu2:  0.11632314971253407
uuuuu2:  0.11638030303222653
uuuuu2:  0.11658968148404418
uuuuu1:  [0.04038917]
uuuuu2:  0.11561454482713332
uuuuu1:  [0.03962865]
uuuuu2:  0.11651913983177241
uuuuu2:  0.11702995460324726
in if
in if  cur_best:  0.11702995460324726 best_act:  3581
uuuuu1:  [0.04286797]
uuuuu1:  [0.0442025]
a:  3581
ChessGame==>getNextState  param action number:  3581 self.n*self.n:  64
selected action:  7 8 8 6
MOVE:  g8h6  by converting:  7 8 8 6
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  g8h6
MOVE FROM:  62 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
position:  g8h6
board:  r n b q k b . r
. p p p p . p p
p . . . . . . N
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b . r
. p p p p . p p
p . . . . . . N
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  3581 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . n
. P P P P . P P
R N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  0  4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0 -2
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  0  4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0 -2
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  52
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . n
. P P P P . P P
R N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [8, 3, 7, 5], [8, 3, 6, 4], [8, 3, 6, 2], [8, 3, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  7 2 6 4  at:  3764
count:  7
inserting:  7 2 5 3  at:  3755
count:  8
inserting:  7 2 5 1  at:  3753
count:  9
inserting:  7 2 6 0  at:  3760
count:  10
inserting:  1 6 0 5  at:  901
count:  11
inserting:  7 6 7 5  at:  4029
count:  12
inserting:  6 6 6 5  at:  3509
count:  13
inserting:  5 6 5 5  at:  2989
count:  14
inserting:  4 6 4 5  at:  2469
count:  15
inserting:  3 6 3 5  at:  1949
count:  16
inserting:  2 6 2 5  at:  1429
count:  17
inserting:  1 6 1 5  at:  909
count:  18
inserting:  7 6 7 4  at:  4028
count:  19
inserting:  6 6 6 4  at:  3508
count:  20
inserting:  5 6 5 4  at:  2988
count:  21
inserting:  4 6 4 4  at:  2468
count:  22
inserting:  3 6 3 4  at:  1948
count:  23
inserting:  2 6 2 4  at:  1428
count:  24
inserting:  1 6 1 4  at:  908
count:  25
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.0002442975528538227
POLICY:  454  :  0.000245629926212132
POLICY:  901  :  0.00024722516536712646
POLICY:  908  :  0.00024288085114676505
POLICY:  909  :  0.00024277938064187765
POLICY:  965  :  0.00024423652212135494
POLICY:  981  :  0.0002440894750179723
POLICY:  1428  :  0.0002442658005747944
POLICY:  1429  :  0.00024119376030284911
POLICY:  1948  :  0.0002409688022453338
POLICY:  1949  :  0.0002435590431559831
POLICY:  2468  :  0.00024308255524374545
POLICY:  2469  :  0.0002424859703751281
POLICY:  2988  :  0.00024588353699073195
POLICY:  2989  :  0.0002445422869641334
POLICY:  3508  :  0.00024182630295399576
POLICY:  3509  :  0.00024410526384599507
POLICY:  3565  :  0.00024318542273249477
POLICY:  3581  :  0.00024371097970288247
POLICY:  3753  :  0.00024474418023601174
POLICY:  3755  :  0.00024555152049288154
POLICY:  3760  :  0.0002446098660584539
POLICY:  3764  :  0.00024462517467327416
POLICY:  4028  :  0.0002466202713549137
POLICY:  4029  :  0.0002448864106554538
MCTS.py==>search  returning value of canonical board -v:  [-0.00932171]
MCTS.py==>search  returning value of canonical board -v2:  [0.00932171]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  53
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04463302]
in if
in if  cur_best:  [0.04463302] best_act:  129
uuuuu2:  0.12539282157698087
in if
in if  cur_best:  0.12539282157698087 best_act:  137
uuuuu2:  0.12622811876604348
in if
in if  cur_best:  0.12622811876604348 best_act:  324
uuuuu1:  [0.05231633]
uuuuu2:  0.12554979821774376
uuuuu2:  0.1255956983050601
uuuuu2:  0.12631545779280368
in if
in if  cur_best:  0.12631545779280368 best_act:  981
uuuuu2:  0.12626208226851182
uuuuu2:  0.12502340537595938
uuuuu2:  0.12474659567190564
uuuuu2:  0.12578197383590442
uuuuu2:  0.12564336175150173
uuuuu2:  0.1257050943923317
uuuuu2:  0.12593124896800909
uuuuu1:  [0.04510229]
uuuuu2:  0.12487798099818383
uuuuu1:  [0.0443254]
uuuuu2:  0.12585505527520732
uuuuu1:  [0.05388169]
uuuuu1:  [0.04760761]
uuuuu1:  [0.04890431]
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  2 8 3 6
MOVE:  b8c6  by converting:  2 8 3 6
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  b8c6
MOVE FROM:  57 MOVE TO:  42
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  42
position:  b8c6
board:  r . b q k b n r
. p p p p . p p
p . N . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r . b q k b n r
. p p p p . p p
p . N . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  981 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . n . . . . .
. P P P P . P P
R . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  0  3  5  6  3  2  4  0  1  1  1  1  0  1  1  1  0 -2  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  0  3  5  6  3  2  4  0  1  1  1  1  0  1  1  1  0 -2  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  54
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . n . . . . .
. P P P P . P P
R . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [3, 3, 4, 5], [3, 3, 2, 5], [3, 3, 5, 4], [3, 3, 1, 4], [3, 3, 5, 2], [3, 3, 1, 2], [3, 3, 4, 1], [3, 3, 2, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  2 2 3 4  at:  1180
count:  7
inserting:  2 2 1 4  at:  1164
count:  8
inserting:  2 2 4 3  at:  1187
count:  9
inserting:  2 2 0 3  at:  1155
count:  10
inserting:  2 2 4 1  at:  1185
count:  11
inserting:  2 2 0 1  at:  1153
count:  12
inserting:  2 2 3 0  at:  1176
count:  13
inserting:  2 2 1 0  at:  1160
count:  14
inserting:  1 6 0 5  at:  901
count:  15
inserting:  7 6 7 5  at:  4029
count:  16
inserting:  6 6 6 5  at:  3509
count:  17
inserting:  5 6 5 5  at:  2989
count:  18
inserting:  4 6 4 5  at:  2469
count:  19
inserting:  3 6 3 5  at:  1949
count:  20
inserting:  2 6 2 5  at:  1429
count:  21
inserting:  1 6 1 5  at:  909
count:  22
inserting:  7 6 7 4  at:  4028
count:  23
inserting:  6 6 6 4  at:  3508
count:  24
inserting:  5 6 5 4  at:  2988
count:  25
inserting:  4 6 4 4  at:  2468
count:  26
inserting:  3 6 3 4  at:  1948
count:  27
inserting:  2 6 2 4  at:  1428
count:  28
inserting:  1 6 1 4  at:  908
count:  29
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024382588162552565
POLICY:  454  :  0.0002451537875458598
POLICY:  901  :  0.00024709670105949044
POLICY:  908  :  0.0002425856946501881
POLICY:  909  :  0.0002434162888675928
POLICY:  965  :  0.0002446265716571361
POLICY:  981  :  0.0002449072489980608
POLICY:  1153  :  0.00024197751190513372
POLICY:  1155  :  0.0002431597822578624
POLICY:  1160  :  0.00024312564346473664
POLICY:  1164  :  0.00024621826014481485
POLICY:  1176  :  0.0002449916210025549
POLICY:  1180  :  0.00024494246463291347
POLICY:  1185  :  0.0002432674664305523
POLICY:  1187  :  0.00024298828793689609
POLICY:  1428  :  0.0002437483926769346
POLICY:  1429  :  0.00024196312006097287
POLICY:  1948  :  0.0002404399128863588
POLICY:  1949  :  0.0002437932853354141
POLICY:  2468  :  0.00024320989905390888
POLICY:  2469  :  0.00024315863265655935
POLICY:  2988  :  0.00024663290241733193
POLICY:  2989  :  0.0002438616065774113
POLICY:  3508  :  0.00024149527598638088
POLICY:  3509  :  0.00024468873743899167
POLICY:  3565  :  0.00024338233924936503
POLICY:  3581  :  0.00024397874949499965
POLICY:  4028  :  0.00024601194309070706
POLICY:  4029  :  0.00024468108313158154
MCTS.py==>search  returning value of canonical board -v:  [-0.02333796]
MCTS.py==>search  returning value of canonical board -v2:  [0.02333796]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  55
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04897102]
in if
in if  cur_best:  [0.04897102] best_act:  129
uuuuu2:  0.1340505648862678
in if
in if  cur_best:  0.1340505648862678 best_act:  137
uuuuu2:  0.1349435351427271
in if
in if  cur_best:  0.1349435351427271 best_act:  324
uuuuu1:  [0.05668407]
uuuuu2:  0.13421837997411395
uuuuu2:  0.13426744923147416
uuuuu1:  [0.04418049]
uuuuu2:  0.1349798436541247
in if
in if  cur_best:  0.1349798436541247 best_act:  1428
uuuuu2:  0.13365564235559751
uuuuu2:  0.13335972033448226
uuuuu2:  0.13446658615031956
uuuuu2:  0.1343184035990334
uuuuu2:  0.13438439856805245
uuuuu2:  0.13462616797909127
uuuuu1:  [0.04948916]
uuuuu2:  0.13350017715636298
uuuuu1:  [0.04869704]
uuuuu2:  0.13454471349523492
uuuuu1:  [0.05824557]
uuuuu1:  [0.05201916]
uuuuu1:  [0.05328064]
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  3 7 3 5
MOVE:  c7c5  by converting:  3 7 3 5
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  c7c5
MOVE FROM:  50 MOVE TO:  34
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  34
piece moved: PAWN
position:  c7c5
board:  r n b q k b n r
. p . p p . p p
p . . . . . . .
. . P . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p . p p . p p
p . . . . . . .
. . P . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  1428 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . p . . P . .
P . . . . . . .
. P . P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  0  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0 -1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  0  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0 -1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  56
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . p . . P . .
P . . . . . . .
. P . P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [3, 4, 3, 3], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  2 3 2 2  at:  1234
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  5 6 5 4  at:  2988
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024405338626820594
POLICY:  454  :  0.0002451915934216231
POLICY:  901  :  0.000247002812102437
POLICY:  908  :  0.0002424566773697734
POLICY:  909  :  0.00024302559904754162
POLICY:  965  :  0.0002443645498715341
POLICY:  981  :  0.0002442692348267883
POLICY:  1234  :  0.00024709803983569145
POLICY:  1428  :  0.00024408048193436116
POLICY:  1429  :  0.0002411243476672098
POLICY:  1948  :  0.00024095148546621203
POLICY:  1949  :  0.00024295483308378607
POLICY:  2468  :  0.0002428273728583008
POLICY:  2469  :  0.0002430531312711537
POLICY:  2988  :  0.00024607431259937584
POLICY:  2989  :  0.00024448460317216814
POLICY:  3508  :  0.00024146160285454243
POLICY:  3509  :  0.00024398925597779453
POLICY:  3565  :  0.00024346457212232053
POLICY:  3581  :  0.0002441452816128731
POLICY:  4028  :  0.0002465021680109203
POLICY:  4029  :  0.0002447977603878826
MCTS.py==>search  returning value of canonical board -v:  [-0.01950645]
MCTS.py==>search  returning value of canonical board -v2:  [0.01950645]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  57
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05304535]
in if
in if  cur_best:  [0.05304535] best_act:  129
uuuuu2:  0.14218209517945088
in if
in if  cur_best:  0.14218209517945088 best_act:  137
uuuuu2:  0.1431292331650613
in if
in if  cur_best:  0.1431292331650613 best_act:  324
uuuuu1:  [0.06078635]
uuuuu2:  0.142360089959353
uuuuu2:  0.1424121357662938
uuuuu1:  [0.04827617]
uuuuu1:  [0.05207743]
uuuuu2:  0.1417632165802304
uuuuu2:  0.14144934387848088
uuuuu2:  0.14262335236484408
uuuuu2:  0.14246618103454212
uuuuu2:  0.14253617926971845
uuuuu2:  0.14279261445476202
uuuuu1:  [0.0536094]
uuuuu2:  0.14159832083530452
uuuuu1:  [0.05280297]
uuuuu2:  0.14270621892792268
uuuuu1:  [0.06234421]
uuuuu1:  [0.05616259]
uuuuu1:  [0.057391]
a:  324
ChessGame==>getNextState  param action number:  324 self.n*self.n:  64
selected action:  1 6 1 5
MOVE:  a6a5  by converting:  1 6 1 5
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a6a5
MOVE FROM:  40 MOVE TO:  32
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  32
piece moved: PAWN
position:  a6a5
board:  r n b q k b n r
. p p p p . p p
. . . . . . . .
P . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p . p p
. . . . . . . .
P . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  324 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
p . . . . P . .
. . . . . . . .
. P P P P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
 -1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
 -1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  58
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
p . . . . P . .
. . . . . . . .
. P P P P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 4, 1, 3], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 3 0 2  at:  194
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  5 6 5 4  at:  2988
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  194  :  0.0002473052009008825
POLICY:  453  :  0.0002441030810587108
POLICY:  454  :  0.00024524814216420054
POLICY:  901  :  0.00024716631742194295
POLICY:  908  :  0.0002425436396151781
POLICY:  909  :  0.0002429150335956365
POLICY:  965  :  0.0002442615805193782
POLICY:  981  :  0.00024410647165495902
POLICY:  1428  :  0.00024414542713202536
POLICY:  1429  :  0.00024145857605617493
POLICY:  1948  :  0.00024079465947579592
POLICY:  1949  :  0.000243222268181853
POLICY:  2468  :  0.00024301728990394622
POLICY:  2469  :  0.00024270387075375766
POLICY:  2988  :  0.0002463078999426216
POLICY:  2989  :  0.00024408369790762663
POLICY:  3508  :  0.00024097484129015356
POLICY:  3509  :  0.00024420450790785253
POLICY:  3565  :  0.0002433696063235402
POLICY:  3581  :  0.00024412819766439497
POLICY:  4028  :  0.0002466564765200019
POLICY:  4029  :  0.0002447099541313946
MCTS.py==>search  returning value of canonical board -v:  [-0.01802662]
MCTS.py==>search  returning value of canonical board -v2:  [0.01802662]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  324 COUNT:  1
CNT NUM:  454 COUNT:  1
CNT NUM:  981 COUNT:  1
CNT NUM:  1428 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  3581 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  59
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.04345625]
in if
in if  cur_best:  [0.04345625] best_act:  66
uuuuu2:  0.13449437708003925
in if
in if  cur_best:  0.13449437708003925 best_act:  67
uuuuu1:  [0.04422121]
uuuuu2:  0.1344497225800219
uuuuu1:  [0.04228605]
uuuuu1:  [0.04619379]
uuuuu1:  [0.04501199]
uuuuu2:  0.1361147312002271
in if
in if  cur_best:  0.1361147312002271 best_act:  587
uuuuu2:  0.13648635325218333
in if
in if  cur_best:  0.13648635325218333 best_act:  1106
uuuuu1:  [0.04795544]
uuuuu2:  0.13540765959969786
uuuuu1:  [0.04841343]
uuuuu1:  [0.04489651]
uuuuu2:  0.13609309926250246
uuuuu2:  0.1361218632338303
uuuuu2:  0.1361057937943777
uuuuu2:  0.13550934597161857
uuuuu2:  0.13569700709753363
uuuuu2:  0.1355035232395092
uuuuu1:  [0.04338963]
uuuuu2:  0.13609591304086815
uuuuu2:  0.136066360235721
a:  1106
ChessGame==>getNextState  param action number:  1106 self.n*self.n:  64
selected action:  3 2 3 3
MOVE:  c2c3  by converting:  3 2 3 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  c2c3
MOVE FROM:  10 MOVE TO:  18
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  18
piece moved: PAWN
position:  c2c3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . P . . . . .
P P . P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . P . . . . .
P P . P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  1106 next_s:  r n b q k b n r
p p . p p . p p
. . p . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0 -1  0  0  0  0  0
 -1 -1  0 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0 -1  0  0  0  0  0
 -1 -1  0 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  60
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p . p p . p p
. . p . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [4, 8, 3, 7], [4, 8, 2, 6], [4, 8, 1, 5], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [2, 7, 2, 6], [1, 7, 1, 6], [3, 6, 3, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  3 7 2 6  at:  2006
count:  4
inserting:  3 7 1 5  at:  1997
count:  5
inserting:  3 7 0 4  at:  1988
count:  6
inserting:  1 7 0 5  at:  965
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  0 6 0 5  at:  389
count:  14
inserting:  2 5 2 4  at:  1364
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  1 6 1 4  at:  908
count:  22
inserting:  0 6 0 4  at:  388
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024286663392558694
POLICY:  137  :  0.00024199855397455394
POLICY:  388  :  0.00024413612845819443
POLICY:  389  :  0.0002477563975844532
POLICY:  908  :  0.00024245391250588
POLICY:  909  :  0.00024258600024040788
POLICY:  965  :  0.00024414481595158577
POLICY:  1364  :  0.0002403677353868261
POLICY:  1948  :  0.0002408399450359866
POLICY:  1949  :  0.0002427759172860533
POLICY:  1988  :  0.0002447376900818199
POLICY:  1997  :  0.0002420308010187
POLICY:  2006  :  0.00024213147116824985
POLICY:  2468  :  0.00024272773589473218
POLICY:  2469  :  0.00024257859331555665
POLICY:  2542  :  0.00024328123254235834
POLICY:  2859  :  0.0002455017529428005
POLICY:  3508  :  0.00024138716980814934
POLICY:  3509  :  0.00024450235650874674
POLICY:  3565  :  0.0002430123568046838
POLICY:  3581  :  0.00024399075482506305
POLICY:  4028  :  0.000246829935349524
POLICY:  4029  :  0.00024478475097566843
MCTS.py==>search  returning value of canonical board -v:  [-0.02430652]
MCTS.py==>search  returning value of canonical board -v2:  [0.02430652]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  61
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.04719375]
in if
in if  cur_best:  [0.04719375] best_act:  66
uuuuu2:  0.1417695213528234
in if
in if  cur_best:  0.1417695213528234 best_act:  67
uuuuu1:  [0.04795269]
uuuuu2:  0.14172245137687983
uuuuu1:  [0.04599252]
uuuuu1:  [0.04989032]
uuuuu1:  [0.04874512]
uuuuu2:  0.14347752456476737
in if
in if  cur_best:  0.14347752456476737 best_act:  587
uuuuu1:  [0.0476281]
uuuuu1:  [0.0516589]
uuuuu2:  0.1427322056559363
uuuuu1:  [0.05212564]
uuuuu1:  [0.04859363]
uuuuu2:  0.14345472250029642
uuuuu2:  0.14348504238827903
in if
in if  cur_best:  0.14348504238827903 best_act:  2147
uuuuu2:  0.1434681037118149
uuuuu2:  0.1428393925033591
uuuuu2:  0.1430372046987469
uuuuu2:  0.14283325480480227
uuuuu1:  [0.04709698]
uuuuu2:  0.1434576884831186
uuuuu2:  0.1434265370912812
a:  2147
ChessGame==>getNextState  param action number:  2147 self.n*self.n:  64
selected action:  5 2 5 4
MOVE:  e2e4  by converting:  5 2 5 4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  e2e4
MOVE FROM:  12 MOVE TO:  28
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  28
piece moved: PAWN
position:  e2e4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . P P . .
. . . . . . . .
P P P P . . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . P P . .
. . . . . . . .
P P P P . . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2147 next_s:  r n b q k b n r
p p p p . . p p
. . . . . . . .
. . . . p p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0 -1 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1  0  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0 -1 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1  0  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  62
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p . . p p
. . . . . . . .
. . . . p p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 5, 7], [7, 8, 8, 6], [7, 8, 6, 6], [6, 8, 5, 7], [6, 8, 4, 6], [6, 8, 3, 5], [6, 8, 2, 4], [5, 8, 6, 7], [5, 8, 5, 7], [4, 8, 5, 7], [4, 8, 6, 6], [4, 8, 7, 5], [4, 8, 8, 4], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [5, 5, 5, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 4 6  at:  3558
count:  1
inserting:  6 7 7 5  at:  3581
count:  2
inserting:  6 7 5 5  at:  3565
count:  3
inserting:  5 7 4 6  at:  3046
count:  4
inserting:  5 7 3 5  at:  3037
count:  5
inserting:  5 7 2 4  at:  3028
count:  6
inserting:  5 7 1 3  at:  3019
count:  7
inserting:  4 7 5 6  at:  2542
count:  8
inserting:  4 7 4 6  at:  2534
count:  9
inserting:  3 7 4 6  at:  2022
count:  10
inserting:  3 7 5 5  at:  2029
count:  11
inserting:  3 7 6 4  at:  2036
count:  12
inserting:  3 7 7 3  at:  2043
count:  13
inserting:  1 7 2 5  at:  981
count:  14
inserting:  1 7 0 5  at:  965
count:  15
inserting:  0 2 1 1  at:  137
count:  16
inserting:  7 6 7 5  at:  4029
count:  17
inserting:  6 6 6 5  at:  3509
count:  18
inserting:  3 6 3 5  at:  1949
count:  19
inserting:  2 6 2 5  at:  1429
count:  20
inserting:  1 6 1 5  at:  909
count:  21
inserting:  0 6 0 5  at:  389
count:  22
inserting:  5 4 5 3  at:  2859
count:  23
inserting:  4 4 4 3  at:  2339
count:  24
inserting:  0 2 0 1  at:  129
count:  25
inserting:  7 6 7 4  at:  4028
count:  26
inserting:  6 6 6 4  at:  3508
count:  27
inserting:  3 6 3 4  at:  1948
count:  28
inserting:  2 6 2 4  at:  1428
count:  29
inserting:  1 6 1 4  at:  908
count:  30
inserting:  0 6 0 4  at:  388
count:  31
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002425969869364053
POLICY:  137  :  0.0002421211829641834
POLICY:  388  :  0.00024385321012232453
POLICY:  389  :  0.0002476465015206486
POLICY:  908  :  0.00024240817583631724
POLICY:  909  :  0.00024248250701930374
POLICY:  965  :  0.00024411176855210215
POLICY:  981  :  0.00024396670050919056
POLICY:  1428  :  0.00024391047190874815
POLICY:  1429  :  0.00024162458430510014
POLICY:  1948  :  0.00024094435502775013
POLICY:  1949  :  0.00024284170649480075
POLICY:  2022  :  0.00024490791838616133
POLICY:  2029  :  0.00024271008442156017
POLICY:  2036  :  0.0002450224128551781
POLICY:  2043  :  0.0002477073867339641
POLICY:  2339  :  0.0002441295509925112
POLICY:  2534  :  0.00024649518309161067
POLICY:  2542  :  0.00024316365306731313
POLICY:  2859  :  0.00024553676485083997
POLICY:  3019  :  0.0002438731462461874
POLICY:  3028  :  0.00024247866531368345
POLICY:  3037  :  0.00024333721376024187
POLICY:  3046  :  0.00024478347040712833
POLICY:  3508  :  0.00024124370247591287
POLICY:  3509  :  0.00024468108313158154
POLICY:  3558  :  0.00024117155408021063
POLICY:  3565  :  0.00024290844157803804
POLICY:  3581  :  0.000244266091613099
POLICY:  4028  :  0.0002466405858285725
POLICY:  4029  :  0.0002448212180752307
MCTS.py==>search  returning value of canonical board -v:  [-0.02078499]
MCTS.py==>search  returning value of canonical board -v2:  [0.02078499]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  63
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.05074861]
in if
in if  cur_best:  [0.05074861] best_act:  66
uuuuu2:  0.1486891283956884
in if
in if  cur_best:  0.1486891283956884 best_act:  67
uuuuu1:  [0.0515018]
uuuuu2:  0.14863976098843562
uuuuu1:  [0.04951786]
uuuuu1:  [0.05340619]
uuuuu1:  [0.05229582]
uuuuu2:  0.1504804972770783
in if
in if  cur_best:  0.1504804972770783 best_act:  587
uuuuu1:  [0.05113915]
uuuuu1:  [0.05518137]
uuuuu2:  0.14969880021078774
uuuuu1:  [0.05565645]
uuuuu1:  [0.05211007]
uuuuu2:  0.15045658227010458
uuuuu1:  [0.0544592]
uuuuu2:  0.15047061660314442
uuuuu2:  0.14981121872477224
uuuuu2:  0.1500186859055709
uuuuu2:  0.14980478145221843
uuuuu1:  [0.05062314]
uuuuu2:  0.150459693019132
uuuuu2:  0.15042702116374015
a:  587
ChessGame==>getNextState  param action number:  587 self.n*self.n:  64
selected action:  2 2 2 4
MOVE:  b2b4  by converting:  2 2 2 4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  b2b4
MOVE FROM:  9 MOVE TO:  25
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  25
piece moved: PAWN
position:  b2b4
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. P . . . P . .
. . . . . . . .
P . P P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. P . . . P . .
. . . . . . . .
P . P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  587 next_s:  r n b q k b n r
p . p p p . p p
. . . . . . . .
. p . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0 -1  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1  0 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0 -1  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1  0 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  64
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p . p p p . p p
. . . . . . . .
. p . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [3, 8, 2, 7], [3, 8, 1, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [1, 7, 1, 6], [6, 5, 6, 4], [2, 5, 2, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  2 7 1 6  at:  1486
count:  4
inserting:  2 7 0 5  at:  1477
count:  5
inserting:  1 7 2 5  at:  981
count:  6
inserting:  1 7 0 5  at:  965
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  0 6 0 5  at:  389
count:  14
inserting:  5 4 5 3  at:  2859
count:  15
inserting:  1 4 1 3  at:  779
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  0 6 0 4  at:  388
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024270427820738405
POLICY:  137  :  0.00024196352751459926
POLICY:  388  :  0.0002442433906253427
POLICY:  389  :  0.00024775968631729484
POLICY:  779  :  0.0002447970909997821
POLICY:  965  :  0.00024413852952420712
POLICY:  981  :  0.0002437021175865084
POLICY:  1428  :  0.00024376512737944722
POLICY:  1429  :  0.00024160333850886673
POLICY:  1477  :  0.0002444832643959671
POLICY:  1486  :  0.00024371706240344793
POLICY:  1948  :  0.00024069567734841257
POLICY:  1949  :  0.00024294244940392673
POLICY:  2468  :  0.0002425491256872192
POLICY:  2469  :  0.00024281129299197346
POLICY:  2542  :  0.0002432256005704403
POLICY:  2859  :  0.00024524316540919244
POLICY:  3508  :  0.00024118291912600398
POLICY:  3509  :  0.0002445649588480592
POLICY:  3565  :  0.000243067552219145
POLICY:  3581  :  0.00024403886345680803
POLICY:  4028  :  0.0002468308957759291
POLICY:  4029  :  0.00024467924959026277
MCTS.py==>search  returning value of canonical board -v:  [-0.02268606]
MCTS.py==>search  returning value of canonical board -v2:  [0.02268606]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  65
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.05414522]
in if
in if  cur_best:  [0.05414522] best_act:  66
uuuuu2:  0.15530072962330335
in if
in if  cur_best:  0.15530072962330335 best_act:  67
uuuuu1:  [0.05489294]
uuuuu2:  0.1552491670480923
uuuuu1:  [0.05288628]
uuuuu1:  [0.05676557]
uuuuu1:  [0.05568847]
uuuuu1:  [0.05589982]
uuuuu1:  [0.05449391]
uuuuu1:  [0.05854705]
uuuuu2:  0.15635529744044552
in if
in if  cur_best:  0.15635529744044552 best_act:  1626
uuuuu1:  [0.05903009]
uuuuu1:  [0.05546999]
uuuuu2:  0.1571467749881125
in if
in if  cur_best:  0.1571467749881125 best_act:  2146
uuuuu1:  [0.05780501]
uuuuu2:  0.15716143337090333
in if
in if  cur_best:  0.15716143337090333 best_act:  2796
uuuuu2:  0.1564727147488482
uuuuu2:  0.1566894071519752
uuuuu2:  0.15646599123694668
uuuuu1:  [0.05399235]
uuuuu2:  0.15715002405950623
uuuuu2:  0.1571158994194922
a:  2796
ChessGame==>getNextState  param action number:  2796 self.n*self.n:  64
selected action:  6 4 6 5
MOVE:  f4f5  by converting:  6 4 6 5
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  f4f5
MOVE FROM:  29 MOVE TO:  37
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  37
piece moved: PAWN
position:  f4f5
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . P . .
. . . . . . . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . P . .
. . . . . . . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2796 next_s:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . . . .
. . . . . p . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  66
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . . . .
. . . . . p . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 4, 6, 3], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 6 0 5  at:  389
count:  13
inserting:  5 3 5 2  at:  2794
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
inserting:  0 6 0 4  at:  388
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002425225538900122
POLICY:  137  :  0.00024210161063820124
POLICY:  388  :  0.00024397418019361794
POLICY:  389  :  0.00024775625206530094
POLICY:  908  :  0.0002423129917588085
POLICY:  909  :  0.00024241095525212586
POLICY:  965  :  0.00024443151778541505
POLICY:  981  :  0.0002438457013340667
POLICY:  1428  :  0.00024383583513554186
POLICY:  1429  :  0.0002415891212876886
POLICY:  1948  :  0.00024083473545033485
POLICY:  1949  :  0.00024262999068014324
POLICY:  2468  :  0.00024260758073069155
POLICY:  2469  :  0.00024297242634929717
POLICY:  2542  :  0.000243192000198178
POLICY:  2794  :  0.00024372563348151743
POLICY:  3508  :  0.00024125989875756204
POLICY:  3509  :  0.00024464286980219185
POLICY:  3565  :  0.00024266396940220147
POLICY:  3581  :  0.00024398132518399507
POLICY:  4028  :  0.0002466067089699209
POLICY:  4029  :  0.00024469566415064037
MCTS.py==>search  returning value of canonical board -v:  [-0.0275714]
MCTS.py==>search  returning value of canonical board -v2:  [0.0275714]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  67
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.05740302]
in if
in if  cur_best:  [0.05740302] best_act:  66
uuuuu2:  0.16164212427455674
in if
in if  cur_best:  0.16164212427455674 best_act:  67
uuuuu1:  [0.05814549]
uuuuu2:  0.16158845624472584
uuuuu1:  [0.05611704]
uuuuu1:  [0.05998765]
uuuuu1:  [0.05894247]
uuuuu1:  [0.05910872]
uuuuu1:  [0.05771157]
uuuuu1:  [0.06177518]
uuuuu2:  0.16273975325909476
in if
in if  cur_best:  0.16273975325909476 best_act:  1626
uuuuu1:  [0.06226585]
uuuuu1:  [0.0586926]
uuuuu2:  0.1635635492092543
in if
in if  cur_best:  0.1635635492092543 best_act:  2146
uuuuu1:  [0.06101407]
uuuuu1:  [0.05421801]
uuuuu2:  0.16286196506842007
uuuuu2:  0.16308750567238614
uuuuu2:  0.1628549670153589
uuuuu1:  [0.05722386]
uuuuu2:  0.16356693094997943
in if
in if  cur_best:  0.16356693094997943 best_act:  3706
uuuuu2:  0.1635314128985488
a:  3706
ChessGame==>getNextState  param action number:  3706 self.n*self.n:  64
selected action:  8 2 8 3
MOVE:  h2h3  by converting:  8 2 8 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  h2h3
MOVE FROM:  15 MOVE TO:  23
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  23
piece moved: PAWN
position:  h2h3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  3706 next_s:  r n b q k b n r
p p p p p . p .
. . . . . . . p
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0 -1
 -1 -1 -1 -1 -1  0 -1  0 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0 -1
 -1 -1 -1 -1 -1  0 -1  0 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  68
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p p . p .
. . . . . . . p
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[8, 8, 8, 7], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [8, 6, 8, 5], [6, 5, 6, 4], [1, 3, 1, 2], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  7 7 7 6  at:  4094
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 6 0 5  at:  389
count:  12
inserting:  7 5 7 4  at:  3964
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
inserting:  0 6 0 4  at:  388
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 1 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 1 0]
POLICY:  129  :  0.00024271239817608148
POLICY:  137  :  0.00024217744066845626
POLICY:  388  :  0.00024408350873272866
POLICY:  389  :  0.00024780072271823883
POLICY:  908  :  0.00024257447512354702
POLICY:  909  :  0.00024255203607026488
POLICY:  965  :  0.00024408633180428296
POLICY:  981  :  0.00024392895284108818
POLICY:  1428  :  0.00024379366368521005
POLICY:  1429  :  0.00024150998797267675
POLICY:  1948  :  0.0002407766878604889
POLICY:  1949  :  0.00024304083490278572
POLICY:  2468  :  0.00024272386508528143
POLICY:  2469  :  0.00024276881595142186
POLICY:  2542  :  0.00024309760192409158
POLICY:  2859  :  0.00024555312120355666
POLICY:  3508  :  0.0002412258618278429
POLICY:  3509  :  0.0002444635611027479
POLICY:  3565  :  0.00024288910208269954
POLICY:  3964  :  0.00024260900681838393
POLICY:  4094  :  0.00024621959892101586
MCTS.py==>search  returning value of canonical board -v:  [-0.02366494]
MCTS.py==>search  returning value of canonical board -v2:  [0.02366494]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  514 COUNT:  1
CNT NUM:  530 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  587 COUNT:  1
CNT NUM:  1106 COUNT:  1
CNT NUM:  1107 COUNT:  1
CNT NUM:  1627 COUNT:  1
CNT NUM:  2089 COUNT:  1
CNT NUM:  2147 COUNT:  1
CNT NUM:  2796 COUNT:  1
CNT NUM:  3187 COUNT:  1
CNT NUM:  3706 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  69
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05689896]
in if
in if  cur_best:  [0.05689896] best_act:  129
uuuuu2:  0.1498730877539706
in if
in if  cur_best:  0.1498730877539706 best_act:  137
uuuuu1:  [0.05740911]
uuuuu1:  [0.06466638]
uuuuu2:  0.15006071072600763
in if
in if  cur_best:  0.15006071072600763 best_act:  908
uuuuu2:  0.15011557182353905
in if
in if  cur_best:  0.15011557182353905 best_act:  909
uuuuu1:  [0.05214997]
uuuuu1:  [0.05594958]
uuuuu2:  0.14943155094175808
uuuuu2:  0.14910070006413167
uuuuu2:  0.15033821366722314
in if
in if  cur_best:  0.15033821366722314 best_act:  1949
uuuuu2:  0.15017254053834556
uuuuu2:  0.1502463251567953
uuuuu2:  0.1505166315757768
in if
in if  cur_best:  0.1505166315757768 best_act:  2542
uuuuu1:  [0.05750642]
uuuuu2:  0.1492577355649461
uuuuu1:  [0.05668645]
uuuuu2:  0.1504255626942893
uuuuu1:  [0.06622081]
uuuuu1:  [0.06008153]
uuuuu1:  [0.06127866]
a:  2542
ChessGame==>getNextState  param action number:  2542 self.n*self.n:  64
selected action:  5 8 6 7
MOVE:  e8f7  by converting:  5 8 6 7
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  e8f7
MOVE FROM:  60 MOVE TO:  53
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  53
position:  e8f7
board:  r n b q . b n r
. p p p p K p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q . b n r
. p p p p K p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2542 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P k P P
R N B Q . B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  0  3  2  4  0  1  1  1  1 -6  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  0  3  2  4  0  1  1  1  1 -6  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  70
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P k P P
R N B Q . B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [6, 2, 7, 3], [6, 2, 6, 3], [6, 2, 5, 3], [6, 2, 7, 2], [6, 2, 5, 2], [6, 2, 7, 1], [6, 2, 6, 1], [6, 2, 5, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  5 1 6 2  at:  2674
count:  7
inserting:  5 1 5 2  at:  2666
count:  8
inserting:  5 1 4 2  at:  2658
count:  9
inserting:  5 1 6 1  at:  2673
count:  10
inserting:  5 1 4 1  at:  2657
count:  11
inserting:  5 1 6 0  at:  2672
count:  12
inserting:  5 1 5 0  at:  2664
count:  13
inserting:  5 1 4 0  at:  2656
count:  14
inserting:  1 6 0 5  at:  901
count:  15
inserting:  7 6 7 5  at:  4029
count:  16
inserting:  6 6 6 5  at:  3509
count:  17
inserting:  5 6 5 5  at:  2989
count:  18
inserting:  4 6 4 5  at:  2469
count:  19
inserting:  3 6 3 5  at:  1949
count:  20
inserting:  2 6 2 5  at:  1429
count:  21
inserting:  1 6 1 5  at:  909
count:  22
inserting:  7 6 7 4  at:  4028
count:  23
inserting:  6 6 6 4  at:  3508
count:  24
inserting:  5 6 5 4  at:  2988
count:  25
inserting:  4 6 4 4  at:  2468
count:  26
inserting:  3 6 3 4  at:  1948
count:  27
inserting:  2 6 2 4  at:  1428
count:  28
inserting:  1 6 1 4  at:  908
count:  29
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024413916980847716
POLICY:  454  :  0.00024692228180356324
POLICY:  901  :  0.00024647440295666456
POLICY:  908  :  0.00024195732839871198
POLICY:  909  :  0.0002447951410431415
POLICY:  965  :  0.00024387388839386404
POLICY:  981  :  0.0002450766914989799
POLICY:  1428  :  0.00024393627245444804
POLICY:  1429  :  0.00023917070939205587
POLICY:  1948  :  0.00024078655405901372
POLICY:  1949  :  0.000245359173277393
POLICY:  2468  :  0.00024367356672883034
POLICY:  2469  :  0.00024215556913986802
POLICY:  2656  :  0.00024093817046377808
POLICY:  2657  :  0.00023978664830792695
POLICY:  2658  :  0.0002449544263072312
POLICY:  2664  :  0.00024439868866465986
POLICY:  2666  :  0.0002451556210871786
POLICY:  2672  :  0.00024264947569463402
POLICY:  2673  :  0.00024560256861150265
POLICY:  2674  :  0.0002417724026599899
POLICY:  2988  :  0.00024635824956931174
POLICY:  2989  :  0.00024343513359781355
POLICY:  3508  :  0.00024238567857537419
POLICY:  3509  :  0.00024307373678311706
POLICY:  3565  :  0.0002447536098770797
POLICY:  3581  :  0.00024424499133601785
POLICY:  4028  :  0.00024595719878561795
POLICY:  4029  :  0.00024361944815609604
MCTS.py==>search  returning value of canonical board -v:  [-0.03413849]
MCTS.py==>search  returning value of canonical board -v2:  [0.03413849]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  71
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06056423]
in if
in if  cur_best:  [0.06056423] best_act:  129
uuuuu2:  0.15718822053894593
in if
in if  cur_best:  0.15718822053894593 best_act:  137
uuuuu1:  [0.06109105]
uuuuu1:  [0.06835679]
uuuuu2:  0.15738500117213836
in if
in if  cur_best:  0.15738500117213836 best_act:  908
uuuuu2:  0.15744253997664964
in if
in if  cur_best:  0.15744253997664964 best_act:  909
uuuuu1:  [0.05583444]
uuuuu1:  [0.0596325]
uuuuu2:  0.1567251328235046
uuuuu2:  0.15637813349562515
uuuuu2:  0.15767604871227844
in if
in if  cur_best:  0.15767604871227844 best_act:  1949
uuuuu2:  0.15750228926880758
uuuuu2:  0.15757967522949656
uuuuu1:  [0.0447931]
uuuuu1:  [0.06121299]
uuuuu2:  0.15654283371835617
uuuuu1:  [0.06038014]
uuuuu2:  0.15776766114474447
in if
in if  cur_best:  0.15776766114474447 best_act:  3565
uuuuu1:  [0.06990795]
uuuuu1:  [0.06380896]
uuuuu1:  [0.06497633]
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  7 8 6 6
MOVE:  g8f6  by converting:  7 8 6 6
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  g8f6
MOVE FROM:  62 MOVE TO:  45
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  45
position:  g8f6
board:  r n b q k b . r
. p p p p . p p
p . . . . N . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b . r
. p p p p . p p
p . . . . N . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  3565 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . n . .
. P P P P . P P
R N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  0  4  0  1  1  1  1  0  1  1  1  0  0  0  0 -2  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  0  4  0  1  1  1  1  0  1  1  1  0  0  0  0 -2  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  72
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . n . .
. P P P P . P P
R N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [6, 3, 7, 5], [6, 3, 5, 5], [6, 3, 8, 4], [6, 3, 4, 4], [6, 3, 8, 2], [6, 3, 4, 2], [6, 3, 7, 1], [6, 3, 5, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  5 2 6 4  at:  2740
count:  7
inserting:  5 2 4 4  at:  2724
count:  8
inserting:  5 2 7 3  at:  2747
count:  9
inserting:  5 2 3 3  at:  2715
count:  10
inserting:  5 2 7 1  at:  2745
count:  11
inserting:  5 2 3 1  at:  2713
count:  12
inserting:  5 2 6 0  at:  2736
count:  13
inserting:  5 2 4 0  at:  2720
count:  14
inserting:  1 6 0 5  at:  901
count:  15
inserting:  7 6 7 5  at:  4029
count:  16
inserting:  6 6 6 5  at:  3509
count:  17
inserting:  5 6 5 5  at:  2989
count:  18
inserting:  4 6 4 5  at:  2469
count:  19
inserting:  3 6 3 5  at:  1949
count:  20
inserting:  2 6 2 5  at:  1429
count:  21
inserting:  1 6 1 5  at:  909
count:  22
inserting:  7 6 7 4  at:  4028
count:  23
inserting:  6 6 6 4  at:  3508
count:  24
inserting:  5 6 5 4  at:  2988
count:  25
inserting:  4 6 4 4  at:  2468
count:  26
inserting:  3 6 3 4  at:  1948
count:  27
inserting:  2 6 2 4  at:  1428
count:  28
inserting:  1 6 1 4  at:  908
count:  29
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.0002445780555717647
POLICY:  454  :  0.00024529709480702877
POLICY:  901  :  0.0002471171028446406
POLICY:  908  :  0.0002425555867375806
POLICY:  909  :  0.00024316577764693648
POLICY:  965  :  0.00024423786089755595
POLICY:  981  :  0.00024367040896322578
POLICY:  1428  :  0.00024352525360882282
POLICY:  1429  :  0.0002413093316135928
POLICY:  1948  :  0.00024101900635287166
POLICY:  1949  :  0.00024353316985070705
POLICY:  2468  :  0.00024335316265933216
POLICY:  2469  :  0.00024269396089948714
POLICY:  2713  :  0.00024492861120961607
POLICY:  2715  :  0.00024238678452093154
POLICY:  2720  :  0.00024252230650745332
POLICY:  2724  :  0.0002442419354338199
POLICY:  2736  :  0.00024368471349589527
POLICY:  2740  :  0.00024292015586979687
POLICY:  2745  :  0.00024234579177573323
POLICY:  2747  :  0.0002435430360492319
POLICY:  2988  :  0.0002462314150761813
POLICY:  2989  :  0.00024339096853509545
POLICY:  3508  :  0.00024169354583136737
POLICY:  3509  :  0.0002442334371153265
POLICY:  3565  :  0.0002432142209727317
POLICY:  3581  :  0.0002436935028526932
POLICY:  4028  :  0.00024729472352191806
POLICY:  4029  :  0.00024483902961947024
MCTS.py==>search  returning value of canonical board -v:  [-0.01120405]
MCTS.py==>search  returning value of canonical board -v2:  [0.01120405]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  73
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06406635]
in if
in if  cur_best:  [0.06406635] best_act:  129
uuuuu2:  0.16417774185160192
in if
in if  cur_best:  0.16417774185160192 best_act:  137
uuuuu1:  [0.06460908]
uuuuu1:  [0.07188293]
uuuuu2:  0.1643832725197836
in if
in if  cur_best:  0.1643832725197836 best_act:  908
uuuuu2:  0.1644433698410785
in if
in if  cur_best:  0.1644433698410785 best_act:  909
uuuuu1:  [0.05935492]
uuuuu1:  [0.06315149]
uuuuu2:  0.16369406250756646
uuuuu2:  0.16333163352987373
uuuuu2:  0.16468726176113913
in if
in if  cur_best:  0.16468726176113913 best_act:  1949
uuuuu2:  0.16450577594142168
uuuuu2:  0.1645866029412654
uuuuu1:  [0.04830287]
uuuuu1:  [0.06475457]
uuuuu2:  0.1635036573021241
uuuuu1:  [0.06390942]
uuuuu1:  [0.07118742]
uuuuu1:  [0.07343097]
uuuuu1:  [0.06737047]
uuuuu1:  [0.06850941]
a:  1949
ChessGame==>getNextState  param action number:  1949 self.n*self.n:  64
selected action:  4 7 4 6
MOVE:  d7d6  by converting:  4 7 4 6
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  d7d6
MOVE FROM:  51 MOVE TO:  43
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  43
piece moved: PAWN
position:  d7d6
board:  r n b q k b n r
. p p . p . p p
p . . P . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p . p . p p
p . . P . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  1949 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . p . . . .
. P P . P . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  0  1  0  1  1  1  0  0 -1  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  0  1  0  1  1  1  0  0 -1  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  74
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . p . . . .
. P P . P . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [4, 3, 5, 2], [4, 3, 3, 2], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [4, 3, 4, 2], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  3 2 4 1  at:  1697
count:  8
inserting:  3 2 2 1  at:  1681
count:  9
inserting:  7 6 7 5  at:  4029
count:  10
inserting:  6 6 6 5  at:  3509
count:  11
inserting:  5 6 5 5  at:  2989
count:  12
inserting:  4 6 4 5  at:  2469
count:  13
inserting:  3 6 3 5  at:  1949
count:  14
inserting:  2 6 2 5  at:  1429
count:  15
inserting:  1 6 1 5  at:  909
count:  16
inserting:  3 2 3 1  at:  1689
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  5 6 5 4  at:  2988
count:  20
inserting:  4 6 4 4  at:  2468
count:  21
inserting:  3 6 3 4  at:  1948
count:  22
inserting:  2 6 2 4  at:  1428
count:  23
inserting:  1 6 1 4  at:  908
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024400300753768533
POLICY:  454  :  0.0002452782355248928
POLICY:  901  :  0.0002470360486768186
POLICY:  908  :  0.00024253639276139438
POLICY:  909  :  0.00024379650130867958
POLICY:  965  :  0.00024401316477451473
POLICY:  981  :  0.0002444090787321329
POLICY:  1428  :  0.00024401693372055888
POLICY:  1429  :  0.00024165741342585534
POLICY:  1681  :  0.00024282920639961958
POLICY:  1689  :  0.00024254812160506845
POLICY:  1697  :  0.00024341707467101514
POLICY:  1948  :  0.00024060839496087283
POLICY:  1949  :  0.00024322768149431795
POLICY:  2468  :  0.0002429571031825617
POLICY:  2469  :  0.00024253073206637055
POLICY:  2988  :  0.000246435753069818
POLICY:  2989  :  0.0002435560745652765
POLICY:  3508  :  0.00024136349384207278
POLICY:  3509  :  0.00024402652343269438
POLICY:  3565  :  0.0002430318418191746
POLICY:  3581  :  0.0002438365190755576
POLICY:  4028  :  0.0002464695426169783
POLICY:  4029  :  0.00024481338914483786
MCTS.py==>search  returning value of canonical board -v:  [-0.02157114]
MCTS.py==>search  returning value of canonical board -v2:  [0.02157114]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  75
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06742536]
in if
in if  cur_best:  [0.06742536] best_act:  129
uuuuu2:  0.1708816115408038
in if
in if  cur_best:  0.1708816115408038 best_act:  137
uuuuu1:  [0.06798334]
uuuuu1:  [0.07526497]
uuuuu2:  0.1710955346427045
in if
in if  cur_best:  0.1710955346427045 best_act:  908
uuuuu2:  0.1711580859179038
in if
in if  cur_best:  0.1711580859179038 best_act:  909
uuuuu1:  [0.06273152]
uuuuu1:  [0.06652666]
uuuuu2:  0.1703781821182425
uuuuu2:  0.17000095407820037
uuuuu1:  [0.06413483]
uuuuu2:  0.17122304024652565
in if
in if  cur_best:  0.17122304024652565 best_act:  2468
uuuuu2:  0.1713071676552324
in if
in if  cur_best:  0.1713071676552324 best_act:  2469
uuuuu1:  [0.0516692]
uuuuu1:  [0.06815141]
uuuuu2:  0.17018000209709713
uuuuu1:  [0.06729446]
uuuuu1:  [0.07455172]
uuuuu1:  [0.07681001]
uuuuu1:  [0.07078642]
uuuuu1:  [0.0718981]
a:  2469
ChessGame==>getNextState  param action number:  2469 self.n*self.n:  64
selected action:  5 7 5 6
MOVE:  e7e6  by converting:  5 7 5 6
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  e7e6
MOVE FROM:  52 MOVE TO:  44
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  44
piece moved: PAWN
position:  e7e6
board:  r n b q k b n r
. p p p . . p p
p . . . P . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p . . p p
p . . . P . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2469 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . p . . .
. P P P . . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  0  0  1  1  1  0  0  0 -1  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  0  0  1  1  1  0  0  0 -1  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  76
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . p . . .
. P P P . . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [5, 3, 4, 2], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [5, 3, 5, 2], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  4 2 3 1  at:  2201
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  5 6 5 5  at:  2989
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  4 2 4 1  at:  2209
count:  16
inserting:  7 6 7 4  at:  4028
count:  17
inserting:  6 6 6 4  at:  3508
count:  18
inserting:  5 6 5 4  at:  2988
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024397521337959915
POLICY:  454  :  0.0002449877792969346
POLICY:  901  :  0.00024727798881940544
POLICY:  908  :  0.0002429219166515395
POLICY:  909  :  0.00024315666814800352
POLICY:  965  :  0.00024464743910357356
POLICY:  981  :  0.00024396598746534437
POLICY:  1428  :  0.0002445358841214329
POLICY:  1429  :  0.0002411297900835052
POLICY:  1948  :  0.00024086172925308347
POLICY:  1949  :  0.00024346390273422003
POLICY:  2201  :  0.00024289547582156956
POLICY:  2209  :  0.0002410931047052145
POLICY:  2468  :  0.00024232476425822824
POLICY:  2469  :  0.00024295863113366067
POLICY:  2988  :  0.00024578272132202983
POLICY:  2989  :  0.0002440089883748442
POLICY:  3508  :  0.00024164527712855488
POLICY:  3509  :  0.00024388283782172948
POLICY:  3565  :  0.00024329242296516895
POLICY:  3581  :  0.0002441292890580371
POLICY:  4028  :  0.00024663316435180604
POLICY:  4029  :  0.000245020812144503
MCTS.py==>search  returning value of canonical board -v:  [-0.00786335]
MCTS.py==>search  returning value of canonical board -v2:  [0.00786335]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  77
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07065746]
in if
in if  cur_best:  [0.07065746] best_act:  129
uuuuu2:  0.177332228898396
in if
in if  cur_best:  0.177332228898396 best_act:  137
uuuuu1:  [0.07123014]
uuuuu1:  [0.07851924]
uuuuu2:  0.17755422739273866
in if
in if  cur_best:  0.17755422739273866 best_act:  908
uuuuu2:  0.17761913991873554
in if
in if  cur_best:  0.17761913991873554 best_act:  909
uuuuu1:  [0.06598055]
uuuuu1:  [0.06977433]
uuuuu2:  0.17680979549675105
uuuuu2:  0.1764183274590818
uuuuu1:  [0.06737015]
uuuuu2:  0.1776865462111227
in if
in if  cur_best:  0.1776865462111227 best_act:  2468
uuuuu1:  [0.08102357]
uuuuu1:  [0.05490836]
uuuuu1:  [0.07141993]
uuuuu2:  0.1766041343694012
uuuuu1:  [0.07055163]
uuuuu1:  [0.07778891]
uuuuu1:  [0.0800614]
uuuuu1:  [0.07407334]
uuuuu1:  [0.07515877]
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  5 7 5 5
MOVE:  e7e5  by converting:  5 7 5 5
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  e7e5
MOVE FROM:  52 MOVE TO:  36
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  36
piece moved: PAWN
position:  e7e5
board:  r n b q k b n r
. p p p . . p p
p . . . . . . .
. . . . P p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p . . p p
p . . . . . . .
. . . . P p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2468 next_s:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . p P . .
P . . . . . . .
. P P P . . P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  0  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0 -1  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  0  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0 -1  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  78
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . p P . .
P . . . . . . .
. P P P . . P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [5, 4, 5, 3], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  4 3 4 2  at:  2274
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  5 6 5 4  at:  2988
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024430357734672725
POLICY:  454  :  0.0002451483451295644
POLICY:  901  :  0.0002472489431966096
POLICY:  908  :  0.00024306053819600493
POLICY:  909  :  0.00024327078426722437
POLICY:  965  :  0.000244516326347366
POLICY:  981  :  0.00024448236217722297
POLICY:  1428  :  0.0002444823330733925
POLICY:  1429  :  0.00024134099658112973
POLICY:  1948  :  0.00024091480008792132
POLICY:  1949  :  0.00024291989393532276
POLICY:  2274  :  0.0002442226395942271
POLICY:  2468  :  0.0002425227576168254
POLICY:  2469  :  0.00024284530081786215
POLICY:  2988  :  0.00024595449212938547
POLICY:  2989  :  0.00024425843730568886
POLICY:  3508  :  0.000241669244132936
POLICY:  3509  :  0.00024417153326794505
POLICY:  3565  :  0.00024350685998797417
POLICY:  3581  :  0.00024400158144999295
POLICY:  4028  :  0.0002462842676322907
POLICY:  4029  :  0.0002447588194627315
MCTS.py==>search  returning value of canonical board -v:  [-0.01534074]
MCTS.py==>search  returning value of canonical board -v2:  [0.01534074]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  324 COUNT:  1
CNT NUM:  454 COUNT:  1
CNT NUM:  981 COUNT:  1
CNT NUM:  1428 COUNT:  1
CNT NUM:  1949 COUNT:  1
CNT NUM:  2468 COUNT:  1
CNT NUM:  2469 COUNT:  1
CNT NUM:  2542 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  3565 COUNT:  1
CNT NUM:  3581 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  79
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.06053775]
in if
in if  cur_best:  [0.06053775] best_act:  66
uuuuu2:  0.16774395982702955
in if
in if  cur_best:  0.16774395982702955 best_act:  67
uuuuu1:  [0.06127516]
uuuuu2:  0.1676882658804154
uuuuu1:  [0.05922574]
uuuuu1:  [0.06308801]
uuuuu1:  [0.06207354]
uuuuu1:  [0.06219639]
uuuuu1:  [0.06080768]
uuuuu1:  [0.06488137]
uuuuu2:  0.1688830232556603
in if
in if  cur_best:  0.1688830232556603 best_act:  1626
uuuuu1:  [0.06537937]
uuuuu1:  [0.06179346]
uuuuu2:  0.16973791671483385
in if
in if  cur_best:  0.16973791671483385 best_act:  2146
uuuuu1:  [0.0641019]
uuuuu1:  [0.05730548]
uuuuu2:  0.16900984844387074
uuuuu2:  0.16924390298986758
uuuuu2:  0.16900258622100134
uuuuu1:  [0.0603333]
uuuuu1:  [0.06120577]
uuuuu2:  0.16970456728914318
a:  2146
ChessGame==>getNextState  param action number:  2146 self.n*self.n:  64
selected action:  5 2 5 3
MOVE:  e2e3  by converting:  5 2 5 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  e2e3
MOVE FROM:  12 MOVE TO:  20
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  20
piece moved: PAWN
position:  e2e3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . P . . .
P P P P . . P P
R N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . P . . .
P P P P . . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  2146 next_s:  r n b q k b n r
p p p p . . p p
. . . . p . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0 -1  0  0  0
 -1 -1 -1 -1  0  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0 -1  0  0  0
 -1 -1 -1 -1  0  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  80
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
p p p p . . p p
. . . . p . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 5, 7], [7, 8, 8, 6], [7, 8, 6, 6], [6, 8, 5, 7], [6, 8, 4, 6], [6, 8, 3, 5], [6, 8, 2, 4], [5, 8, 6, 7], [5, 8, 5, 7], [4, 8, 5, 7], [4, 8, 6, 6], [4, 8, 7, 5], [4, 8, 8, 4], [2, 8, 3, 6], [2, 8, 1, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [5, 6, 5, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 4 6  at:  3558
count:  1
inserting:  6 7 7 5  at:  3581
count:  2
inserting:  6 7 5 5  at:  3565
count:  3
inserting:  5 7 4 6  at:  3046
count:  4
inserting:  5 7 3 5  at:  3037
count:  5
inserting:  5 7 2 4  at:  3028
count:  6
inserting:  5 7 1 3  at:  3019
count:  7
inserting:  4 7 5 6  at:  2542
count:  8
inserting:  4 7 4 6  at:  2534
count:  9
inserting:  3 7 4 6  at:  2022
count:  10
inserting:  3 7 5 5  at:  2029
count:  11
inserting:  3 7 6 4  at:  2036
count:  12
inserting:  3 7 7 3  at:  2043
count:  13
inserting:  1 7 2 5  at:  981
count:  14
inserting:  1 7 0 5  at:  965
count:  15
inserting:  0 2 1 1  at:  137
count:  16
inserting:  7 6 7 5  at:  4029
count:  17
inserting:  6 6 6 5  at:  3509
count:  18
inserting:  3 6 3 5  at:  1949
count:  19
inserting:  2 6 2 5  at:  1429
count:  20
inserting:  1 6 1 5  at:  909
count:  21
inserting:  0 6 0 5  at:  389
count:  22
inserting:  4 5 4 4  at:  2404
count:  23
inserting:  5 4 5 3  at:  2859
count:  24
inserting:  0 2 0 1  at:  129
count:  25
inserting:  7 6 7 4  at:  4028
count:  26
inserting:  6 6 6 4  at:  3508
count:  27
inserting:  3 6 3 4  at:  1948
count:  28
inserting:  2 6 2 4  at:  1428
count:  29
inserting:  1 6 1 4  at:  908
count:  30
inserting:  0 6 0 4  at:  388
count:  31
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002427843282930553
POLICY:  137  :  0.0002421087701804936
POLICY:  388  :  0.00024413767096120864
POLICY:  389  :  0.0002477397210896015
POLICY:  908  :  0.00024262155056931078
POLICY:  909  :  0.0002425064885756001
POLICY:  965  :  0.00024422534625045955
POLICY:  981  :  0.00024371585459448397
POLICY:  1428  :  0.0002436240465613082
POLICY:  1429  :  0.00024163178750313818
POLICY:  1948  :  0.00024072192900348455
POLICY:  1949  :  0.00024279425269924104
POLICY:  2022  :  0.0002445538993924856
POLICY:  2029  :  0.00024271242727991194
POLICY:  2036  :  0.0002450147003401071
POLICY:  2043  :  0.0002476682420819998
POLICY:  2404  :  0.00024579730234108865
POLICY:  2534  :  0.0002463582786731422
POLICY:  2542  :  0.00024314400798175484
POLICY:  2859  :  0.0002454165951348841
POLICY:  3019  :  0.00024398198002018034
POLICY:  3028  :  0.00024224155640695244
POLICY:  3037  :  0.00024337282229680568
POLICY:  3046  :  0.0002447330334689468
POLICY:  3508  :  0.00024124429910443723
POLICY:  3509  :  0.0002444410347379744
POLICY:  3558  :  0.0002413542097201571
POLICY:  3565  :  0.0002429765008855611
POLICY:  3581  :  0.00024400079564657062
POLICY:  4028  :  0.00024670438142493367
POLICY:  4029  :  0.0002446913276799023
MCTS.py==>search  returning value of canonical board -v:  [-0.02388858]
MCTS.py==>search  returning value of canonical board -v2:  [0.02388858]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  81
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.06356238]
uuuuu2:  0.17363149419651083
uuuuu1:  [0.06429492]
uuuuu2:  0.1735738454848774
uuuuu1:  [0.06222527]
uuuuu1:  [0.06607949]
uuuuu1:  [0.06509465]
uuuuu1:  [0.06517562]
uuuuu1:  [0.06379505]
uuuuu1:  [0.06787845]
uuuuu2:  0.17481053685951756
uuuuu1:  [0.06838355]
uuuuu1:  [0.06478542]
uuuuu1:  [0.06395914]
uuuuu1:  [0.0670813]
uuuuu1:  [0.06028452]
uuuuu2:  0.17494181340117926
uuuuu2:  0.17518408287297915
uuuuu2:  0.17493429628634963
uuuuu1:  [0.06333353]
uuuuu1:  [0.0641846]
uuuuu2:  0.17566091572400216
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  82
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024269714776892215
POLICY:  137  :  0.00024200316693168133
POLICY:  388  :  0.00024382864648941904
POLICY:  389  :  0.00024760543601587415
POLICY:  908  :  0.00024232138821389526
POLICY:  909  :  0.00024290171859320253
POLICY:  965  :  0.0002448155719321221
POLICY:  981  :  0.0002437763469060883
POLICY:  1428  :  0.00024357969232369214
POLICY:  1429  :  0.00024119162117131054
POLICY:  1948  :  0.00024091912200674415
POLICY:  1949  :  0.00024378405942115933
POLICY:  2468  :  0.00024293831666000187
POLICY:  2469  :  0.0002426150895189494
POLICY:  2542  :  0.00024311375454999506
POLICY:  2859  :  0.00024542625760659575
POLICY:  3508  :  0.00024131280952133238
POLICY:  3509  :  0.00024401862174272537
POLICY:  3565  :  0.00024273550661746413
POLICY:  3581  :  0.0002436782669974491
POLICY:  3632  :  0.00024237293109763414
POLICY:  3641  :  0.00024631927954033017
POLICY:  4028  :  0.0002462755946908146
POLICY:  4029  :  0.0002444026176817715
MCTS.py==>search  returning value of canonical board -v:  [-0.03055486]
MCTS.py==>search  returning value of canonical board -v2:  [0.03055486]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  83
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.06648777]
uuuuu2:  0.17932583610671898
uuuuu1:  [0.06721559]
uuuuu2:  0.17926629677336256
uuuuu1:  [0.06512637]
uuuuu1:  [0.0689728]
uuuuu1:  [0.06801662]
uuuuu1:  [0.0680571]
uuuuu1:  [0.06668438]
uuuuu1:  [0.07077719]
uuuuu2:  0.18054354613293047
uuuuu1:  [0.07128915]
uuuuu1:  [0.0676792]
uuuuu1:  [0.06684015]
uuuuu1:  [0.06996292]
uuuuu1:  [0.0631658]
uuuuu2:  0.18067912796215807
uuuuu2:  0.18092934279671152
uuuuu2:  0.1806713643193456
uuuuu1:  [0.06623532]
uuuuu1:  [0.06706567]
uuuuu2:  0.181421813647628
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  84
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu2:  0.0
in if
in if  cur_best:  0.0 best_act:  129
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
a:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
p P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
p P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  129 next_s:  r n b q k b n R
P p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
  1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
  1 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  85
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
P p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  454  :  0.00024512334493920207
POLICY:  908  :  0.00024289992870762944
POLICY:  909  :  0.00024274022143799812
POLICY:  965  :  0.0002443106204736978
POLICY:  981  :  0.0002441563119646162
POLICY:  1428  :  0.00024403590941801667
POLICY:  1429  :  0.0002411126479273662
POLICY:  1948  :  0.00024029570340644568
POLICY:  1949  :  0.00024343904806300998
POLICY:  2468  :  0.00024316021881531924
POLICY:  2469  :  0.0002428080333629623
POLICY:  2988  :  0.00024654174922034144
POLICY:  2989  :  0.0002442049444653094
POLICY:  3508  :  0.00024162944464478642
POLICY:  3509  :  0.0002441653923597187
POLICY:  3565  :  0.0002429651649435982
POLICY:  3581  :  0.00024407582532148808
POLICY:  4028  :  0.00024669955018907785
POLICY:  4029  :  0.00024448265321552753
MCTS.py==>search  returning value of canonical board -v:  [-0.01207191]
MCTS.py==>search  returning value of canonical board -v2:  [0.01207191]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01207191]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  86
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.06932308]
uuuuu2:  0.1848448409175509
uuuuu1:  [0.07004633]
uuuuu2:  0.18478346917747407
uuuuu1:  [0.06793814]
uuuuu1:  [0.07177702]
uuuuu1:  [0.07084861]
uuuuu1:  [0.07084984]
uuuuu1:  [0.06948476]
uuuuu1:  [0.07358669]
uuuuu2:  0.18610002768241182
uuuuu1:  [0.07410528]
uuuuu1:  [0.07048388]
uuuuu1:  [0.06963246]
uuuuu1:  [0.07275581]
uuuuu1:  [0.06595837]
uuuuu2:  0.18623978223311677
uuuuu2:  0.18649769778110686
uuuuu2:  0.18623177965327795
uuuuu1:  [0.06904775]
uuuuu1:  [0.06985804]
uuuuu2:  0.18700532511507345
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  87
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.00869048]
in if
in if  cur_best:  [0.00869048] best_act:  129
uuuuu2:  0.04140605037516185
in if
in if  cur_best:  0.04140605037516185 best_act:  137
uuuuu2:  0.041718384711463545
in if
in if  cur_best:  0.041718384711463545 best_act:  388
uuuuu2:  0.04236458260784451
in if
in if  cur_best:  0.04236458260784451 best_act:  389
uuuuu2:  0.041460497127280255
uuuuu2:  0.04155978999697488
uuuuu2:  0.0418872448347223
uuuuu2:  0.04170943640219368
uuuuu2:  0.041675789365055935
uuuuu2:  0.04126719721442967
uuuuu2:  0.04122057338599683
uuuuu2:  0.04171075599148501
uuuuu2:  0.041566051821630895
uuuuu2:  0.04151074858136868
uuuuu2:  0.04159606874332193
uuuuu2:  0.0419917314086843
uuuuu2:  0.04128793219484132
uuuuu2:  0.041750888934479174
uuuuu2:  0.04153135160285121
uuuuu2:  0.04169265521007377
uuuuu2:  0.04146931596741211
uuuuu2:  0.04214452490987336
uuuuu2:  0.042137050556943986
uuuuu2:  0.04181658954244061
a:  389
ChessGame==>getNextState  param action number:  389 self.n*self.n:  64
selected action:  1 7 1 6
MOVE:  a7a6  by converting:  1 7 1 6
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a7a6
MOVE FROM:  48 MOVE TO:  40
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  40
piece moved: PAWN
position:  a7a6
board:  . n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  389 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  88
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024387234589084983
POLICY:  454  :  0.0002451447071507573
POLICY:  901  :  0.00024716215557418764
POLICY:  908  :  0.0002427615545457229
POLICY:  909  :  0.00024295173352584243
POLICY:  965  :  0.0002444358542561531
POLICY:  981  :  0.00024422293063253164
POLICY:  1428  :  0.00024382979609072208
POLICY:  1429  :  0.00024126945936586708
POLICY:  1948  :  0.00024042846052907407
POLICY:  1949  :  0.00024341461539734155
POLICY:  2468  :  0.00024289758584927768
POLICY:  2469  :  0.0002426818391541019
POLICY:  2988  :  0.00024652681895531714
POLICY:  2989  :  0.00024410069454461336
POLICY:  3508  :  0.00024159449094440788
POLICY:  3509  :  0.00024432962527498603
POLICY:  3565  :  0.0002431128959869966
POLICY:  3581  :  0.00024391616170760244
POLICY:  4028  :  0.00024664372904226184
POLICY:  4029  :  0.00024470043717883527
MCTS.py==>search  returning value of canonical board -v:  [-0.01026342]
MCTS.py==>search  returning value of canonical board -v2:  [0.01026342]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01026342]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  89
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.07207616]
uuuuu2:  0.19020377212951262
uuuuu1:  [0.07279496]
uuuuu2:  0.19014062112996713
uuuuu1:  [0.07066835]
uuuuu1:  [0.07449991]
uuuuu1:  [0.07359847]
uuuuu1:  [0.07356159]
uuuuu1:  [0.0722039]
uuuuu1:  [0.07631469]
uuuuu2:  0.1914953486550921
uuuuu1:  [0.07683973]
uuuuu1:  [0.07320721]
uuuuu1:  [0.07234377]
uuuuu1:  [0.07546771]
uuuuu1:  [0.06866994]
uuuuu2:  0.19163915490137087
uuuuu2:  0.1919045478107702
uuuuu2:  0.19163092031465176
uuuuu1:  [0.07177861]
uuuuu1:  [0.07256941]
uuuuu2:  0.19242689202809982
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  90
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.01729055]
in if
in if  cur_best:  [0.01729055] best_act:  129
uuuuu2:  0.058556998004857475
in if
in if  cur_best:  0.058556998004857475 best_act:  137
uuuuu2:  0.05899870545925013
in if
in if  cur_best:  0.05899870545925013 best_act:  388
uuuuu1:  [0.01969287]
uuuuu2:  0.058633997340130486
uuuuu2:  0.05877441866309956
uuuuu2:  0.059237509735706656
in if
in if  cur_best:  0.059237509735706656 best_act:  965
uuuuu2:  0.05898605063892037
uuuuu2:  0.058938466542666504
uuuuu2:  0.05836062998177165
uuuuu2:  0.05829469393127217
uuuuu2:  0.058987916819992936
uuuuu2:  0.05878327422045331
uuuuu2:  0.05870506362803131
uuuuu2:  0.05882572455820946
uuuuu2:  0.059385276065689614
in if
in if  cur_best:  0.059385276065689614 best_act:  2859
uuuuu2:  0.058389953672285354
uuuuu2:  0.05904467337227323
uuuuu2:  0.058734200700437764
uuuuu2:  0.05896231844943162
uuuuu2:  0.05864646906344936
uuuuu2:  0.05960135870731365
in if
in if  cur_best:  0.05960135870731365 best_act:  3641
uuuuu2:  0.05959078837603097
uuuuu2:  0.05913758806310845
a:  3641
ChessGame==>getNextState  param action number:  3641 self.n*self.n:  64
selected action:  8 1 8 2
MOVE:  h1h2  by converting:  8 1 8 2
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  h1h2
MOVE FROM:  7 MOVE TO:  15
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  15
position:  h1h2
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P r
R N B Q K B N .
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P r
R N B Q K B N . player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3641 next_s:  r n b q k b n .
. p p p p p p R
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1  4 -4 -2 -3 -5 -6 -3 -2  0]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1  4 -4 -2 -3 -5 -6 -3 -2  0]
NUMBER RECUSRIONS:  91
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n .
. p p p p p p R
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  5 6 5 5  at:  2989
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024411440244875848
POLICY:  454  :  0.0002452013432048261
POLICY:  901  :  0.0002471866609994322
POLICY:  908  :  0.0002429258165648207
POLICY:  909  :  0.00024286899133585393
POLICY:  965  :  0.0002441703691147268
POLICY:  981  :  0.0002441105607431382
POLICY:  1428  :  0.00024406917509622872
POLICY:  1429  :  0.0002410615561529994
POLICY:  1948  :  0.00024013026268221438
POLICY:  1949  :  0.00024357491929549724
POLICY:  2468  :  0.00024328914878424257
POLICY:  2469  :  0.00024280126672238111
POLICY:  2988  :  0.0002466030418872833
POLICY:  2989  :  0.00024408315948676318
POLICY:  3508  :  0.00024179504544008523
POLICY:  3509  :  0.0002442167606204748
POLICY:  3565  :  0.00024292833404615521
POLICY:  3581  :  0.000244026945438236
MCTS.py==>search  returning value of canonical board -v:  [-0.01212785]
MCTS.py==>search  returning value of canonical board -v2:  [0.01212785]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01212785]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  514 COUNT:  1
CNT NUM:  530 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  587 COUNT:  1
CNT NUM:  1106 COUNT:  1
CNT NUM:  1107 COUNT:  1
CNT NUM:  1627 COUNT:  1
CNT NUM:  2089 COUNT:  1
CNT NUM:  2146 COUNT:  1
CNT NUM:  2147 COUNT:  1
CNT NUM:  2796 COUNT:  1
CNT NUM:  3187 COUNT:  1
CNT NUM:  3706 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  92
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07377605]
uuuuu2:  0.18355629558629705
uuuuu1:  [0.0743629]
uuuuu1:  [0.08165922]
uuuuu2:  0.18378608585905465
uuuuu2:  0.18385327670689516
uuuuu1:  [0.06911549]
uuuuu1:  [0.07290793]
uuuuu2:  0.18301552564000917
uuuuu2:  0.18261031772444083
uuuuu1:  [0.07049184]
uuuuu1:  [0.07662079]
uuuuu1:  [0.08414336]
uuuuu1:  [0.05803375]
uuuuu1:  [0.07457366]
uuuuu2:  0.1828026461486897
uuuuu1:  [0.07369441]
uuuuu1:  [0.08091242]
uuuuu1:  [0.0831986]
uuuuu1:  [0.07724481]
uuuuu1:  [0.07830493]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  93
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.00024689530255272985
POLICY:  908  :  0.0002422582037979737
POLICY:  909  :  0.00024346268037334085
POLICY:  965  :  0.00024473643861711025
POLICY:  981  :  0.0002442871336825192
POLICY:  1428  :  0.00024339344236068428
POLICY:  1429  :  0.00024090208171401173
POLICY:  1948  :  0.0002408417349215597
POLICY:  1949  :  0.00024387614394072443
POLICY:  2468  :  0.00024334096815437078
POLICY:  2469  :  0.00024281216610688716
POLICY:  2988  :  0.0002457554219290614
POLICY:  2989  :  0.0002432010805932805
POLICY:  3508  :  0.0002412217145320028
POLICY:  3509  :  0.00024374642816837877
POLICY:  3565  :  0.00024292322632391006
POLICY:  3581  :  0.0002434769121464342
POLICY:  3632  :  0.0002424368867650628
POLICY:  3641  :  0.0002466384321451187
POLICY:  4028  :  0.0002463239652570337
POLICY:  4029  :  0.000244957918766886
MCTS.py==>search  returning value of canonical board -v:  [-0.02620015]
MCTS.py==>search  returning value of canonical board -v2:  [0.02620015]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  94
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07679231]
uuuuu2:  0.1895761269059345
uuuuu1:  [0.07739288]
uuuuu1:  [0.08469616]
uuuuu2:  0.18981345327913735
uuuuu2:  0.18988284768839173
uuuuu1:  [0.07214755]
uuuuu1:  [0.07593872]
uuuuu2:  0.18901762210697387
uuuuu2:  0.18859912517130784
uuuuu1:  [0.0735111]
uuuuu1:  [0.07963672]
uuuuu1:  [0.08716077]
uuuuu1:  [0.06105659]
uuuuu1:  [0.0776239]
uuuuu2:  0.18879776111373936
uuuuu1:  [0.07673405]
uuuuu1:  [0.08393343]
uuuuu1:  [0.08623286]
uuuuu1:  [0.08031222]
uuuuu1:  [0.08134785]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  95
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu2:  0.0
in if
in if  cur_best:  0.0 best_act:  901
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
a:  901
ChessGame==>getNextState  param action number:  901 self.n*self.n:  64
selected action:  2 7 1 6
MOVE:  b7a6  by converting:  2 7 1 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  b7a6
MOVE FROM:  49 MOVE TO:  40
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  40
piece moved: PAWN
position:  b7a6
board:  . n b q k b n r
. . p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. . p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  901 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
P . . . . . . .
. . P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  0  1  1  1  1  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  0  1  1  1  1  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  96
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
P . . . . . . .
. . P P P P P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 5 0 4  at:  324
count:  12
inserting:  5 4 5 3  at:  2859
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  6 6 6 4  at:  3508
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  324  :  0.0002442671684548259
POLICY:  454  :  0.0002446733706165105
POLICY:  908  :  0.0002427152794552967
POLICY:  909  :  0.0002427839208394289
POLICY:  981  :  0.0002444111160002649
POLICY:  1428  :  0.00024341647804249078
POLICY:  1429  :  0.00024114313418976963
POLICY:  1948  :  0.00024051703803706914
POLICY:  1949  :  0.00024318006762769073
POLICY:  2468  :  0.00024260810459963977
POLICY:  2469  :  0.00024303614918608218
POLICY:  2542  :  0.0002431231114314869
POLICY:  2859  :  0.0002453838533256203
POLICY:  3508  :  0.00024181402113754302
POLICY:  3509  :  0.00024422898422926664
POLICY:  3565  :  0.0002426982973702252
POLICY:  3581  :  0.00024368125014007092
POLICY:  4028  :  0.0002466911100782454
POLICY:  4029  :  0.0002449203748255968
MCTS.py==>search  returning value of canonical board -v:  [-0.0151471]
MCTS.py==>search  returning value of canonical board -v2:  [0.0151471]
MCTS.py==>search  returning value of canonical board -v2:  [-0.0151471]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  97
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.0797157]
uuuuu2:  0.19541059883216652
uuuuu1:  [0.08032954]
uuuuu1:  [0.08763959]
uuuuu2:  0.19565522925828155
uuuuu2:  0.19572675937807732
uuuuu1:  [0.07508625]
uuuuu1:  [0.07887617]
uuuuu2:  0.19483490526253427
uuuuu2:  0.19440352849509718
uuuuu1:  [0.07643738]
uuuuu1:  [0.08255978]
uuuuu1:  [0.09008527]
uuuuu1:  [0.06398635]
uuuuu1:  [0.08058023]
uuuuu2:  0.19460827773801948
uuuuu1:  [0.0796801]
uuuuu1:  [0.08686142]
uuuuu1:  [0.08917368]
uuuuu1:  [0.08328518]
uuuuu1:  [0.08429708]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  98
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.00897561]
in if
in if  cur_best:  [0.00897561] best_act:  901
uuuuu2:  0.04733927864766898
in if
in if  cur_best:  0.04733927864766898 best_act:  908
uuuuu2:  0.047574643441644936
in if
in if  cur_best:  0.047574643441644936 best_act:  909
uuuuu2:  0.04782354645292067
in if
in if  cur_best:  0.04782354645292067 best_act:  965
uuuuu2:  0.047735748511868833
uuuuu2:  0.0475611137550429
uuuuu2:  0.04707428105333996
uuuuu2:  0.04706248878550922
uuuuu2:  0.047655437679859275
uuuuu2:  0.047550859856369726
uuuuu2:  0.047447527514748955
uuuuu2:  0.0480226643122358
in if
in if  cur_best:  0.0480226643122358 best_act:  2988
uuuuu2:  0.047523524657272324
uuuuu2:  0.047136739978563554
uuuuu2:  0.047630090133333296
uuuuu2:  0.04746922960977771
uuuuu2:  0.047577424449105385
uuuuu2:  0.04737419479348371
uuuuu2:  0.048195211891683444
in if
in if  cur_best:  0.048195211891683444 best_act:  3641
uuuuu2:  0.04813376243235807
uuuuu2:  0.047866825526078106
a:  3641
ChessGame==>getNextState  param action number:  3641 self.n*self.n:  64
selected action:  8 1 8 2
MOVE:  h1h2  by converting:  8 1 8 2
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  h1h2
MOVE FROM:  7 MOVE TO:  15
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  15
position:  h1h2
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P r
R N B Q K B N .
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P r
R N B Q K B N . player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3641 next_s:  r n b q k b n .
. p p p p . p R
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1  4 -4 -2 -3 -5 -6 -3 -2  0]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1  4 -4 -2 -3 -5 -6 -3 -2  0]
NUMBER RECUSRIONS:  99
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n .
. p p p p . p R
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 5 0 4  at:  324
count:  12
inserting:  5 4 5 3  at:  2859
count:  13
inserting:  0 2 0 1  at:  129
count:  14
inserting:  6 6 6 4  at:  3508
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024298833159264177
POLICY:  137  :  0.0002424327831249684
POLICY:  324  :  0.00024412162019871175
POLICY:  454  :  0.0002444865822326392
POLICY:  908  :  0.00024265887623187155
POLICY:  909  :  0.00024251245486084372
POLICY:  981  :  0.00024403697170782834
POLICY:  1428  :  0.00024380351533181965
POLICY:  1429  :  0.0002412082685623318
POLICY:  1948  :  0.00024047825718298554
POLICY:  1949  :  0.00024338040384463966
POLICY:  2468  :  0.00024265062529593706
POLICY:  2469  :  0.0002426638238830492
POLICY:  2542  :  0.00024296289484482259
POLICY:  2859  :  0.0002454746572766453
POLICY:  3508  :  0.0002418883377686143
POLICY:  3509  :  0.0002445396385155618
POLICY:  3565  :  0.000242821522988379
POLICY:  3581  :  0.00024375712382607162
MCTS.py==>search  returning value of canonical board -v:  [-0.0198856]
MCTS.py==>search  returning value of canonical board -v2:  [0.0198856]
MCTS.py==>search  returning value of canonical board -v2:  [-0.0198856]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  100
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.0825543]
uuuuu2:  0.20107584732940167
uuuuu1:  [0.08318104]
uuuuu1:  [0.09049766]
uuuuu2:  0.20132756996117088
uuuuu2:  0.20140117384721118
uuuuu1:  [0.07793972]
uuuuu1:  [0.08172844]
uuuuu2:  0.20048346353339624
uuuuu2:  0.20003958050172338
uuuuu1:  [0.0792788]
uuuuu1:  [0.08539806]
uuuuu1:  [0.09292495]
uuuuu1:  [0.06683114]
uuuuu1:  [0.0834508]
uuuuu2:  0.20025026573454444
uuuuu1:  [0.08254071]
uuuuu1:  [0.08970448]
uuuuu1:  [0.09202921]
uuuuu1:  [0.0861719]
uuuuu1:  [0.08716076]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  101
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.01896756]
in if
in if  cur_best:  [0.01896756] best_act:  901
uuuuu2:  0.06694784989649255
in if
in if  cur_best:  0.06694784989649255 best_act:  908
uuuuu2:  0.0672807059802385
in if
in if  cur_best:  0.0672807059802385 best_act:  909
uuuuu2:  0.06763270799450014
in if
in if  cur_best:  0.06763270799450014 best_act:  965
uuuuu2:  0.0675085429555162
uuuuu2:  0.06726157211395123
uuuuu2:  0.0665730867045962
uuuuu2:  0.06655640991949884
uuuuu2:  0.06739496628768281
uuuuu2:  0.06724707091138044
uuuuu2:  0.06710093691242856
uuuuu2:  0.0679143031716543
in if
in if  cur_best:  0.0679143031716543 best_act:  2988
uuuuu2:  0.06720841310208672
uuuuu2:  0.06666141696373866
uuuuu2:  0.06735911944361289
uuuuu2:  0.06713162830955015
uuuuu2:  0.06728463891870612
uuuuu2:  0.06699722878344953
uuuuu1:  [0.01419356]
uuuuu2:  0.06807141963988536
in if
in if  cur_best:  0.06807141963988536 best_act:  4028
uuuuu2:  0.06769391384672632
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  8 7 8 5
MOVE:  h7h5  by converting:  8 7 8 5
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  h7h5
MOVE FROM:  55 MOVE TO:  39
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  39
piece moved: PAWN
position:  h7h5
board:  . n b q k b n r
. p p p p p p .
P . . . . . . .
. . . . . . . p
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p .
P . . . . . . .
. . . . . . . p
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  4028 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . P
p . . . . . . .
. P P P P P P .
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  102
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . P
p . . . . . . .
. P P P P P P .
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024285544350277632
POLICY:  137  :  0.0002422259858576581
POLICY:  324  :  0.00024422217393293977
POLICY:  454  :  0.0002448123414069414
POLICY:  908  :  0.00024262155056931078
POLICY:  909  :  0.00024226705136243254
POLICY:  981  :  0.00024397196830250323
POLICY:  1428  :  0.0002438230294501409
POLICY:  1429  :  0.00024130530073307455
POLICY:  1948  :  0.00024078188289422542
POLICY:  1949  :  0.0002433952467981726
POLICY:  2468  :  0.0002427877188893035
POLICY:  2469  :  0.0002428994484944269
POLICY:  2542  :  0.00024301736266352236
POLICY:  2859  :  0.0002451107429806143
POLICY:  3508  :  0.00024186866357922554
POLICY:  3509  :  0.00024454513913951814
POLICY:  3565  :  0.00024292734451591969
POLICY:  3581  :  0.00024382345145568252
POLICY:  4028  :  0.0002467227168381214
POLICY:  4029  :  0.00024464112357236445
MCTS.py==>search  returning value of canonical board -v:  [-0.01830862]
MCTS.py==>search  returning value of canonical board -v2:  [0.01830862]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01830862]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  103
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08531508]
uuuuu2:  0.20658579482270267
uuuuu1:  [0.08595437]
uuuuu1:  [0.09327736]
uuuuu2:  0.2068444152420597
uuuuu2:  0.20692003604635634
uuuuu1:  [0.08071496]
uuuuu1:  [0.08450251]
uuuuu2:  0.20597717832816467
uuuuu2:  0.20552113186547727
uuuuu1:  [0.08204233]
uuuuu1:  [0.08815854]
uuuuu1:  [0.09568679]
uuuuu1:  [0.06959794]
uuuuu1:  [0.08624268]
uuuuu2:  0.20573759036538075
uuuuu1:  [0.08532289]
uuuuu1:  [0.09246962]
uuuuu1:  [0.09480646]
uuuuu1:  [0.0889795]
uuuuu1:  [0.08994594]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  104
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.02663465]
in if
in if  cur_best:  [0.02663465] best_act:  901
uuuuu2:  0.08199403581142316
in if
in if  cur_best:  0.08199403581142316 best_act:  908
uuuuu2:  0.0824016995929025
in if
in if  cur_best:  0.0824016995929025 best_act:  909
uuuuu2:  0.08283281225458895
in if
in if  cur_best:  0.08283281225458895 best_act:  965
uuuuu2:  0.08268074175988724
uuuuu2:  0.08237826548829728
uuuuu2:  0.08153504651416177
uuuuu2:  0.08151462170714247
uuuuu2:  0.08254163931844856
uuuuu2:  0.08236050521481969
uuuuu2:  0.08218152834906745
uuuuu2:  0.08317769450361712
in if
in if  cur_best:  0.08317769450361712 best_act:  2988
uuuuu2:  0.08231315926114798
uuuuu2:  0.08164322854603519
uuuuu2:  0.08249773608001834
uuuuu2:  0.08221911748028794
uuuuu2:  0.08240651643912023
uuuuu2:  0.08205451234997876
uuuuu1:  [0.02185268]
uuuuu1:  [0.02337644]
uuuuu2:  0.08290777380820213
a:  2988
ChessGame==>getNextState  param action number:  2988 self.n*self.n:  64
selected action:  6 7 6 5
MOVE:  f7f5  by converting:  6 7 6 5
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  f7f5
MOVE FROM:  53 MOVE TO:  37
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  37
piece moved: PAWN
position:  f7f5
board:  . n b q k b n r
. p p p p . p p
P . . . . . . .
. . . . . p . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p . p p
P . . . . . . .
. . . . . p . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2988 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . P . .
p . . . . . . .
. P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  105
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . P . .
p . . . . . . .
. P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  0 2 0 1  at:  129
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024305439728777856
POLICY:  137  :  0.0002425663114991039
POLICY:  324  :  0.0002439179370412603
POLICY:  454  :  0.00024494208628311753
POLICY:  908  :  0.00024256690812762827
POLICY:  909  :  0.00024257120094262064
POLICY:  981  :  0.00024423401919193566
POLICY:  1428  :  0.0002440771204419434
POLICY:  1429  :  0.00024112642859108746
POLICY:  1948  :  0.00024054099048953503
POLICY:  1949  :  0.00024347520957235247
POLICY:  2468  :  0.00024288726854138076
POLICY:  2469  :  0.00024269490677397698
POLICY:  2542  :  0.00024286923871841282
POLICY:  3508  :  0.00024174939608201385
POLICY:  3509  :  0.00024419816327281296
POLICY:  3565  :  0.0002431718457955867
POLICY:  3581  :  0.00024400503025390208
POLICY:  4028  :  0.0002466067671775818
POLICY:  4029  :  0.00024469473282806575
MCTS.py==>search  returning value of canonical board -v:  [-0.01282533]
MCTS.py==>search  returning value of canonical board -v2:  [0.01282533]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01282533]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  324 COUNT:  1
CNT NUM:  454 COUNT:  1
CNT NUM:  981 COUNT:  1
CNT NUM:  1428 COUNT:  1
CNT NUM:  1949 COUNT:  1
CNT NUM:  2468 COUNT:  1
CNT NUM:  2469 COUNT:  1
CNT NUM:  2542 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  3565 COUNT:  1
CNT NUM:  3581 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  106
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.07475376]
uuuuu2:  0.19541579938878137
uuuuu1:  [0.07546824]
uuuuu2:  0.19535091790446474
uuuuu1:  [0.07332373]
uuuuu1:  [0.07714816]
uuuuu1:  [0.07627295]
uuuuu1:  [0.076199]
uuuuu1:  [0.07484852]
uuuuu1:  [0.0789679]
uuuuu2:  0.1967427681254794
uuuuu1:  [0.07949922]
uuuuu1:  [0.07585589]
uuuuu1:  [0.07498077]
uuuuu1:  [0.07810526]
uuuuu1:  [0.07130717]
uuuuu2:  0.19689051499852525
uuuuu2:  0.19716318029302357
uuuuu2:  0.19688205476491194
uuuuu1:  [0.07443461]
uuuuu1:  [0.07520645]
uuuuu2:  0.19769983796096968
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  107
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.02388961]
in if
in if  cur_best:  [0.02388961] best_act:  129
uuuuu2:  0.0717173829905367
in if
in if  cur_best:  0.0717173829905367 best_act:  137
uuuuu2:  0.07225836192995953
in if
in if  cur_best:  0.07225836192995953 best_act:  388
uuuuu1:  [0.02642539]
uuuuu2:  0.07181168753151287
uuuuu2:  0.07198366782665327
uuuuu2:  0.07255083624281604
in if
in if  cur_best:  0.07255083624281604 best_act:  965
uuuuu2:  0.07224286300366228
uuuuu2:  0.07218458462581556
uuuuu2:  0.07147688226135702
uuuuu2:  0.07139612742166797
uuuuu2:  0.07224514859935999
uuuuu2:  0.07199451362510559
uuuuu2:  0.07189872560314825
uuuuu2:  0.07204650445856128
uuuuu2:  0.07273181229762703
in if
in if  cur_best:  0.07273181229762703 best_act:  2859
uuuuu2:  0.07151279630092396
uuuuu2:  0.07231466089568316
uuuuu2:  0.07193441108314541
uuuuu2:  0.07221379712629904
uuuuu2:  0.07182696221068507
uuuuu1:  [0.02437038]
uuuuu2:  0.07298351244572544
in if
in if  cur_best:  0.07298351244572544 best_act:  4028
uuuuu2:  0.07242845768676053
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  8 7 8 5
MOVE:  h7h5  by converting:  8 7 8 5
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  h7h5
MOVE FROM:  55 MOVE TO:  39
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  39
piece moved: PAWN
position:  h7h5
board:  . n b q k b n r
p p p p p . p .
. . . . . . . .
. . . . . p . p
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p .
. . . . . . . .
. . . . . p . p
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  4028 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . P
. . . . . . . .
P P P P P . P .
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  108
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . P
. . . . . . . .
P P P P P . P .
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024401959672104567
POLICY:  454  :  0.0002454100176692009
POLICY:  901  :  0.00024681162904016674
POLICY:  908  :  0.00024306116392835975
POLICY:  909  :  0.0002429692103760317
POLICY:  965  :  0.0002443758421577513
POLICY:  981  :  0.00024396204389631748
POLICY:  1428  :  0.00024416495580226183
POLICY:  1429  :  0.00024130976817104965
POLICY:  1948  :  0.00024021268473006785
POLICY:  1949  :  0.00024342132383026183
POLICY:  2468  :  0.00024332862813025713
POLICY:  2469  :  0.0002429380256216973
POLICY:  2988  :  0.0002464003046043217
POLICY:  2989  :  0.00024403806310147047
POLICY:  3508  :  0.0002418371441308409
POLICY:  3509  :  0.00024424787261523306
POLICY:  3565  :  0.00024297296477016062
POLICY:  3581  :  0.00024409685283899307
POLICY:  4028  :  0.0002468668099027127
POLICY:  4029  :  0.0002442444092594087
MCTS.py==>search  returning value of canonical board -v:  [-0.01146245]
MCTS.py==>search  returning value of canonical board -v2:  [0.01146245]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01146245]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  109
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.07736178]
uuuuu2:  0.20049237982830495
uuuuu1:  [0.07807206]
uuuuu2:  0.20042581282994495
uuuuu1:  [0.0759101]
uuuuu1:  [0.07972759]
uuuuu1:  [0.07887793]
uuuuu1:  [0.07876787]
uuuuu1:  [0.0774244]
uuuuu1:  [0.08155216]
uuuuu2:  0.20185382102605093
uuuuu1:  [0.0820896]
uuuuu1:  [0.07843573]
uuuuu1:  [0.07754923]
uuuuu1:  [0.08067426]
uuuuu1:  [0.07387587]
uuuuu2:  0.20200540611938425
uuuuu2:  0.20228515480890444
uuuuu2:  0.20199672610284342
uuuuu1:  [0.07702159]
uuuuu1:  [0.07777496]
uuuuu2:  0.20283575395869766
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  110
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.02945288]
in if
in if  cur_best:  [0.02945288] best_act:  129
uuuuu2:  0.0828121007503237
in if
in if  cur_best:  0.0828121007503237 best_act:  137
uuuuu2:  0.08343676942292709
in if
in if  cur_best:  0.08343676942292709 best_act:  388
uuuuu1:  [0.03210117]
uuuuu2:  0.08292099425456051
uuuuu2:  0.08311957999394975
uuuuu2:  0.0837744896694446
in if
in if  cur_best:  0.0837744896694446 best_act:  965
uuuuu2:  0.08341887280438735
uuuuu2:  0.08335157873011187
uuuuu2:  0.08253439442885933
uuuuu2:  0.08244114677199366
uuuuu2:  0.08342151198297001
uuuuu2:  0.08313210364326179
uuuuu2:  0.08302149716273736
uuuuu2:  0.08319213748664386
uuuuu2:  0.0839834628173686
in if
in if  cur_best:  0.0839834628173686 best_act:  2859
uuuuu2:  0.08257586438968265
uuuuu2:  0.08350177786895835
uuuuu2:  0.08306270320570242
uuuuu2:  0.08338531042014755
uuuuu2:  0.08293863193482422
uuuuu1:  [0.03001668]
uuuuu1:  [0.0306746]
uuuuu2:  0.08363317908488122
a:  2859
ChessGame==>getNextState  param action number:  2859 self.n*self.n:  64
selected action:  6 5 6 4
MOVE:  f5f4  by converting:  6 5 6 4
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  f5f4
MOVE FROM:  37 MOVE TO:  29
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  29
piece moved: PAWN
position:  f5f4
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . . . .
. . . . . p . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . . . .
. . . . . p . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2859 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . P . .
. . . . . . . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  111
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . P . .
. . . . . . . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024396648223046213
POLICY:  454  :  0.00024511199444532394
POLICY:  901  :  0.00024703567032702267
POLICY:  908  :  0.00024232083524111658
POLICY:  909  :  0.00024277732882183045
POLICY:  965  :  0.0002442629775032401
POLICY:  981  :  0.00024444839800707996
POLICY:  1428  :  0.00024387214216403663
POLICY:  1429  :  0.00024134699197020382
POLICY:  1948  :  0.00024039983691181988
POLICY:  1949  :  0.00024327319988515228
POLICY:  2468  :  0.00024354137713089585
POLICY:  2469  :  0.0002427431900287047
POLICY:  2989  :  0.0002446555008646101
POLICY:  3508  :  0.0002419382508378476
POLICY:  3509  :  0.0002444029087200761
POLICY:  3565  :  0.0002425504644634202
POLICY:  3581  :  0.00024388323072344065
POLICY:  4028  :  0.00024669384583830833
POLICY:  4029  :  0.0002441049728076905
MCTS.py==>search  returning value of canonical board -v:  [-0.01674545]
MCTS.py==>search  returning value of canonical board -v2:  [0.01674545]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01674545]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  112
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.07990538]
uuuuu2:  0.2054435545050712
uuuuu1:  [0.08061155]
uuuuu2:  0.20537534362958795
uuuuu1:  [0.07843258]
uuuuu1:  [0.0822433]
uuuuu1:  [0.08141856]
uuuuu1:  [0.08127329]
uuuuu1:  [0.07993665]
uuuuu1:  [0.08407259]
uuuuu2:  0.2068386165974764
uuuuu1:  [0.08461599]
uuuuu1:  [0.08095185]
uuuuu1:  [0.08005424]
uuuuu1:  [0.0831798]
uuuuu1:  [0.07638112]
uuuuu2:  0.2069939450963004
uuuuu2:  0.20728060220113592
uuuuu2:  0.20698505072608622
uuuuu1:  [0.07954466]
uuuuu1:  [0.08028004]
uuuuu2:  0.20784479843910694
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  113
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03435421]
in if
in if  cur_best:  [0.03435421] best_act:  129
uuuuu2:  0.09258674331864258
in if
in if  cur_best:  0.09258674331864258 best_act:  137
uuuuu2:  0.09328514412632044
in if
in if  cur_best:  0.09328514412632044 best_act:  388
uuuuu1:  [0.03710163]
uuuuu2:  0.0927084899575334
uuuuu2:  0.09293051556385161
uuuuu2:  0.09366272684061601
in if
in if  cur_best:  0.09366272684061601 best_act:  965
uuuuu2:  0.09326513509850932
uuuuu2:  0.09318989803622788
uuuuu2:  0.0922762582123547
uuuuu2:  0.0921720041626076
uuuuu2:  0.09326808578986712
uuuuu2:  0.09294451742944565
uuuuu2:  0.09282085562484334
uuuuu2:  0.09301163730682209
uuuuu1:  [0.03020273]
uuuuu2:  0.09232262303806729
uuuuu2:  0.0933578257785392
uuuuu2:  0.09286692538142015
uuuuu2:  0.09322761121218573
uuuuu2:  0.09272820948355093
uuuuu1:  [0.03499116]
uuuuu1:  [0.03564821]
uuuuu2:  0.09350473680410402
a:  965
ChessGame==>getNextState  param action number:  965 self.n*self.n:  64
selected action:  2 8 1 6
MOVE:  b8a6  by converting:  2 8 1 6
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  b8a6
MOVE FROM:  57 MOVE TO:  40
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  40
position:  b8a6
board:  . . b q k b n r
p p p p p . p p
n . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . . b q k b n r
p p p p p . p p
n . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  965 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
N . . . . . . .
P P P P P . P P
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  1  1  1  1  1  0  1  1  2  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  0  3  5  6  3  2  4  1  1  1  1  1  0  1  1  2  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  114
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
N . . . . . . .
P P P P P . P P
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024397121160291135
POLICY:  454  :  0.00024500343715772033
POLICY:  901  :  0.000247343210503459
POLICY:  908  :  0.00024338036018889397
POLICY:  909  :  0.00024295329058077186
POLICY:  965  :  0.0002450596366543323
POLICY:  981  :  0.0002442776458337903
POLICY:  1428  :  0.00024401424161624163
POLICY:  1429  :  0.0002416810457361862
POLICY:  1948  :  0.00024042100994847715
POLICY:  1949  :  0.00024344235134776682
POLICY:  2468  :  0.00024282502999994904
POLICY:  2469  :  0.000242897032876499
POLICY:  2988  :  0.00024659762857481837
POLICY:  2989  :  0.00024407728051301092
POLICY:  3508  :  0.00024155456048902124
POLICY:  3509  :  0.00024422205751761794
POLICY:  3565  :  0.00024355758796446025
POLICY:  3581  :  0.00024415040388703346
POLICY:  4028  :  0.0002465654688421637
POLICY:  4029  :  0.00024474534438923
MCTS.py==>search  returning value of canonical board -v:  [-0.00657081]
MCTS.py==>search  returning value of canonical board -v2:  [0.00657081]
MCTS.py==>search  returning value of canonical board -v2:  [-0.00657081]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  115
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.08238909]
uuuuu2:  0.21027818195461703
uuuuu1:  [0.08309127]
uuuuu2:  0.21020836589774095
uuuuu1:  [0.08089568]
uuuuu1:  [0.08469979]
uuuuu1:  [0.08389938]
uuuuu1:  [0.08371972]
uuuuu1:  [0.08238977]
uuuuu1:  [0.0865337]
uuuuu2:  0.2117060735290764
uuuuu1:  [0.08708291]
uuuuu1:  [0.08340874]
uuuuu1:  [0.08250029]
uuuuu1:  [0.08562636]
uuuuu1:  [0.0788274]
uuuuu2:  0.21186505731621508
uuuuu2:  0.21215846021704787
uuuuu2:  0.21185595363806478
uuuuu1:  [0.08200834]
uuuuu1:  [0.08272614]
uuuuu2:  0.21273593347714592
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  116
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03878536]
in if
in if  cur_best:  [0.03878536] best_act:  129
uuuuu2:  0.10142369568312251
in if
in if  cur_best:  0.10142369568312251 best_act:  137
uuuuu2:  0.1021887554362125
in if
in if  cur_best:  0.1021887554362125 best_act:  388
uuuuu1:  [0.04162239]
uuuuu2:  0.1015570624439644
uuuuu2:  0.10180027930981288
uuuuu1:  [0.04473038]
uuuuu2:  0.1021668366444407
uuuuu2:  0.10208441857209676
uuuuu2:  0.101083576290156
uuuuu2:  0.10096937170064048
uuuuu2:  0.1021700689648745
uuuuu2:  0.1018156175850789
uuuuu2:  0.10168015286531394
uuuuu2:  0.10188914372687102
uuuuu1:  [0.0346837]
uuuuu2:  0.10113436641199117
uuuuu2:  0.10226837419708643
in if
in if  cur_best:  0.10226837419708643 best_act:  3509
uuuuu2:  0.10173061975510572
uuuuu2:  0.10212573128647133
uuuuu2:  0.10157866410241062
uuuuu1:  [0.03948844]
uuuuu1:  [0.04014469]
uuuuu2:  0.10242930716238256
in if
in if  cur_best:  0.10242930716238256 best_act:  4029
a:  4029
ChessGame==>getNextState  param action number:  4029 self.n*self.n:  64
selected action:  8 7 8 6
MOVE:  h7h6  by converting:  8 7 8 6
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  h7h6
MOVE FROM:  55 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
piece moved: PAWN
position:  h7h6
board:  . n b q k b n r
p p p p p . p .
. . . . . . . p
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p .
. . . . . . . p
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  4029 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  117
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . P
P P P P P . P .
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024391042825300246
POLICY:  454  :  0.00024519339785911143
POLICY:  901  :  0.00024694649619050324
POLICY:  908  :  0.00024271970323752612
POLICY:  909  :  0.00024276472686324269
POLICY:  965  :  0.00024439391563646495
POLICY:  981  :  0.00024403675342909992
POLICY:  1428  :  0.0002441488322801888
POLICY:  1429  :  0.00024122298054862767
POLICY:  1948  :  0.00024016934912651777
POLICY:  1949  :  0.00024353903427254409
POLICY:  2468  :  0.00024310420849360526
POLICY:  2469  :  0.00024291797308251262
POLICY:  2988  :  0.00024662085343152285
POLICY:  2989  :  0.0002437630173517391
POLICY:  3508  :  0.0002416590286884457
POLICY:  3509  :  0.00024429443874396384
POLICY:  3565  :  0.0002430326712783426
POLICY:  3581  :  0.0002441801188979298
POLICY:  4028  :  0.0002467252197675407
POLICY:  4029  :  0.0002443348348606378
MCTS.py==>search  returning value of canonical board -v:  [-0.0127499]
MCTS.py==>search  returning value of canonical board -v2:  [0.0127499]
MCTS.py==>search  returning value of canonical board -v2:  [-0.0127499]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  118
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.08481698]
uuuuu2:  0.21500412443625327
uuuuu1:  [0.08551523]
uuuuu2:  0.21493273928330633
uuuuu1:  [0.08330341]
uuuuu1:  [0.08710106]
uuuuu1:  [0.08632442]
uuuuu1:  [0.08611117]
uuuuu1:  [0.08478774]
uuuuu1:  [0.08893947]
uuuuu2:  0.21646410746874303
uuuuu1:  [0.08949437]
uuuuu1:  [0.08581039]
uuuuu1:  [0.08489135]
uuuuu1:  [0.08801794]
uuuuu1:  [0.08121868]
uuuuu2:  0.21662666437139255
uuuuu2:  0.21692666141918054
uuuuu2:  0.21661735609065863
uuuuu1:  [0.08441664]
uuuuu1:  [0.08511724]
uuuuu2:  0.21751711322696501
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  119
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04286022]
in if
in if  cur_best:  [0.04286022] best_act:  129
uuuuu2:  0.10955011206609096
in if
in if  cur_best:  0.10955011206609096 best_act:  137
uuuuu2:  0.11037647104585165
in if
in if  cur_best:  0.11037647104585165 best_act:  388
uuuuu1:  [0.04577966]
uuuuu2:  0.10969416463189142
uuuuu2:  0.10995686887206535
uuuuu1:  [0.04884081]
uuuuu2:  0.11035279604486908
uuuuu2:  0.11026377435224846
uuuuu2:  0.10918274113403832
uuuuu2:  0.10905938607883528
uuuuu2:  0.11035628734996669
uuuuu2:  0.10997343610285866
uuuuu2:  0.1098271174824288
uuuuu2:  0.11005285341277685
uuuuu1:  [0.03880439]
uuuuu2:  0.10923760073564735
uuuuu2:  0.1104624691365104
in if
in if  cur_best:  0.1104624691365104 best_act:  3509
uuuuu2:  0.10988162795352807
uuuuu2:  0.11030839718381662
uuuuu2:  0.10971749708973236
uuuuu1:  [0.04362411]
uuuuu1:  [0.04427963]
uuuuu1:  [0.04256824]
a:  3509
ChessGame==>getNextState  param action number:  3509 self.n*self.n:  64
selected action:  7 7 7 6
MOVE:  g7g6  by converting:  7 7 7 6
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  g7g6
MOVE FROM:  54 MOVE TO:  46
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  46
piece moved: PAWN
position:  g7g6
board:  . n b q k b n r
p p p p p . . p
. . . . . . p .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . . p
. . . . . . p .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3509 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . P .
P P P P P . . P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  0  1  0  0  0  0  0  0  1  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  0  1  0  0  0  0  0  0  1  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  120
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . P .
P P P P P . . P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024386693257838488
POLICY:  454  :  0.0002451157197356224
POLICY:  901  :  0.00024699358618818223
POLICY:  908  :  0.00024266842228826135
POLICY:  909  :  0.00024327691062353551
POLICY:  965  :  0.00024423556169494987
POLICY:  981  :  0.00024397793458774686
POLICY:  1428  :  0.0002444092824589461
POLICY:  1429  :  0.00024088875215966254
POLICY:  1948  :  0.00024083309108391404
POLICY:  1949  :  0.00024334403860848397
POLICY:  2468  :  0.0002434497873764485
POLICY:  2469  :  0.00024267425760626793
POLICY:  2988  :  0.00024629171821288764
POLICY:  2989  :  0.00024395858054049313
POLICY:  3508  :  0.00024180187028832734
POLICY:  3509  :  0.00024394759384449571
POLICY:  3565  :  0.00024303304962813854
POLICY:  3581  :  0.00024424371076747775
POLICY:  4028  :  0.0002467299927957356
POLICY:  4029  :  0.0002439699019305408
MCTS.py==>search  returning value of canonical board -v:  [-0.01534001]
MCTS.py==>search  returning value of canonical board -v2:  [0.01534001]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01534001]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  514 COUNT:  1
CNT NUM:  530 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  587 COUNT:  1
CNT NUM:  1106 COUNT:  1
CNT NUM:  1107 COUNT:  1
CNT NUM:  1627 COUNT:  1
CNT NUM:  2089 COUNT:  1
CNT NUM:  2146 COUNT:  1
CNT NUM:  2147 COUNT:  1
CNT NUM:  2796 COUNT:  1
CNT NUM:  3187 COUNT:  1
CNT NUM:  3706 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  121
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08800411]
uuuuu2:  0.21195255333639823
uuuuu1:  [0.08865562]
uuuuu1:  [0.09598485]
uuuuu2:  0.21221789228806576
uuuuu2:  0.21229547759624137
uuuuu1:  [0.08341809]
uuuuu1:  [0.08720449]
uuuuu2:  0.2113281259882803
uuuuu2:  0.210860232190018
uuuuu1:  [0.08473403]
uuuuu1:  [0.09084728]
uuuuu1:  [0.09837685]
uuuuu1:  [0.07229284]
uuuuu1:  [0.08896201]
uuuuu2:  0.2110823139250438
uuuuu1:  [0.08803278]
uuuuu1:  [0.09516288]
uuuuu1:  [0.09751154]
uuuuu1:  [0.09171413]
uuuuu1:  [0.09265874]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  122
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03309831]
in if
in if  cur_best:  [0.03309831] best_act:  901
uuuuu2:  0.09467855729533796
in if
in if  cur_best:  0.09467855729533796 best_act:  908
uuuuu2:  0.09514928688328987
in if
in if  cur_best:  0.09514928688328987 best_act:  909
uuuuu2:  0.09564709290584134
in if
in if  cur_best:  0.09564709290584134 best_act:  965
uuuuu2:  0.09547149702373767
uuuuu2:  0.0951222275100858
uuuuu2:  0.09414856210667992
uuuuu2:  0.09412497757101844
uuuuu2:  0.09531087535971855
uuuuu2:  0.09510171971273945
uuuuu2:  0.09489505502949791
uuuuu1:  [0.03519733]
uuuuu2:  0.09504704931454465
uuuuu2:  0.09427347995712711
uuuuu2:  0.09526018026666659
uuuuu2:  0.09493845921955542
uuuuu2:  0.09515484889821077
uuuuu2:  0.09474838958696742
uuuuu1:  [0.02830961]
uuuuu1:  [0.02982514]
uuuuu2:  0.09573365105215621
in if
in if  cur_best:  0.09573365105215621 best_act:  4029
a:  4029
ChessGame==>getNextState  param action number:  4029 self.n*self.n:  64
selected action:  8 7 8 6
MOVE:  h7h6  by converting:  8 7 8 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  h7h6
MOVE FROM:  55 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
piece moved: PAWN
position:  h7h6
board:  . n b q k b n r
. p p p p p p .
P . . . . . . p
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p .
P . . . . . . p
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  4029 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . P
. P P P P P P .
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0 -1  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  0 -1  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  123
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . P
. P P P P P P .
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002429760352242738
POLICY:  137  :  0.00024218492035288364
POLICY:  324  :  0.0002442535769660026
POLICY:  454  :  0.0002447291917633265
POLICY:  908  :  0.00024237610341515392
POLICY:  909  :  0.00024240011407528073
POLICY:  981  :  0.0002436974027659744
POLICY:  1428  :  0.0002437414659652859
POLICY:  1429  :  0.00024133951228577644
POLICY:  1948  :  0.00024044213932938874
POLICY:  1949  :  0.00024342958931811154
POLICY:  2468  :  0.00024269387358799577
POLICY:  2469  :  0.00024270775611512363
POLICY:  2542  :  0.00024297753407154232
POLICY:  2859  :  0.0002451761974953115
POLICY:  3508  :  0.0002417358773527667
POLICY:  3509  :  0.00024441571440547705
POLICY:  3565  :  0.00024295042385347188
POLICY:  3581  :  0.0002438002557028085
POLICY:  4028  :  0.0002466104051563889
POLICY:  4029  :  0.00024456341634504497
MCTS.py==>search  returning value of canonical board -v:  [-0.01901478]
MCTS.py==>search  returning value of canonical board -v2:  [0.01901478]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01901478]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  124
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09062672]
uuuuu2:  0.21718673787574982
uuuuu1:  [0.09129015]
uuuuu1:  [0.09862544]
uuuuu2:  0.21745862939315266
uuuuu2:  0.2175381306764564
uuuuu1:  [0.08605444]
uuuuu1:  [0.08983973]
uuuuu2:  0.21654689024644153
uuuuu2:  0.21606744177499235
uuuuu1:  [0.08735925]
uuuuu1:  [0.0934696]
uuuuu1:  [0.10100046]
uuuuu1:  [0.07492118]
uuuuu1:  [0.09161417]
uuuuu2:  0.2162950078354752
uuuuu1:  [0.09067572]
uuuuu1:  [0.09778962]
uuuuu1:  [0.1001498]
uuuuu1:  [0.09438121]
uuuuu1:  [0.09530453]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  125
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03879291]
in if
in if  cur_best:  [0.03879291] best_act:  901
uuuuu2:  0.10585384506199216
in if
in if  cur_best:  0.10585384506199216 best_act:  908
uuuuu2:  0.10638013674083263
in if
in if  cur_best:  0.10638013674083263 best_act:  909
uuuuu2:  0.10693670079384957
in if
in if  cur_best:  0.10693670079384957 best_act:  965
uuuuu2:  0.10674037862937315
uuuuu2:  0.10634988344187621
uuuuu2:  0.10526129242719856
uuuuu2:  0.10523492411472014
uuuuu2:  0.1065607981496702
uuuuu2:  0.1063269550274086
uuuuu2:  0.10609589688727032
uuuuu1:  [0.04086564]
uuuuu2:  0.10626583166404832
uuuuu2:  0.1054009548298001
uuuuu2:  0.10650411931257528
uuuuu2:  0.10614442424700878
uuuuu2:  0.10638635526256013
uuuuu2:  0.10593191993754619
uuuuu1:  [0.03399828]
uuuuu1:  [0.03550656]
uuuuu1:  [0.03450196]
a:  965
ChessGame==>getNextState  param action number:  965 self.n*self.n:  64
selected action:  2 8 1 6
MOVE:  b8a6  by converting:  2 8 1 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  b8a6
MOVE FROM:  57 MOVE TO:  40
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  40
position:  b8a6
board:  . . b q k b n r
. p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . . b q k b n r
. p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  965 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
N . . . . . . .
. P P P P P P P
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  0  1  1  1  1  1  1  1  2  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  0  3  5  6  3  2  4  0  1  1  1  1  1  1  1  2  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  126
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
N . . . . . . .
. P P P P P P P
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 5 0 4  at:  324
count:  12
inserting:  5 4 5 3  at:  2859
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  6 6 6 4  at:  3508
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  324  :  0.0002442839031573385
POLICY:  454  :  0.00024456967366859317
POLICY:  908  :  0.00024336566275451332
POLICY:  909  :  0.00024306587874889374
POLICY:  981  :  0.0002441638498567045
POLICY:  1428  :  0.00024340234813280404
POLICY:  1429  :  0.00024195491278078407
POLICY:  1948  :  0.00024086073972284794
POLICY:  1949  :  0.00024317203497048467
POLICY:  2468  :  0.00024233227304648608
POLICY:  2469  :  0.00024299300275743008
POLICY:  2542  :  0.0002427148720016703
POLICY:  2859  :  0.00024535105330869555
POLICY:  3508  :  0.00024190709518734366
POLICY:  3509  :  0.00024422802380286157
POLICY:  3565  :  0.0002432035398669541
POLICY:  3581  :  0.00024409966135863215
POLICY:  4028  :  0.0002464623539708555
POLICY:  4029  :  0.0002448977902531624
MCTS.py==>search  returning value of canonical board -v:  [-0.01449247]
MCTS.py==>search  returning value of canonical board -v2:  [0.01449247]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01449247]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  127
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.0931876]
uuuuu2:  0.22229771333147044
uuuuu1:  [0.09386265]
uuuuu1:  [0.10120387]
uuuuu2:  0.22257600317174353
uuuuu2:  0.2226573753294461
uuuuu1:  [0.08862872]
uuuuu1:  [0.09241293]
uuuuu2:  0.22164280840372494
uuuuu2:  0.22115207724810348
uuuuu1:  [0.08992267]
uuuuu1:  [0.0960302]
uuuuu1:  [0.10356231]
uuuuu1:  [0.07748763]
uuuuu1:  [0.0942039]
uuuuu2:  0.22138499853681554
uuuuu1:  [0.09325645]
uuuuu1:  [0.10035454]
uuuuu1:  [0.10272595]
uuuuu1:  [0.0969855]
uuuuu1:  [0.09788805]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  128
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04394122]
in if
in if  cur_best:  [0.04394122] best_act:  901
uuuuu2:  0.11595707747821987
in if
in if  cur_best:  0.11595707747821987 best_act:  908
uuuuu2:  0.11653360112687626
in if
in if  cur_best:  0.11653360112687626 best_act:  909
uuuuu1:  [0.04407917]
uuuuu2:  0.11692822634390006
in if
in if  cur_best:  0.11692822634390006 best_act:  981
uuuuu2:  0.11650046029832149
uuuuu2:  0.11530796858904872
uuuuu2:  0.11527908354995317
uuuuu2:  0.11673150578465825
uuuuu2:  0.11647534347869802
uuuuu2:  0.11622223196780017
uuuuu1:  [0.04599018]
uuuuu2:  0.116408386188892
uuuuu2:  0.11546096108572917
uuuuu2:  0.11666941722943815
uuuuu2:  0.11627539102697002
uuuuu2:  0.11654041317612523
uuuuu2:  0.11604260421925058
uuuuu1:  [0.03914123]
uuuuu1:  [0.04064296]
uuuuu1:  [0.03960987]
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  2 8 3 6
MOVE:  b8c6  by converting:  2 8 3 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  b8c6
MOVE FROM:  57 MOVE TO:  42
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  42
position:  b8c6
board:  . . b q k b n r
. p p p p p p p
P . n . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . . b q k b n r
. p p p p p p p
P . n . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  981 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . N . . . . .
. P P P P P P P
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  2  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  0  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  2  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  129
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . N . . . . .
. P P P P P P P
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024228569236584008
POLICY:  137  :  0.00024235111777670681
POLICY:  324  :  0.00024360579845961183
POLICY:  454  :  0.00024482375010848045
POLICY:  908  :  0.00024285375548060983
POLICY:  909  :  0.00024224644585046917
POLICY:  981  :  0.00024392243358306587
POLICY:  1428  :  0.00024360051611438394
POLICY:  1429  :  0.00024193539866246283
POLICY:  1948  :  0.00024128721270244569
POLICY:  1949  :  0.0002435404749121517
POLICY:  2468  :  0.00024220345949288458
POLICY:  2469  :  0.00024241767823696136
POLICY:  2542  :  0.00024287852284032851
POLICY:  2859  :  0.0002453873457852751
POLICY:  3508  :  0.00024182388733606786
POLICY:  3509  :  0.00024389338796027005
POLICY:  3565  :  0.00024393099010922015
POLICY:  3581  :  0.00024400446272920817
POLICY:  4028  :  0.00024635097361169755
POLICY:  4029  :  0.0002443674311507493
MCTS.py==>search  returning value of canonical board -v:  [-0.01024133]
MCTS.py==>search  returning value of canonical board -v2:  [0.01024133]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01024133]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  130
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09569091]
uuuuu2:  0.2272937913707533
uuuuu1:  [0.09637733]
uuuuu1:  [0.10372435]
uuuuu2:  0.22757833569623323
uuuuu2:  0.22766153667009417
uuuuu1:  [0.09114514]
uuuuu1:  [0.09492828]
uuuuu2:  0.2266241676405591
uuuuu2:  0.22612240744143985
uuuuu1:  [0.09242846]
uuuuu1:  [0.09853323]
uuuuu1:  [0.10606657]
uuuuu1:  [0.0799964]
uuuuu1:  [0.0967354]
uuuuu2:  0.22636056357003387
uuuuu1:  [0.09577917]
uuuuu1:  [0.10286178]
uuuuu1:  [0.10524418]
uuuuu1:  [0.09953126]
uuuuu1:  [0.10041347]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  131
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04867557]
in if
in if  cur_best:  [0.04867557] best_act:  901
uuuuu2:  0.1252479585469222
in if
in if  cur_best:  0.1252479585469222 best_act:  908
uuuuu2:  0.1258706752591625
in if
in if  cur_best:  0.1258706752591625 best_act:  909
uuuuu1:  [0.04877213]
uuuuu1:  [0.05290713]
uuuuu2:  0.1258348790730969
uuuuu2:  0.12454684081429722
uuuuu2:  0.12451564140622362
uuuuu2:  0.12608443672084457
in if
in if  cur_best:  0.12608443672084457 best_act:  1949
uuuuu2:  0.12580774980723883
uuuuu2:  0.12553435812892028
uuuuu1:  [0.05070268]
uuuuu2:  0.12573542766838866
uuuuu2:  0.12471209159759523
uuuuu2:  0.1260173734163912
uuuuu2:  0.12559177647529546
uuuuu2:  0.1258780331132971
uuuuu2:  0.12534033798548883
uuuuu1:  [0.04387067]
uuuuu1:  [0.04536636]
uuuuu1:  [0.04430708]
a:  1949
ChessGame==>getNextState  param action number:  1949 self.n*self.n:  64
selected action:  4 7 4 6
MOVE:  d7d6  by converting:  4 7 4 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  d7d6
MOVE FROM:  51 MOVE TO:  43
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  43
piece moved: PAWN
position:  d7d6
board:  . n b q k b n r
. p p . p p p p
P . . p . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p . p p p p
P . . p . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  1949 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . P . . . .
. P P . P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  0  1  1  1  1 -1  0  0  1  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  0  1  1  1  1 -1  0  0  1  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  132
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . P . . . .
. P P . P P P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024271391157526523
POLICY:  137  :  0.00024226275854744017
POLICY:  324  :  0.00024347541329916567
POLICY:  454  :  0.00024435375235043466
POLICY:  908  :  0.00024284108076244593
POLICY:  909  :  0.0002425105922156945
POLICY:  981  :  0.00024364689306821674
POLICY:  1428  :  0.0002439159870846197
POLICY:  1429  :  0.0002414145419606939
POLICY:  1948  :  0.0002408696454949677
POLICY:  1949  :  0.00024340898380614817
POLICY:  2468  :  0.00024262595979962498
POLICY:  2469  :  0.0002424341655569151
POLICY:  2542  :  0.0002424886915832758
POLICY:  2859  :  0.0002449416497256607
POLICY:  3508  :  0.00024192803539335728
POLICY:  3509  :  0.000244651164393872
POLICY:  3565  :  0.0002427905856166035
POLICY:  3581  :  0.00024388893507421017
POLICY:  4028  :  0.00024683497031219304
POLICY:  4029  :  0.0002446850994601846
MCTS.py==>search  returning value of canonical board -v:  [-0.01633173]
MCTS.py==>search  returning value of canonical board -v2:  [0.01633173]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01633173]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  133
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09814036]
uuuuu2:  0.2321823891663243
uuuuu1:  [0.09883791]
uuuuu1:  [0.10619059]
uuuuu2:  0.23247305342475044
uuuuu2:  0.232558043871588
uuuuu1:  [0.09360743]
uuuuu1:  [0.09738953]
uuuuu2:  0.23149836327814968
uuuuu2:  0.2309858113024996
uuuuu1:  [0.09488034]
uuuuu1:  [0.10098241]
uuuuu1:  [0.10851695]
uuuuu1:  [0.08245119]
uuuuu1:  [0.09921245]
uuuuu2:  0.23122908965426664
uuuuu1:  [0.09824761]
uuuuu1:  [0.10531509]
uuuuu1:  [0.10770825]
uuuuu1:  [0.10202225]
uuuuu1:  [0.10288458]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  134
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05308221]
in if
in if  cur_best:  [0.05308221] best_act:  901
uuuuu2:  0.1338956997929851
in if
in if  cur_best:  0.1338956997929851 best_act:  908
uuuuu2:  0.134561411960477
in if
in if  cur_best:  0.134561411960477 best_act:  909
uuuuu1:  [0.05314023]
uuuuu1:  [0.05726721]
uuuuu2:  0.13452314422790246
uuuuu2:  0.1331461734091924
uuuuu2:  0.13311281983899767
uuuuu1:  [0.05106323]
uuuuu2:  0.13449414182276087
uuuuu2:  0.13420187382485713
uuuuu1:  [0.05508897]
uuuuu2:  0.13441682620417345
uuuuu2:  0.13332283392747732
uuuuu2:  0.13471823888722578
in if
in if  cur_best:  0.13471823888722578 best_act:  3509
uuuuu2:  0.1342632566191003
uuuuu2:  0.13456927783741224
uuuuu2:  0.13399445756689907
uuuuu1:  [0.04827272]
uuuuu1:  [0.0497628]
uuuuu1:  [0.04867914]
a:  3509
ChessGame==>getNextState  param action number:  3509 self.n*self.n:  64
selected action:  7 7 7 6
MOVE:  g7g6  by converting:  7 7 7 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  g7g6
MOVE FROM:  54 MOVE TO:  46
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  46
piece moved: PAWN
position:  g7g6
board:  . n b q k b n r
. p p p p p . p
P . . . . . p .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p . p
P . . . . . p .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3509 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . P .
. P P P P P . P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  0  1 -1  0  0  0  0  0  1  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  0  1 -1  0  0  0  0  0  1  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  135
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . P .
. P P P P P . P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024285903782583773
POLICY:  137  :  0.00024265507818199694
POLICY:  324  :  0.00024369066522922367
POLICY:  454  :  0.000244444003328681
POLICY:  908  :  0.00024271904840134084
POLICY:  909  :  0.00024286724510602653
POLICY:  981  :  0.000244054026552476
POLICY:  1428  :  0.00024426545132882893
POLICY:  1429  :  0.00024089167709462345
POLICY:  1948  :  0.00024116458371281624
POLICY:  1949  :  0.00024345648125745356
POLICY:  2468  :  0.00024297091295011342
POLICY:  2469  :  0.00024282201775349677
POLICY:  2542  :  0.00024285890685860068
POLICY:  2859  :  0.0002451397303957492
POLICY:  3508  :  0.00024169996322598308
POLICY:  3509  :  0.00024404426221735775
POLICY:  3565  :  0.00024285099061671644
POLICY:  3581  :  0.0002438968076603487
POLICY:  4028  :  0.0002467755984980613
POLICY:  4029  :  0.00024412458878941834
MCTS.py==>search  returning value of canonical board -v:  [-0.0215535]
MCTS.py==>search  returning value of canonical board -v2:  [0.0215535]
MCTS.py==>search  returning value of canonical board -v2:  [-0.0215535]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  324 COUNT:  1
CNT NUM:  454 COUNT:  1
CNT NUM:  981 COUNT:  1
CNT NUM:  1428 COUNT:  1
CNT NUM:  1949 COUNT:  1
CNT NUM:  2468 COUNT:  1
CNT NUM:  2469 COUNT:  1
CNT NUM:  2542 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  3565 COUNT:  1
CNT NUM:  3581 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  136
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.08719262]
uuuuu2:  0.2196283980797127
uuuuu1:  [0.08788706]
uuuuu2:  0.21955547758653834
uuuuu1:  [0.08565934]
uuuuu1:  [0.08945066]
uuuuu1:  [0.08869731]
uuuuu1:  [0.08845115]
uuuuu1:  [0.08713412]
uuuuu1:  [0.09129348]
uuuuu2:  0.22111978218915734
uuuuu1:  [0.09185395]
uuuuu1:  [0.08816038]
uuuuu1:  [0.08723097]
uuuuu1:  [0.09035805]
uuuuu1:  [0.08355852]
uuuuu2:  0.22128583533915772
uuuuu2:  0.22159228467452316
uuuuu2:  0.22127632685743984
uuuuu1:  [0.08677312]
uuuuu1:  [0.08745691]
uuuuu2:  0.22219543582349296
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  137
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04665301]
in if
in if  cur_best:  [0.04665301] best_act:  129
uuuuu2:  0.11711399600971495
in if
in if  cur_best:  0.11711399600971495 best_act:  137
uuuuu2:  0.11799741091850026
in if
in if  cur_best:  0.11799741091850026 best_act:  388
uuuuu1:  [0.04964915]
uuuuu2:  0.11726799468026097
uuuuu2:  0.11754883732619913
uuuuu1:  [0.0526667]
uuuuu2:  0.11797210127784075
uuuuu2:  0.11787693308533301
uuuuu2:  0.1167212599635433
uuuuu2:  0.11658938786254434
uuuuu2:  0.11797583363998587
uuuuu2:  0.11756654844090662
uuuuu2:  0.11741012725606262
uuuuu2:  0.11765144911641892
uuuuu1:  [0.04263983]
uuuuu2:  0.11677990734457071
uuuuu1:  [0.04370466]
uuuuu2:  0.11746840140087553
uuuuu2:  0.11792463689886323
uuuuu2:  0.11729293812689871
uuuuu1:  [0.04747351]
uuuuu1:  [0.04812834]
uuuuu1:  [0.04638768]
a:  388
ChessGame==>getNextState  param action number:  388 self.n*self.n:  64
selected action:  1 7 1 5
MOVE:  a7a5  by converting:  1 7 1 5
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a7a5
MOVE FROM:  48 MOVE TO:  32
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  32
piece moved: PAWN
position:  a7a5
board:  . n b q k b n r
. p p p p . p p
. . . . . . . .
p . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p . p p
. . . . . . . .
p . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  388 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
P . . . . P . .
. . . . . . . .
. P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  138
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
P . . . . P . .
. . . . . . . .
. P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024410555488429964
POLICY:  454  :  0.0002451198233757168
POLICY:  901  :  0.00024697091430425644
POLICY:  908  :  0.00024268418201245368
POLICY:  909  :  0.00024279307399410754
POLICY:  965  :  0.00024433969520032406
POLICY:  981  :  0.0002441227261442691
POLICY:  1428  :  0.0002440263342577964
POLICY:  1429  :  0.00024134264094755054
POLICY:  1948  :  0.00024043823941610754
POLICY:  1949  :  0.00024330664018634707
POLICY:  2468  :  0.0002428214647807181
POLICY:  2469  :  0.00024275777104776353
POLICY:  2988  :  0.00024654000299051404
POLICY:  2989  :  0.0002442779659759253
POLICY:  3508  :  0.00024152507830876857
POLICY:  3509  :  0.0002444172278046608
POLICY:  3565  :  0.00024310532899107784
POLICY:  3581  :  0.000243911927100271
POLICY:  4028  :  0.00024665368255227804
POLICY:  4029  :  0.0002444941201247275
MCTS.py==>search  returning value of canonical board -v:  [-0.00886956]
MCTS.py==>search  returning value of canonical board -v2:  [0.00886956]
MCTS.py==>search  returning value of canonical board -v2:  [-0.00886956]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  139
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.08951929]
uuuuu2:  0.22415729513339872
uuuuu1:  [0.09020996]
uuuuu2:  0.2240828709667032
uuuuu1:  [0.08796668]
uuuuu1:  [0.09175181]
uuuuu1:  [0.09102125]
uuuuu1:  [0.09074289]
uuuuu1:  [0.08943211]
uuuuu1:  [0.09359895]
uuuuu2:  0.22567943266616308
uuuuu1:  [0.09416487]
uuuuu1:  [0.09046189]
uuuuu1:  [0.08952233]
uuuuu1:  [0.09264991]
uuuuu1:  [0.0858501]
uuuuu2:  0.22584890995269757
uuuuu2:  0.22616167849588942
uuuuu2:  0.225839205399182
uuuuu1:  [0.089081]
uuuuu1:  [0.08974832]
uuuuu2:  0.226777267059535
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  140
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05021527]
in if
in if  cur_best:  [0.05021527] best_act:  129
uuuuu2:  0.12421815112548557
in if
in if  cur_best:  0.12421815112548557 best_act:  137
uuuuu1:  [0.05370802]
uuuuu1:  [0.05328346]
uuuuu2:  0.12438149138184076
in if
in if  cur_best:  0.12438149138184076 best_act:  908
uuuuu2:  0.12467936999092463
in if
in if  cur_best:  0.12467936999092463 best_act:  909
uuuuu1:  [0.05626005]
uuuuu2:  0.12512830920658102
in if
in if  cur_best:  0.12512830920658102 best_act:  981
uuuuu2:  0.1250273680951678
uuuuu2:  0.123801591643289
uuuuu2:  0.12366172015799048
uuuuu2:  0.12513226797445504
in if
in if  cur_best:  0.12513226797445504 best_act:  1949
uuuuu2:  0.12469815546489268
uuuuu2:  0.12453224574410604
uuuuu2:  0.1247882062299658
uuuuu1:  [0.04624215]
uuuuu2:  0.12386379658452397
uuuuu1:  [0.04728632]
uuuuu2:  0.12459405480855362
uuuuu2:  0.12507796563022133
uuuuu2:  0.12440794790223633
uuuuu1:  [0.05108894]
uuuuu1:  [0.05174313]
uuuuu1:  [0.04997498]
a:  1949
ChessGame==>getNextState  param action number:  1949 self.n*self.n:  64
selected action:  4 7 4 6
MOVE:  d7d6  by converting:  4 7 4 6
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  d7d6
MOVE FROM:  51 MOVE TO:  43
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  43
piece moved: PAWN
position:  d7d6
board:  . n b q k b n r
p p p . p . p p
. . . p . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p . p . p p
. . . p . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  1949 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . P . . . .
P P P . P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  0  1  0  1  1  0  0  0  1  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  0  1  0  1  1  0  0  0  1  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  141
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . P . . . .
P P P . P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024433236103504896
POLICY:  454  :  0.00024462625151500106
POLICY:  901  :  0.000247311923885718
POLICY:  908  :  0.0002429908054182306
POLICY:  909  :  0.0002431397297186777
POLICY:  965  :  0.00024432502686977386
POLICY:  981  :  0.0002436370705254376
POLICY:  1428  :  0.00024375715292990208
POLICY:  1429  :  0.00024143267364706844
POLICY:  1948  :  0.00024038094852585346
POLICY:  1949  :  0.00024363427655771375
POLICY:  2468  :  0.00024316422059200704
POLICY:  2469  :  0.00024257024051621556
POLICY:  2988  :  0.00024568469962105155
POLICY:  2989  :  0.0002443619887344539
POLICY:  3508  :  0.00024174407008104026
POLICY:  3509  :  0.00024465358001179993
POLICY:  3565  :  0.00024296340416185558
POLICY:  3581  :  0.00024404047871939838
POLICY:  4028  :  0.00024662946816533804
POLICY:  4029  :  0.0002442344557493925
MCTS.py==>search  returning value of canonical board -v:  [-0.01274205]
MCTS.py==>search  returning value of canonical board -v2:  [0.01274205]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01274205]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  142
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.09179986]
uuuuu2:  0.2285964843998754
uuuuu1:  [0.09248685]
uuuuu2:  0.22852058634422273
uuuuu1:  [0.09022832]
uuuuu1:  [0.09400737]
uuuuu1:  [0.09329917]
uuuuu1:  [0.09298922]
uuuuu1:  [0.09168457]
uuuuu1:  [0.09585875]
uuuuu2:  0.2301487661962629
uuuuu1:  [0.09643002]
uuuuu1:  [0.09271783]
uuuuu1:  [0.09176832]
uuuuu1:  [0.09489636]
uuuuu1:  [0.08809629]
uuuuu2:  0.23032159979449293
uuuuu2:  0.23064056237548755
uuuuu2:  0.2303117030529436
uuuuu1:  [0.09134317]
uuuuu1:  [0.09199435]
uuuuu2:  0.23126834199516222
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  143
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05358454]
in if
in if  cur_best:  [0.05358454] best_act:  129
uuuuu2:  0.13093742809718087
in if
in if  cur_best:  0.13093742809718087 best_act:  137
uuuuu1:  [0.057093]
uuuuu1:  [0.05672088]
uuuuu2:  0.1311096038450736
in if
in if  cur_best:  0.1311096038450736 best_act:  908
uuuuu2:  0.13142359546872295
in if
in if  cur_best:  0.13142359546872295 best_act:  909
uuuuu1:  [0.05965874]
uuuuu2:  0.13189681895287086
in if
in if  cur_best:  0.13189681895287086 best_act:  981
uuuuu2:  0.13179041767899932
uuuuu2:  0.1304983358489537
uuuuu2:  0.13035089835786903
uuuuu1:  [0.05320845]
uuuuu2:  0.13144339709694455
uuuuu2:  0.13126851289572844
uuuuu2:  0.13153831893783516
uuuuu1:  [0.04964931]
uuuuu2:  0.1305639056142935
uuuuu1:  [0.05067394]
uuuuu2:  0.1313336653702946
uuuuu2:  0.13184375216391908
uuuuu2:  0.13113749146621118
uuuuu1:  [0.0545085]
uuuuu1:  [0.05516208]
uuuuu1:  [0.05336793]
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  2 8 3 6
MOVE:  b8c6  by converting:  2 8 3 6
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  b8c6
MOVE FROM:  57 MOVE TO:  42
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  42
position:  b8c6
board:  . . b q k b n r
p p p p p . p p
. . n . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . . b q k b n r
p p p p p . p p
. . n . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  981 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . N . . . . .
P P P P P . P P
. . B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  2  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  0  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  2  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  144
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . N . . . . .
P P P P P . P P
. . B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024459781707264483
POLICY:  454  :  0.00024517092970199883
POLICY:  901  :  0.00024695059983059764
POLICY:  908  :  0.00024290673900395632
POLICY:  909  :  0.00024275536998175085
POLICY:  965  :  0.0002450146712362766
POLICY:  981  :  0.0002441474352963269
POLICY:  1428  :  0.00024390287580899894
POLICY:  1429  :  0.00024166869116015732
POLICY:  1948  :  0.00024077190028037876
POLICY:  1949  :  0.00024359663075301796
POLICY:  2468  :  0.00024268031120300293
POLICY:  2469  :  0.0002422651305096224
POLICY:  2988  :  0.00024591904366388917
POLICY:  2989  :  0.00024364265846088529
POLICY:  3508  :  0.00024146365467458963
POLICY:  3509  :  0.00024379545357078314
POLICY:  3565  :  0.00024441591813229024
POLICY:  3581  :  0.0002442559343762696
POLICY:  4028  :  0.00024632952408865094
POLICY:  4029  :  0.0002442828263156116
MCTS.py==>search  returning value of canonical board -v:  [-0.00508808]
MCTS.py==>search  returning value of canonical board -v2:  [0.00508808]
MCTS.py==>search  returning value of canonical board -v2:  [-0.00508808]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  145
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.09403697]
uuuuu2:  0.23295109443495507
uuuuu1:  [0.09472036]
uuuuu2:  0.2328737505721385
uuuuu1:  [0.09244687]
uuuuu1:  [0.09621996]
uuuuu1:  [0.09553367]
uuuuu1:  [0.09519276]
uuuuu1:  [0.09389413]
uuuuu1:  [0.09807549]
uuuuu2:  0.2345329461606683
uuuuu1:  [0.09865201]
uuuuu1:  [0.09493078]
uuuuu1:  [0.0939715]
uuuuu1:  [0.0971]
uuuuu1:  [0.09029968]
uuuuu2:  0.2347090721232723
uuuuu2:  0.23503411072796282
uuuuu2:  0.23469898685542007
uuuuu1:  [0.09356225]
uuuuu1:  [0.09419758]
uuuuu2:  0.23567384912923833
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  146
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05678916]
in if
in if  cur_best:  [0.05678916] best_act:  129
uuuuu2:  0.1373283331449663
in if
in if  cur_best:  0.1373283331449663 best_act:  137
uuuuu1:  [0.06031255]
uuuuu1:  [0.0599903]
uuuuu2:  0.13750891259279652
in if
in if  cur_best:  0.13750891259279652 best_act:  908
uuuuu2:  0.13783822978593124
in if
in if  cur_best:  0.13783822978593124 best_act:  909
uuuuu1:  [0.06289133]
uuuuu1:  [0.0640792]
uuuuu2:  0.13822295616577443
in if
in if  cur_best:  0.13822295616577443 best_act:  1428
uuuuu2:  0.13686780930986273
uuuuu2:  0.13671317556466112
uuuuu1:  [0.05642741]
uuuuu2:  0.13785899790881825
uuuuu2:  0.13767557781117762
uuuuu2:  0.1379585527754289
uuuuu1:  [0.05288996]
uuuuu2:  0.13693657945992357
uuuuu1:  [0.053896]
uuuuu2:  0.13774391030298277
uuuuu2:  0.1382788938454709
in if
in if  cur_best:  0.1382788938454709 best_act:  3581
uuuuu2:  0.13753816137660002
uuuuu1:  [0.05776094]
uuuuu1:  [0.05841395]
uuuuu1:  [0.05659506]
a:  3581
ChessGame==>getNextState  param action number:  3581 self.n*self.n:  64
selected action:  7 8 8 6
MOVE:  g8h6  by converting:  7 8 8 6
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  g8h6
MOVE FROM:  62 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
position:  g8h6
board:  . n b q k b . r
p p p p p . p p
. . . . . . . n
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . r
p p p p p . p p
. . . . . . . n
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3581 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . N
P P P P P . P P
. N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  0  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  2
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  0  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  2
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  147
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . N
P P P P P . P P
. N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.0002442691184114665
POLICY:  454  :  0.00024547684006392956
POLICY:  901  :  0.00024715805193409324
POLICY:  908  :  0.00024261020007543266
POLICY:  909  :  0.0002429415617370978
POLICY:  965  :  0.0002442464174237102
POLICY:  981  :  0.00024406734155490994
POLICY:  1428  :  0.00024411792401224375
POLICY:  1429  :  0.00024128165387082845
POLICY:  1948  :  0.00024023534206207842
POLICY:  1949  :  0.00024374631175305694
POLICY:  2468  :  0.00024346684222109616
POLICY:  2469  :  0.00024282149388454854
POLICY:  2988  :  0.00024654847220517695
POLICY:  2989  :  0.00024336301430594176
POLICY:  3508  :  0.00024164552451111376
POLICY:  3509  :  0.00024446684983558953
POLICY:  3565  :  0.0002432374603813514
POLICY:  3581  :  0.00024404456780757755
POLICY:  4028  :  0.0002464948338456452
POLICY:  4029  :  0.00024423497961834073
MCTS.py==>search  returning value of canonical board -v:  [-0.01215073]
MCTS.py==>search  returning value of canonical board -v2:  [0.01215073]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01215073]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  148
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.09623304]
uuuuu2:  0.23722578299355285
uuuuu1:  [0.09691288]
uuuuu2:  0.23714701985890901
uuuuu1:  [0.0946247]
uuuuu1:  [0.09839195]
uuuuu1:  [0.09772716]
uuuuu1:  [0.09735585]
uuuuu1:  [0.09606313]
uuuuu1:  [0.10025156]
uuuuu2:  0.2388366619427256
uuuuu1:  [0.10083321]
uuuuu1:  [0.09710311]
uuuuu1:  [0.09613425]
uuuuu1:  [0.09926322]
uuuuu1:  [0.09246263]
uuuuu2:  0.23901601984394333
uuuuu2:  0.23934702295722712
uuuuu2:  0.23900574950986847
uuuuu1:  [0.09574059]
uuuuu1:  [0.09636038]
uuuuu2:  0.23999850065696382
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  149
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05985113]
in if
in if  cur_best:  [0.05985113] best_act:  129
uuuuu2:  0.1434347659810734
in if
in if  cur_best:  0.1434347659810734 best_act:  137
uuuuu1:  [0.0633888]
uuuuu1:  [0.0631142]
uuuuu2:  0.14362337506302575
in if
in if  cur_best:  0.14362337506302575 best_act:  908
uuuuu2:  0.14396733565330655
in if
in if  cur_best:  0.14396733565330655 best_act:  909
uuuuu1:  [0.06598002]
uuuuu1:  [0.06715479]
uuuuu2:  0.14436916925163112
in if
in if  cur_best:  0.14436916925163112 best_act:  1428
uuuuu2:  0.14295376452271405
uuuuu2:  0.14279225484333594
uuuuu1:  [0.0595031]
uuuuu2:  0.14398902725021118
uuuuu2:  0.1437974512062965
uuuuu2:  0.14409300891712257
uuuuu1:  [0.05598637]
uuuuu2:  0.1430255926018479
uuuuu1:  [0.05697464]
uuuuu2:  0.14386882216629082
uuuuu1:  [0.06006307]
uuuuu2:  0.14365392442137015
uuuuu1:  [0.06086861]
uuuuu1:  [0.06152106]
uuuuu1:  [0.05967855]
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  3 7 3 5
MOVE:  c7c5  by converting:  3 7 3 5
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  c7c5
MOVE FROM:  50 MOVE TO:  34
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  34
piece moved: PAWN
position:  c7c5
board:  . n b q k b n r
p p . p p . p p
. . . . . . . .
. . p . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p . p p . p p
. . . . . . . .
. . p . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  1428 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . P . . P . .
. . . . . . . .
P P . P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  0  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  0  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  150
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . P . . P . .
. . . . . . . .
P P . P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.0002442503464408219
POLICY:  454  :  0.00024542046594433486
POLICY:  901  :  0.0002470581093803048
POLICY:  908  :  0.00024249112175311893
POLICY:  909  :  0.00024285439576487988
POLICY:  965  :  0.0002440718817524612
POLICY:  981  :  0.0002438915107632056
POLICY:  1428  :  0.0002440030948491767
POLICY:  1429  :  0.0002409052540315315
POLICY:  1948  :  0.0002405885315965861
POLICY:  1949  :  0.00024344197299797088
POLICY:  2468  :  0.0002432227338431403
POLICY:  2469  :  0.0002428392181172967
POLICY:  2988  :  0.00024625626974739134
POLICY:  2989  :  0.000244047972955741
POLICY:  3508  :  0.00024172311532311141
POLICY:  3509  :  0.00024407135788351297
POLICY:  3565  :  0.00024319946533069015
POLICY:  3581  :  0.0002442609111312777
POLICY:  4028  :  0.0002464601129759103
POLICY:  4029  :  0.0002443389967083931
MCTS.py==>search  returning value of canonical board -v:  [-0.01040918]
MCTS.py==>search  returning value of canonical board -v2:  [0.01040918]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01040918]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  514 COUNT:  1
CNT NUM:  530 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  587 COUNT:  1
CNT NUM:  1106 COUNT:  1
CNT NUM:  1107 COUNT:  1
CNT NUM:  1627 COUNT:  1
CNT NUM:  2089 COUNT:  1
CNT NUM:  2146 COUNT:  1
CNT NUM:  2147 COUNT:  1
CNT NUM:  2796 COUNT:  1
CNT NUM:  3187 COUNT:  1
CNT NUM:  3706 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  151
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10053928]
uuuuu2:  0.23697015863241813
uuuuu1:  [0.10124774]
uuuuu1:  [0.10860597]
uuuuu2:  0.23726681659892168
uuuuu2:  0.23735355961048965
uuuuu1:  [0.09601893]
uuuuu1:  [0.09980001]
uuuuu2:  0.23627202763371735
uuuuu2:  0.2357489064641348
uuuuu1:  [0.09728166]
uuuuu1:  [0.10338108]
uuuuu1:  [0.1109168]
uuuuu1:  [0.08485536]
uuuuu1:  [0.10163841]
uuuuu2:  0.2359972013921742
uuuuu1:  [0.10066514]
uuuuu1:  [0.1077178]
uuuuu1:  [0.1101215]
uuuuu1:  [0.10446186]
uuuuu1:  [0.10530471]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  152
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05722101]
in if
in if  cur_best:  [0.05722101] best_act:  901
uuuuu2:  0.14201783594300693
in if
in if  cur_best:  0.14201783594300693 best_act:  908
uuuuu2:  0.1427239303249348
in if
in if  cur_best:  0.1427239303249348 best_act:  909
uuuuu1:  [0.05724285]
uuuuu1:  [0.06136229]
uuuuu2:  0.1426833412651287
uuuuu2:  0.14122284316001987
uuuuu2:  0.14118746635652765
uuuuu1:  [0.05515143]
uuuuu2:  0.14265257956910918
uuuuu2:  0.14234258254424687
uuuuu1:  [0.05920866]
uuuuu2:  0.14257057397181697
uuuuu2:  0.14141021993569067
uuuuu1:  [0.04989164]
uuuuu2:  0.14240768882933313
uuuuu2:  0.14273227334731614
in if
in if  cur_best:  0.14273227334731614 best_act:  3581
uuuuu2:  0.14212258438045114
uuuuu1:  [0.05240722]
uuuuu1:  [0.05389202]
uuuuu1:  [0.05278546]
a:  3581
ChessGame==>getNextState  param action number:  3581 self.n*self.n:  64
selected action:  7 8 8 6
MOVE:  g8h6  by converting:  7 8 8 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  g8h6
MOVE FROM:  62 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
position:  g8h6
board:  . n b q k b . r
. p p p p p p p
P . . . . . . n
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . r
. p p p p p p p
P . . . . . . n
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3581 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . N
. P P P P P P P
. N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  0  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  2
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  0  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  2
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  153
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . N
. P P P P P P P
. N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024292549642268568
POLICY:  137  :  0.00024248319095931947
POLICY:  324  :  0.0002442221448291093
POLICY:  454  :  0.0002450091124046594
POLICY:  908  :  0.00024238781770691276
POLICY:  909  :  0.00024255350581370294
POLICY:  981  :  0.00024365037097595632
POLICY:  1428  :  0.00024378078524023294
POLICY:  1429  :  0.00024151480465661734
POLICY:  1948  :  0.0002404031838523224
POLICY:  1949  :  0.00024364166893064976
POLICY:  2468  :  0.0002430008607916534
POLICY:  2469  :  0.0002427250292384997
POLICY:  2542  :  0.00024331652093678713
POLICY:  2859  :  0.0002454865607433021
POLICY:  3508  :  0.00024176138686016202
POLICY:  3509  :  0.0002442628610879183
POLICY:  3565  :  0.0002430710883345455
POLICY:  3581  :  0.00024360643874388188
POLICY:  4028  :  0.00024674212909303606
POLICY:  4029  :  0.0002444152196403593
MCTS.py==>search  returning value of canonical board -v:  [-0.01447868]
MCTS.py==>search  returning value of canonical board -v2:  [0.01447868]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01447868]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  154
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.1028907]
uuuuu2:  0.24166309260117555
uuuuu1:  [0.10360985]
uuuuu1:  [0.11097351]
uuuuu2:  0.2419656255531884
uuuuu2:  0.242054086414919
uuuuu1:  [0.09838266]
uuuuu1:  [0.10216274]
uuuuu2:  0.24095113588409167
uuuuu2:  0.2404176548737567
uuuuu1:  [0.09963541]
uuuuu1:  [0.10573223]
uuuuu1:  [0.11326911]
uuuuu1:  [0.0872119]
uuuuu1:  [0.10401631]
uuuuu2:  0.2406708670103965
uuuuu1:  [0.10303479]
uuuuu1:  [0.11007292]
uuuuu1:  [0.11248694]
uuuuu1:  [0.10685313]
uuuuu1:  [0.10767691]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  155
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06113559]
in if
in if  cur_best:  [0.06113559] best_act:  901
uuuuu2:  0.14969994331600958
in if
in if  cur_best:  0.14969994331600958 best_act:  908
uuuuu2:  0.1504442321459899
in if
in if  cur_best:  0.1504442321459899 best_act:  909
uuuuu1:  [0.06112319]
uuuuu1:  [0.06523552]
uuuuu2:  0.1504014475202992
uuuuu2:  0.14886194734346456
uuuuu2:  0.1488246569183407
uuuuu1:  [0.05901813]
uuuuu2:  0.1503690218455954
uuuuu2:  0.15004225629011514
uuuuu1:  [0.06310517]
uuuuu2:  0.1502825803561534
uuuuu2:  0.14905945980737725
uuuuu1:  [0.05375628]
uuuuu2:  0.1501108843404034
uuuuu1:  [0.06074784]
uuuuu2:  0.1498103578638987
uuuuu1:  [0.05631772]
uuuuu1:  [0.05779754]
uuuuu1:  [0.05666932]
a:  909
ChessGame==>getNextState  param action number:  909 self.n*self.n:  64
selected action:  2 7 2 6
MOVE:  b7b6  by converting:  2 7 2 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  b7b6
MOVE FROM:  49 MOVE TO:  41
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  41
piece moved: PAWN
position:  b7b6
board:  . n b q k b n r
. . p p p p p p
P p . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. . p p p p p p
P p . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  909 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p P . . . . . .
. . P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  0  1  1  1  1  1  1 -1  1  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  0  1  1  1  1  1  1 -1  1  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  156
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p P . . . . . .
. . P P P P P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 5 0 4  at:  324
count:  12
inserting:  5 4 5 3  at:  2859
count:  13
inserting:  0 2 0 1  at:  129
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024297375057358295
POLICY:  324  :  0.00024372244661208242
POLICY:  454  :  0.0002444788406137377
POLICY:  908  :  0.00024271247093565762
POLICY:  909  :  0.00024241770734079182
POLICY:  981  :  0.0002439837553538382
POLICY:  1428  :  0.0002436681679682806
POLICY:  1429  :  0.000241383197135292
POLICY:  1948  :  0.00024063354067038745
POLICY:  1949  :  0.00024342721735592932
POLICY:  2468  :  0.0002424922859063372
POLICY:  2469  :  0.0002430212334729731
POLICY:  2542  :  0.00024347196449525654
POLICY:  2859  :  0.0002453937486279756
POLICY:  3508  :  0.00024191899865400046
POLICY:  3509  :  0.00024393615603912622
POLICY:  3565  :  0.00024291808949783444
POLICY:  3581  :  0.00024365996068809181
POLICY:  4028  :  0.00024670574930496514
POLICY:  4029  :  0.00024481950094923377
MCTS.py==>search  returning value of canonical board -v:  [-0.01603239]
MCTS.py==>search  returning value of canonical board -v2:  [0.01603239]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01603239]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  157
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10519731]
uuuuu2:  0.2462666127774029
uuuuu1:  [0.10592693]
uuuuu1:  [0.11329594]
uuuuu2:  0.24657490877967542
uuuuu2:  0.24666505476161776
uuuuu1:  [0.10070135]
uuuuu1:  [0.10448045]
uuuuu2:  0.24554109376134972
uuuuu2:  0.24499745029481063
uuuuu1:  [0.10194431]
uuuuu1:  [0.1080386]
uuuuu1:  [0.1155766]
uuuuu1:  [0.08952355]
uuuuu1:  [0.10634891]
uuuuu2:  0.2452554859531862
uuuuu1:  [0.10535928]
uuuuu1:  [0.11238316]
uuuuu1:  [0.11480731]
uuuuu1:  [0.10919887]
uuuuu1:  [0.1100039]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  158
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06485886]
in if
in if  cur_best:  [0.06485886] best_act:  901
uuuuu2:  0.15700662512040098
in if
in if  cur_best:  0.15700662512040098 best_act:  908
uuuuu1:  [0.06286123]
uuuuu1:  [0.0648139]
uuuuu1:  [0.06891946]
uuuuu2:  0.15774236893688848
in if
in if  cur_best:  0.15774236893688848 best_act:  1428
uuuuu2:  0.1561277275296648
uuuuu2:  0.15608861700184287
uuuuu1:  [0.06269587]
uuuuu2:  0.15770836060235124
uuuuu2:  0.1573656459964863
uuuuu1:  [0.06681125]
uuuuu2:  0.1576177000033755
uuuuu2:  0.15633488034944035
uuuuu1:  [0.05743207]
uuuuu2:  0.15743762370286132
uuuuu1:  [0.06441956]
uuuuu2:  0.1571224288751938
uuuuu1:  [0.06003712]
uuuuu1:  [0.06151219]
uuuuu1:  [0.06036337]
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  3 7 3 5
MOVE:  c7c5  by converting:  3 7 3 5
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  c7c5
MOVE FROM:  50 MOVE TO:  34
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  34
piece moved: PAWN
position:  c7c5
board:  . n b q k b n r
. p . p p p p p
P . . . . . . .
. . p . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p . p p p p p
P . . . . . . .
. . p . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  1428 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . P . . . . .
p . . . . . . .
. P . P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  0  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  1  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  0  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  1  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  159
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . P . . . . .
p . . . . . . .
. P . P P P P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002428192674415186
POLICY:  137  :  0.00024210532137658447
POLICY:  324  :  0.00024424679577350616
POLICY:  454  :  0.00024476961698383093
POLICY:  908  :  0.00024217773170676082
POLICY:  909  :  0.00024266941181849688
POLICY:  981  :  0.0002439911913825199
POLICY:  1428  :  0.00024365380522795022
POLICY:  1429  :  0.00024116608256008476
POLICY:  1948  :  0.00024080243019852787
POLICY:  1949  :  0.00024341323296539485
POLICY:  2468  :  0.0002425440470688045
POLICY:  2469  :  0.00024285698600579053
POLICY:  2542  :  0.00024342819233424962
POLICY:  2859  :  0.0002452190383337438
POLICY:  3508  :  0.0002417932846583426
POLICY:  3509  :  0.0002442703116685152
POLICY:  3565  :  0.00024308159481734037
POLICY:  3581  :  0.00024381278490182012
POLICY:  4028  :  0.0002463136916048825
POLICY:  4029  :  0.0002444942365400493
MCTS.py==>search  returning value of canonical board -v:  [-0.01735605]
MCTS.py==>search  returning value of canonical board -v2:  [0.01735605]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01735605]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  160
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10746159]
uuuuu2:  0.25078564315396173
uuuuu1:  [0.1082015]
uuuuu1:  [0.11557575]
uuuuu2:  0.2510995964354875
uuuuu2:  0.2511913966101202
uuuuu1:  [0.1029775]
uuuuu1:  [0.10675564]
uuuuu2:  0.25004681075191876
uuuuu2:  0.2494931913438113
uuuuu1:  [0.10421083]
uuuuu1:  [0.11030262]
uuuuu1:  [0.11784174]
uuuuu1:  [0.09179276]
uuuuu1:  [0.1086387]
uuuuu2:  0.24975596199636765
uuuuu1:  [0.10764111]
uuuuu1:  [0.11465101]
uuuuu1:  [0.1170851]
uuuuu1:  [0.11150153]
uuuuu1:  [0.1122882]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  161
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06841639]
in if
in if  cur_best:  [0.06841639] best_act:  901
uuuuu2:  0.16398807162284632
in if
in if  cur_best:  0.16398807162284632 best_act:  908
uuuuu1:  [0.06636931]
uuuuu1:  [0.06834034]
uuuuu1:  [0.07243941]
uuuuu1:  [0.06502222]
uuuuu2:  0.16307009302832354
uuuuu2:  0.16302924341428493
uuuuu1:  [0.0662099]
uuuuu2:  0.16472101042963938
in if
in if  cur_best:  0.16472101042963938 best_act:  2468
uuuuu2:  0.1643630566981349
uuuuu1:  [0.07035236]
uuuuu2:  0.16462631852229595
uuuuu2:  0.16328645709207038
uuuuu1:  [0.06094424]
uuuuu2:  0.16443823496057589
uuuuu1:  [0.06792784]
uuuuu2:  0.16410902469995753
uuuuu1:  [0.06359096]
uuuuu1:  [0.06506149]
uuuuu1:  [0.063893]
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  5 7 5 5
MOVE:  e7e5  by converting:  5 7 5 5
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  e7e5
MOVE FROM:  52 MOVE TO:  36
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  36
piece moved: PAWN
position:  e7e5
board:  . n b q k b n r
. p p p . p p p
P . . . . . . .
. . . . p . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p . p p p
P . . . . . . .
. . . . p . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2468 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . P . . .
p . . . . . . .
. P P P . P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  0  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  1  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  0  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  1  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  162
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . P . . .
p . . . . . . .
. P P P . P P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [6, 5, 5, 4], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  5 4 4 3  at:  2851
count:  6
inserting:  0 2 1 1  at:  137
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  0 5 0 4  at:  324
count:  14
inserting:  5 4 5 3  at:  2859
count:  15
inserting:  0 2 0 1  at:  129
count:  16
inserting:  7 6 7 4  at:  4028
count:  17
inserting:  6 6 6 4  at:  3508
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002428244479233399
POLICY:  137  :  0.00024313190078828484
POLICY:  324  :  0.00024387090525124222
POLICY:  454  :  0.00024472535005770624
POLICY:  908  :  0.00024264748208224773
POLICY:  909  :  0.00024278655473608524
POLICY:  981  :  0.00024371108156628907
POLICY:  1428  :  0.0002441780234221369
POLICY:  1429  :  0.00024170184042304754
POLICY:  1948  :  0.0002406260755378753
POLICY:  1949  :  0.00024335886701010168
POLICY:  2468  :  0.00024215664598159492
POLICY:  2469  :  0.0002431418397463858
POLICY:  2542  :  0.00024290310102514923
POLICY:  2851  :  0.0002436656941426918
POLICY:  2859  :  0.00024478143313899636
POLICY:  3508  :  0.00024204292276408523
POLICY:  3509  :  0.00024414382642135024
POLICY:  3565  :  0.00024316567578352988
POLICY:  3581  :  0.00024414865765720606
POLICY:  4028  :  0.0002465162833686918
POLICY:  4029  :  0.00024458070402033627
MCTS.py==>search  returning value of canonical board -v:  [-0.01372735]
MCTS.py==>search  returning value of canonical board -v2:  [0.01372735]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01372735]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  163
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10968578]
uuuuu2:  0.25522467172167573
uuuuu1:  [0.1104358]
uuuuu1:  [0.1178152]
uuuuu2:  0.25554418212986996
uuuuu2:  0.2556376072125021
uuuuu1:  [0.10521334]
uuuuu1:  [0.10899054]
uuuuu2:  0.25447276162468113
uuuuu2:  0.2539093428822205
uuuuu1:  [0.10643724]
uuuuu1:  [0.11252657]
uuuuu1:  [0.12006678]
uuuuu1:  [0.09402181]
uuuuu1:  [0.11088795]
uuuuu2:  0.25417676470387407
uuuuu1:  [0.10988256]
uuuuu1:  [0.1168787]
uuuuu1:  [0.11932255]
uuuuu1:  [0.11376344]
uuuuu1:  [0.11453205]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  164
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07182854]
in if
in if  cur_best:  [0.07182854] best_act:  901
uuuuu2:  0.17068419650764807
in if
in if  cur_best:  0.17068419650764807 best_act:  908
uuuuu1:  [0.06973401]
uuuuu1:  [0.07172265]
uuuuu1:  [0.07581551]
uuuuu1:  [0.06838597]
uuuuu2:  0.16972873409342018
uuuuu2:  0.16968621646710244
uuuuu1:  [0.06958033]
uuuuu1:  [0.07199618]
uuuuu2:  0.17107449334841582
in if
in if  cur_best:  0.17107449334841582 best_act:  2469
uuuuu1:  [0.07374876]
uuuuu2:  0.17134850494257256
in if
in if  cur_best:  0.17134850494257256 best_act:  2989
uuuuu2:  0.16995393295092423
uuuuu1:  [0.06431287]
uuuuu2:  0.17115274136482697
uuuuu1:  [0.07129274]
uuuuu2:  0.17081008846172466
uuuuu1:  [0.06699955]
uuuuu1:  [0.06846575]
uuuuu1:  [0.06727837]
a:  2989
ChessGame==>getNextState  param action number:  2989 self.n*self.n:  64
selected action:  6 7 6 6
MOVE:  f7f6  by converting:  6 7 6 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  f7f6
MOVE FROM:  53 MOVE TO:  45
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  45
piece moved: PAWN
position:  f7f6
board:  . n b q k b n r
. p p p p . p p
P . . . . p . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p . p p
P . . . . p . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2989 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . P . .
. P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1 -1  0  0  0  0  1  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  0  1  1 -1  0  0  0  0  1  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  165
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . P . .
. P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024274573661386967
POLICY:  137  :  0.00024256242613773793
POLICY:  324  :  0.00024392736668232828
POLICY:  454  :  0.000244797149207443
POLICY:  908  :  0.00024249897978734225
POLICY:  909  :  0.00024259809288196266
POLICY:  981  :  0.00024396172375418246
POLICY:  1428  :  0.0002441662654746324
POLICY:  1429  :  0.00024105921329464763
POLICY:  1948  :  0.0002407745341770351
POLICY:  1949  :  0.00024348626902792603
POLICY:  2468  :  0.00024287711130455136
POLICY:  2469  :  0.00024257424229290336
POLICY:  2542  :  0.00024312548339366913
POLICY:  2859  :  0.00024510876392014325
POLICY:  3508  :  0.0002420800010440871
POLICY:  3509  :  0.00024383020354434848
POLICY:  3565  :  0.0002429636660963297
POLICY:  3581  :  0.00024394811771344393
POLICY:  4028  :  0.00024616136215627193
POLICY:  4029  :  0.000244810275034979
MCTS.py==>search  returning value of canonical board -v:  [-0.01185365]
MCTS.py==>search  returning value of canonical board -v2:  [0.01185365]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01185365]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  324 COUNT:  1
CNT NUM:  454 COUNT:  1
CNT NUM:  981 COUNT:  1
CNT NUM:  1428 COUNT:  1
CNT NUM:  1949 COUNT:  1
CNT NUM:  2468 COUNT:  1
CNT NUM:  2469 COUNT:  1
CNT NUM:  2542 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  3565 COUNT:  1
CNT NUM:  3581 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  166
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.09839022]
uuuuu2:  0.24142479540296824
uuuuu1:  [0.09906658]
uuuuu2:  0.2413446381223104
uuuuu1:  [0.09676397]
uuuuu1:  [0.10052548]
uuuuu1:  [0.09988183]
uuuuu1:  [0.09948065]
uuuuu1:  [0.09819373]
uuuuu1:  [0.10238908]
uuuuu2:  0.24306418769758048
uuuuu1:  [0.1029758]
uuuuu1:  [0.09923699]
uuuuu1:  [0.09825871]
uuuuu1:  [0.10138813]
uuuuu1:  [0.0945873]
uuuuu2:  0.24324672032139133
uuuuu2:  0.24358358235170638
uuuuu2:  0.24323626819737912
uuuuu1:  [0.09788036]
uuuuu1:  [0.09848488]
uuuuu2:  0.24424659152543013
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  167
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06278796]
in if
in if  cur_best:  [0.06278796] best_act:  129
uuuuu2:  0.149291637742091
in if
in if  cur_best:  0.149291637742091 best_act:  137
uuuuu1:  [0.06633933]
uuuuu1:  [0.06611042]
uuuuu2:  0.14948794829863638
in if
in if  cur_best:  0.14948794829863638 best_act:  908
uuuuu2:  0.14984595383160831
in if
in if  cur_best:  0.14984595383160831 best_act:  909
uuuuu1:  [0.06894249]
uuuuu1:  [0.07010468]
uuuuu1:  [0.06472292]
uuuuu2:  0.14879099555131087
uuuuu2:  0.14862289094723782
uuuuu1:  [0.06245308]
uuuuu2:  0.14986853116148355
in if
in if  cur_best:  0.14986853116148355 best_act:  2468
uuuuu2:  0.14966913249301883
uuuuu2:  0.14997675871177216
in if
in if  cur_best:  0.14997675871177216 best_act:  2542
uuuuu1:  [0.05895622]
uuuuu2:  0.14886575658638082
uuuuu1:  [0.05992747]
uuuuu2:  0.14974341774340355
uuuuu1:  [0.06301177]
uuuuu2:  0.1495197450789219
uuuuu1:  [0.06384927]
uuuuu1:  [0.0645012]
uuuuu1:  [0.06263603]
a:  2542
ChessGame==>getNextState  param action number:  2542 self.n*self.n:  64
selected action:  5 8 6 7
MOVE:  e8f7  by converting:  5 8 6 7
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  e8f7
MOVE FROM:  60 MOVE TO:  53
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  53
position:  e8f7
board:  . n b q . b n r
p p p p p k p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q . b n r
p p p p p k p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2542 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P K P P
. N B Q . B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  0  3  2  4  1  1  1  1  1  6  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  0  3  2  4  1  1  1  1  1  6  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  168
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P K P P
. N B Q . B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.0002455103676766157
POLICY:  454  :  0.0002450504107400775
POLICY:  901  :  0.00024465625756420195
POLICY:  908  :  0.00024278867931570858
POLICY:  909  :  0.0002423019177513197
POLICY:  965  :  0.00024407599994447082
POLICY:  981  :  0.00024277660122606903
POLICY:  1428  :  0.00024433163343928754
POLICY:  1429  :  0.00024110163212753832
POLICY:  1948  :  0.0002406054554739967
POLICY:  1949  :  0.00024385121650993824
POLICY:  2468  :  0.00024222966749221087
POLICY:  2469  :  0.00024348324222955853
POLICY:  2988  :  0.0002449612074997276
POLICY:  2989  :  0.0002423302794340998
POLICY:  3508  :  0.0002432713081361726
POLICY:  3509  :  0.0002452773624099791
POLICY:  3565  :  0.00024318587384186685
POLICY:  3581  :  0.00024227525864262134
POLICY:  4028  :  0.0002466954756528139
POLICY:  4029  :  0.00024296061019413173
MCTS.py==>search  returning value of canonical board -v:  [-0.02362489]
MCTS.py==>search  returning value of canonical board -v2:  [0.02362489]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02362489]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  169
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.10051051]
uuuuu2:  0.24555201394781095
uuuuu1:  [0.10118347]
uuuuu2:  0.24547048635796562
uuuuu1:  [0.09886666]
uuuuu1:  [0.10262253]
uuuuu1:  [0.10199966]
uuuuu1:  [0.10156912]
uuuuu1:  [0.10028791]
uuuuu1:  [0.10449007]
uuuuu2:  0.24721943207245156
uuuuu1:  [0.10508175]
uuuuu1:  [0.10133439]
uuuuu1:  [0.10034686]
uuuuu1:  [0.1034767]
uuuuu1:  [0.09667563]
uuuuu2:  0.24740508513809098
uuuuu2:  0.24774770591085934
uuuuu2:  0.24739445433234897
uuuuu1:  [0.09998355]
uuuuu1:  [0.10057306]
uuuuu2:  0.24842204939576115
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  170
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06561385]
in if
in if  cur_best:  [0.06561385] best_act:  129
uuuuu2:  0.15492725424335826
in if
in if  cur_best:  0.15492725424335826 best_act:  137
uuuuu1:  [0.06917839]
uuuuu1:  [0.06899346]
uuuuu2:  0.15513097533560793
in if
in if  cur_best:  0.15513097533560793 best_act:  908
uuuuu2:  0.1555024952349548
in if
in if  cur_best:  0.1555024952349548 best_act:  909
uuuuu1:  [0.07179305]
uuuuu1:  [0.07294314]
uuuuu1:  [0.06755909]
uuuuu2:  0.15440771328882777
uuuuu2:  0.15423326289677236
uuuuu1:  [0.06529163]
uuuuu2:  0.1555259248374337
in if
in if  cur_best:  0.1555259248374337 best_act:  2468
uuuuu2:  0.15531899905999402
uuuuu1:  [0.05419423]
uuuuu1:  [0.06181389]
uuuuu2:  0.15448529648144965
uuuuu1:  [0.06276874]
uuuuu2:  0.155396088507514
uuuuu1:  [0.06584908]
uuuuu2:  0.15516397241393007
uuuuu1:  [0.06671733]
uuuuu1:  [0.06736876]
uuuuu1:  [0.06548177]
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  5 7 5 5
MOVE:  e7e5  by converting:  5 7 5 5
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  e7e5
MOVE FROM:  52 MOVE TO:  36
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  36
piece moved: PAWN
position:  e7e5
board:  . n b q k b n r
p p p p . . p p
. . . . . . . .
. . . . p p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p . . p p
. . . . . . . .
. . . . p p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2468 next_s:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . P P . .
. . . . . . . .
P P P P . . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  0  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  0  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  1  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  171
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . P P . .
. . . . . . . .
P P P P . . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [1, 8, 1, 7], [1, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 7 0 5  at:  453
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  453  :  0.00024425447918474674
POLICY:  454  :  0.00024528143694624305
POLICY:  901  :  0.00024683543597348034
POLICY:  908  :  0.00024282012600451708
POLICY:  909  :  0.00024326593847945333
POLICY:  965  :  0.0002448149025440216
POLICY:  981  :  0.000243835907895118
POLICY:  1428  :  0.0002445248537696898
POLICY:  1429  :  0.00024127474171109498
POLICY:  1948  :  0.00024028000188991427
POLICY:  1949  :  0.00024349869636353105
POLICY:  2468  :  0.00024259526981040835
POLICY:  2469  :  0.00024316883354913443
POLICY:  2988  :  0.0002461926487740129
POLICY:  2989  :  0.00024394315551035106
POLICY:  3508  :  0.00024221010971814394
POLICY:  3509  :  0.00024398209643550217
POLICY:  3565  :  0.0002431350585538894
POLICY:  3581  :  0.00024425596348010004
POLICY:  4028  :  0.0002469608443789184
POLICY:  4029  :  0.00024406866577919573
MCTS.py==>search  returning value of canonical board -v:  [-0.01433588]
MCTS.py==>search  returning value of canonical board -v2:  [0.01433588]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01433588]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  172
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.10259576]
uuuuu2:  0.24961099990242178
uuuuu1:  [0.10326534]
uuuuu2:  0.24952812465780963
uuuuu1:  [0.1009346]
uuuuu1:  [0.10468492]
uuuuu1:  [0.10408247]
uuuuu1:  [0.10362307]
uuuuu1:  [0.10234745]
uuuuu1:  [0.10655633]
uuuuu2:  0.25130598052447206
uuuuu1:  [0.10715289]
uuuuu1:  [0.10339709]
uuuuu1:  [0.10240047]
uuuuu1:  [0.10553075]
uuuuu1:  [0.09872943]
uuuuu2:  0.25149470244372724
uuuuu2:  0.2518429867534468
uuuuu2:  0.251483895910283
uuuuu1:  [0.10205197]
uuuuu1:  [0.10262673]
uuuuu2:  0.2525284771668131
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  173
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.0683405]
uuuuu2:  0.16036494353522723
uuuuu1:  [0.07191774]
uuuuu1:  [0.07177525]
uuuuu2:  0.16057581489943687
uuuuu2:  0.1609603745301613
uuuuu1:  [0.07454349]
uuuuu1:  [0.0756819]
uuuuu1:  [0.07029564]
uuuuu2:  0.1598271675561432
uuuuu2:  0.1596465942450864
uuuuu1:  [0.06803048]
uuuuu1:  [0.06615643]
uuuuu2:  0.16077043794424406
uuuuu1:  [0.05692555]
uuuuu1:  [0.06457119]
uuuuu2:  0.15990747378996148
uuuuu1:  [0.06551024]
uuuuu2:  0.16085023310332744
uuuuu1:  [0.06858674]
uuuuu2:  0.16060997012040043
uuuuu1:  [0.06948467]
uuuuu1:  [0.07013561]
uuuuu1:  [0.06822757]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  174
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  1 6 0 5  at:  901
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  5 6 5 5  at:  2989
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  7 6 7 4  at:  4028
count:  13
inserting:  6 6 6 4  at:  3508
count:  14
inserting:  5 6 5 4  at:  2988
count:  15
inserting:  4 6 4 4  at:  2468
count:  16
inserting:  3 6 3 4  at:  1948
count:  17
inserting:  2 6 2 4  at:  1428
count:  18
inserting:  1 6 1 4  at:  908
count:  19
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.00024693808518350124
POLICY:  908  :  0.00024286643019877374
POLICY:  909  :  0.00024284457322210073
POLICY:  965  :  0.000244305090745911
POLICY:  981  :  0.0002441522083245218
POLICY:  1428  :  0.00024408719036728144
POLICY:  1429  :  0.0002412028261460364
POLICY:  1948  :  0.00024031604698393494
POLICY:  1949  :  0.00024343220866285264
POLICY:  2468  :  0.00024316372582688928
POLICY:  2469  :  0.00024284873506985605
POLICY:  2988  :  0.00024652254069224
POLICY:  2989  :  0.00024418713292106986
POLICY:  3508  :  0.0002415886556264013
POLICY:  3509  :  0.0002442068071104586
POLICY:  3565  :  0.00024289469001814723
POLICY:  3581  :  0.00024413614301010966
POLICY:  4028  :  0.00024676264729350805
POLICY:  4029  :  0.00024442357243970037
MCTS.py==>search  returning value of canonical board -v:  [-0.01132301]
MCTS.py==>search  returning value of canonical board -v2:  [0.01132301]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01132301]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  175
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.10464764]
uuuuu2:  0.2536050295060169
uuuuu1:  [0.1053139]
uuuuu2:  0.2535208281732896
uuuuu1:  [0.10296945]
uuuuu1:  [0.10671429]
uuuuu1:  [0.10613194]
uuuuu1:  [0.10564414]
uuuuu1:  [0.10437405]
uuuuu1:  [0.10858952]
uuuuu2:  0.2553271315401228
uuuuu1:  [0.1091909]
uuuuu1:  [0.10542681]
uuuuu1:  [0.10442122]
uuuuu1:  [0.10755193]
uuuuu1:  [0.10075037]
uuuuu2:  0.25551887320182787
uuuuu2:  0.2558727304143603
uuuuu2:  0.2555078937528691
uuuuu1:  [0.10408729]
uuuuu1:  [0.10464752]
uuuuu2:  0.2565691893707998
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  176
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07097767]
uuuuu2:  0.1656242015006474
uuuuu1:  [0.07456721]
uuuuu1:  [0.07446575]
uuuuu2:  0.16584198850912102
uuuuu2:  0.1662391599878995
uuuuu1:  [0.07720368]
uuuuu1:  [0.0783308]
uuuuu1:  [0.07294241]
uuuuu2:  0.16506878885771867
uuuuu2:  0.1648822935439873
uuuuu1:  [0.07067946]
uuuuu1:  [0.06879622]
uuuuu2:  0.16604299432547473
uuuuu1:  [0.05956725]
uuuuu1:  [0.06723802]
uuuuu2:  0.1651517287793653
uuuuu1:  [0.06816176]
uuuuu2:  0.16612540641140483
uuuuu1:  [0.07123458]
uuuuu2:  0.16587726386964843
uuuuu1:  [0.0721612]
uuuuu1:  [0.07281165]
uuuuu1:  [0.07088327]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  177
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu2:  0.0
in if
in if  cur_best:  0.0 best_act:  901
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
a:  901
ChessGame==>getNextState  param action number:  901 self.n*self.n:  64
selected action:  2 7 1 6
MOVE:  b7a6  by converting:  2 7 1 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  b7a6
MOVE FROM:  49 MOVE TO:  40
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  40
piece moved: PAWN
position:  b7a6
board:  . n b q k b n R
. . p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. . p p p p p p
p . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  901 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
P . . . . . . .
. . P P P P P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  0  1  1  1  1  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  0  1  1  1  1  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  178
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
P . . . . . . .
. . P P P P P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  0 6 0 5  at:  389
count:  14
inserting:  5 4 5 3  at:  2859
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
inserting:  0 6 0 4  at:  388
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.00024392436898779124
POLICY:  389  :  0.00024759292136877775
POLICY:  908  :  0.0002426779828965664
POLICY:  909  :  0.00024320260854437947
POLICY:  965  :  0.0002447534934617579
POLICY:  981  :  0.00024417327949777246
POLICY:  1428  :  0.00024305126862600446
POLICY:  1429  :  0.00024090705846901983
POLICY:  1948  :  0.00024068880884442478
POLICY:  1949  :  0.00024403195129707456
POLICY:  2468  :  0.00024326035054400563
POLICY:  2469  :  0.0002428883599350229
POLICY:  2542  :  0.00024290176224894822
POLICY:  2859  :  0.0002455879293847829
POLICY:  3508  :  0.00024199482868425548
POLICY:  3509  :  0.0002437104267301038
POLICY:  3565  :  0.00024272232258226722
POLICY:  3581  :  0.00024335230409633368
POLICY:  3632  :  0.0002431042812531814
POLICY:  3641  :  0.000246651004999876
POLICY:  4028  :  0.0002460719260852784
POLICY:  4029  :  0.0002447095757815987
MCTS.py==>search  returning value of canonical board -v:  [-0.02182082]
MCTS.py==>search  returning value of canonical board -v2:  [0.02182082]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02182082]
MCTS.py==>search  returning value of canonical board -v2:  [0.02182082]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  179
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.10666768]
uuuuu2:  0.25753712491446457
uuuuu1:  [0.1073307]
uuuuu2:  0.25745161805686484
uuuuu1:  [0.10497273]
uuuuu1:  [0.10871221]
uuuuu1:  [0.10814965]
uuuuu1:  [0.10763388]
uuuuu1:  [0.10636921]
uuuuu1:  [0.11059117]
uuuuu2:  0.25928592779718695
uuuuu1:  [0.11119728]
uuuuu1:  [0.10742504]
uuuuu1:  [0.10641064]
uuuuu1:  [0.10954177]
uuuuu1:  [0.10273997]
uuuuu2:  0.2594806423751195
uuuuu2:  0.25983998607316583
uuuuu2:  0.2594694926919941
uuuuu1:  [0.10609104]
uuuuu1:  [0.10663699]
uuuuu2:  0.2605472434868367
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  180
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07353363]
uuuuu2:  0.17072151923643808
uuuuu1:  [0.07713509]
uuuuu1:  [0.07707341]
uuuuu2:  0.17094600894639408
uuuuu2:  0.1713554039360157
uuuuu1:  [0.07978196]
uuuuu1:  [0.08089813]
uuuuu1:  [0.07550766]
uuuuu2:  0.1701490129882884
uuuuu2:  0.16995677801898915
uuuuu1:  [0.07324687]
uuuuu1:  [0.07135473]
uuuuu2:  0.17115320099944153
uuuuu1:  [0.06212761]
uuuuu1:  [0.06982272]
uuuuu2:  0.17023450550267077
uuuuu1:  [0.07073165]
uuuuu2:  0.17123814943322085
uuuuu1:  [0.07380088]
uuuuu2:  0.17098236995575314
uuuuu1:  [0.07475531]
uuuuu1:  [0.07540531]
uuuuu1:  [0.0734572]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  181
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.0048413]
in if
in if  cur_best:  [0.0048413] best_act:  901
uuuuu2:  0.05244499239756524
in if
in if  cur_best:  0.05244499239756524 best_act:  908
uuuuu2:  0.052440272564632746
uuuuu2:  0.052755659217164554
in if
in if  cur_best:  0.052755659217164554 best_act:  965
uuuuu2:  0.05272264552556083
uuuuu2:  0.05270860543665112
uuuuu2:  0.05208575089256613
uuuuu2:  0.05189425828332958
uuuuu2:  0.05256716756694966
uuuuu2:  0.05250919092407048
uuuuu2:  0.05244117128115651
uuuuu2:  0.05323449915186456
in if
in if  cur_best:  0.05323449915186456 best_act:  2988
uuuuu2:  0.052730187202683326
uuuuu2:  0.05216906757057689
uuuuu2:  0.05273443568079566
uuuuu2:  0.052451094871303526
uuuuu2:  0.052719176354084483
uuuuu2:  0.053286348182081715
in if
in if  cur_best:  0.053286348182081715 best_act:  4028
uuuuu2:  0.05278124435680261
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  8 7 8 5
MOVE:  h7h5  by converting:  8 7 8 5
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  h7h5
MOVE FROM:  55 MOVE TO:  39
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  39
piece moved: PAWN
position:  h7h5
board:  . n b q k b n R
. p p p p p p .
P . . . . . . .
. . . . . . . p
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p p p .
P . . . . . . .
. . . . . . . p
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  4028 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . P
p . . . . . . .
. P P P P P P .
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  0 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  0 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  1  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  182
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . P
p . . . . . . .
. P P P P P P .
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 4], [8, 1, 8, 3], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 3  at:  3643
count:  6
inserting:  7 0 7 2  at:  3642
count:  7
inserting:  7 0 7 1  at:  3641
count:  8
inserting:  7 0 6 0  at:  3632
count:  9
inserting:  0 2 1 1  at:  137
count:  10
inserting:  7 6 7 5  at:  4029
count:  11
inserting:  6 6 6 5  at:  3509
count:  12
inserting:  4 6 4 5  at:  2469
count:  13
inserting:  3 6 3 5  at:  1949
count:  14
inserting:  2 6 2 5  at:  1429
count:  15
inserting:  1 6 1 5  at:  909
count:  16
inserting:  0 6 0 5  at:  389
count:  17
inserting:  5 4 5 3  at:  2859
count:  18
inserting:  0 2 0 1  at:  129
count:  19
inserting:  7 6 7 4  at:  4028
count:  20
inserting:  6 6 6 4  at:  3508
count:  21
inserting:  4 6 4 4  at:  2468
count:  22
inserting:  3 6 3 4  at:  1948
count:  23
inserting:  2 6 2 4  at:  1428
count:  24
inserting:  1 6 1 4  at:  908
count:  25
inserting:  0 6 0 4  at:  388
count:  26
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002427105646347627
POLICY:  137  :  0.0002423865080345422
POLICY:  388  :  0.00024360415409319103
POLICY:  389  :  0.0002475390210747719
POLICY:  908  :  0.00024262598890345544
POLICY:  909  :  0.00024246082466561347
POLICY:  965  :  0.00024468550691381097
POLICY:  981  :  0.0002436852955725044
POLICY:  1428  :  0.00024340632080566138
POLICY:  1429  :  0.00024112225219141692
POLICY:  1948  :  0.00024094060063362122
POLICY:  1949  :  0.00024415782536379993
POLICY:  2468  :  0.00024314851907547563
POLICY:  2469  :  0.0002427222643746063
POLICY:  2542  :  0.00024291343288496137
POLICY:  2859  :  0.0002453061460983008
POLICY:  3508  :  0.000241747940890491
POLICY:  3509  :  0.00024402527196798474
POLICY:  3565  :  0.00024260807549580932
POLICY:  3581  :  0.00024352212494704872
POLICY:  3632  :  0.0002428410662105307
POLICY:  3641  :  0.00024682149523869157
POLICY:  3642  :  0.00024567212676629424
POLICY:  3643  :  0.0002445048885419965
POLICY:  4028  :  0.00024598464369773865
POLICY:  4029  :  0.00024435046361759305
MCTS.py==>search  returning value of canonical board -v:  [-0.02208297]
MCTS.py==>search  returning value of canonical board -v2:  [0.02208297]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02208297]
MCTS.py==>search  returning value of canonical board -v2:  [0.02208297]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  514 COUNT:  1
CNT NUM:  530 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  587 COUNT:  1
CNT NUM:  1106 COUNT:  1
CNT NUM:  1107 COUNT:  1
CNT NUM:  1627 COUNT:  1
CNT NUM:  2089 COUNT:  1
CNT NUM:  2146 COUNT:  1
CNT NUM:  2147 COUNT:  1
CNT NUM:  2796 COUNT:  1
CNT NUM:  3187 COUNT:  1
CNT NUM:  3706 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  183
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.11187194]
uuuuu2:  0.25958780267710596
uuuuu1:  [0.1126319]
uuuuu1:  [0.12001635]
uuuuu2:  0.2599127751973412
uuuuu2:  0.2600077974056246
uuuuu1:  [0.10741097]
uuuuu1:  [0.11118723]
uuuuu2:  0.25882303848494187
uuuuu2:  0.2582499879551642
uuuuu1:  [0.10862557]
uuuuu1:  [0.1147125]
uuuuu1:  [0.12225378]
uuuuu1:  [0.09621274]
uuuuu1:  [0.11309875]
uuuuu2:  0.2585219814211668
uuuuu1:  [0.11208566]
uuuuu1:  [0.11906831]
uuuuu1:  [0.12152176]
uuuuu1:  [0.11598668]
uuuuu1:  [0.11673754]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  184
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07511179]
in if
in if  cur_best:  [0.07511179] best_act:  901
uuuuu2:  0.17712736163660056
in if
in if  cur_best:  0.17712736163660056 best_act:  908
uuuuu1:  [0.07297162]
uuuuu1:  [0.07497719]
uuuuu1:  [0.07906408]
uuuuu1:  [0.07162264]
uuuuu2:  0.17613583143030206
uuuuu2:  0.17609170880426633
uuuuu1:  [0.07282343]
uuuuu1:  [0.07523216]
uuuuu2:  0.17753239180972025
in if
in if  cur_best:  0.17753239180972025 best_act:  2469
uuuuu1:  [0.07701685]
uuuuu1:  [0.07705472]
uuuuu2:  0.17636953132923489
uuuuu1:  [0.06755424]
uuuuu2:  0.17761359361389306
in if
in if  cur_best:  0.17761359361389306 best_act:  3565
uuuuu1:  [0.07453053]
uuuuu2:  0.17725800589150592
uuuuu1:  [0.07027937]
uuuuu1:  [0.0717414]
uuuuu1:  [0.07053585]
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  7 8 6 6
MOVE:  g8f6  by converting:  7 8 6 6
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  g8f6
MOVE FROM:  62 MOVE TO:  45
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  45
position:  g8f6
board:  . n b q k b . r
. p p p p p p p
P . . . . n . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . r
. p p p p p p p
P . . . . n . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3565 next_s:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . N . .
. P P P P P P P
. N B Q K B . R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  0  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  2  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  0  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  2  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  185
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . N . .
. P P P P P P P
. N B Q K B . R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 8, 1, 7], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 7 0 6  at:  454
count:  5
inserting:  0 2 1 1  at:  137
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  4 6 4 5  at:  2469
count:  9
inserting:  3 6 3 5  at:  1949
count:  10
inserting:  2 6 2 5  at:  1429
count:  11
inserting:  1 6 1 5  at:  909
count:  12
inserting:  0 5 0 4  at:  324
count:  13
inserting:  5 4 5 3  at:  2859
count:  14
inserting:  0 2 0 1  at:  129
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024287760606966913
POLICY:  137  :  0.00024301583471242338
POLICY:  324  :  0.0002443692646920681
POLICY:  454  :  0.00024489962379448116
POLICY:  908  :  0.00024286673578899354
POLICY:  909  :  0.00024258279881905764
POLICY:  981  :  0.00024354546621907502
POLICY:  1428  :  0.0002435608912492171
POLICY:  1429  :  0.00024106066848617047
POLICY:  1948  :  0.00024094723630696535
POLICY:  1949  :  0.0002440485986880958
POLICY:  2468  :  0.0002427216386422515
POLICY:  2469  :  0.00024276702606584877
POLICY:  2542  :  0.000243401707848534
POLICY:  2859  :  0.00024475413374602795
POLICY:  3508  :  0.0002424246195005253
POLICY:  3509  :  0.00024397199740633368
POLICY:  3565  :  0.0002426385908620432
POLICY:  3581  :  0.00024379193200729787
POLICY:  4028  :  0.00024613813729956746
POLICY:  4029  :  0.0002444965357426554
MCTS.py==>search  returning value of canonical board -v:  [-0.00939387]
MCTS.py==>search  returning value of canonical board -v2:  [0.00939387]
MCTS.py==>search  returning value of canonical board -v2:  [-0.00939387]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  186
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.11402197]
uuuuu2:  0.26387880085755094
uuuuu1:  [0.11479169]
uuuuu1:  [0.12218112]
uuuuu2:  0.26420914518832056
uuuuu2:  0.2643057381180271
uuuuu1:  [0.10957225]
uuuuu1:  [0.1133476]
uuuuu2:  0.2631013950785203
uuuuu2:  0.26251887199743157
uuuuu1:  [0.11077773]
uuuuu1:  [0.11686229]
uuuuu1:  [0.12440463]
uuuuu1:  [0.09836745]
uuuuu1:  [0.11527299]
uuuuu2:  0.2627953615277934
uuuuu1:  [0.11425237]
uuuuu1:  [0.12122172]
uuuuu1:  [0.12368461]
uuuuu1:  [0.11817315]
uuuuu1:  [0.11890657]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  187
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07827973]
uuuuu2:  0.18334423782389433
uuuuu1:  [0.07609551]
uuuuu1:  [0.07811742]
uuuuu1:  [0.08219855]
uuuuu1:  [0.07474565]
uuuuu2:  0.18231790655427302
uuuuu2:  0.18227223529735054
uuuuu1:  [0.07595263]
uuuuu1:  [0.07835449]
uuuuu2:  0.1837634838833409
uuuuu1:  [0.08017015]
uuuuu1:  [0.08017527]
uuuuu2:  0.182559808931486
uuuuu1:  [0.07068177]
uuuuu1:  [0.0825299]
uuuuu1:  [0.07765461]
uuuuu2:  0.18347946747514854
uuuuu1:  [0.07344402]
uuuuu1:  [0.07490201]
uuuuu1:  [0.07367893]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  188
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 6, 1, 5], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  0 2 1 1  at:  137
count:  5
inserting:  7 6 7 5  at:  4029
count:  6
inserting:  6 6 6 5  at:  3509
count:  7
inserting:  4 6 4 5  at:  2469
count:  8
inserting:  3 6 3 5  at:  1949
count:  9
inserting:  2 6 2 5  at:  1429
count:  10
inserting:  1 6 1 5  at:  909
count:  11
inserting:  0 5 0 4  at:  324
count:  12
inserting:  5 4 5 3  at:  2859
count:  13
inserting:  0 2 0 1  at:  129
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024291094450745732
POLICY:  137  :  0.00024229085829574615
POLICY:  324  :  0.00024394610954914242
POLICY:  908  :  0.00024253121227957308
POLICY:  909  :  0.0002424646372674033
POLICY:  981  :  0.00024407135788351297
POLICY:  1428  :  0.0002437592629576102
POLICY:  1429  :  0.00024131170357577503
POLICY:  1948  :  0.00024065996694844216
POLICY:  1949  :  0.00024333033070433885
POLICY:  2468  :  0.00024259086058009416
POLICY:  2469  :  0.00024283703533001244
POLICY:  2542  :  0.00024301190569531173
POLICY:  2859  :  0.0002452651970088482
POLICY:  3508  :  0.00024177505110856146
POLICY:  3509  :  0.0002443440316710621
POLICY:  3565  :  0.00024280388606712222
POLICY:  3581  :  0.0002437586517771706
POLICY:  4028  :  0.0002465399447828531
POLICY:  4029  :  0.000244655559072271
MCTS.py==>search  returning value of canonical board -v:  [-0.01904363]
MCTS.py==>search  returning value of canonical board -v2:  [0.01904363]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01904363]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  189
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.11613758]
uuuuu2:  0.2681011297725356
uuuuu1:  [0.11691691]
uuuuu1:  [0.12431124]
uuuuu2:  0.2684367599482279
uuuuu2:  0.2685348984629483
uuuuu1:  [0.11169894]
uuuuu1:  [0.1154734]
uuuuu2:  0.26731128471119503
uuuuu2:  0.2667194406689645
uuuuu1:  [0.11289545]
uuuuu1:  [0.11897766]
uuuuu1:  [0.12652105]
uuuuu1:  [0.10048768]
uuuuu1:  [0.11741244]
uuuuu2:  0.26700035431272595
uuuuu1:  [0.11638438]
uuuuu1:  [0.12334067]
uuuuu1:  [0.12581284]
uuuuu1:  [0.12032464]
uuuuu1:  [0.12104087]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  190
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08134372]
uuuuu2:  0.18935711459067592
uuuuu1:  [0.0791169]
uuuuu1:  [0.08115461]
uuuuu1:  [0.08523016]
uuuuu1:  [0.07776617]
uuuuu2:  0.18829712421335984
uuuuu2:  0.18824995514203688
uuuuu1:  [0.07897914]
uuuuu1:  [0.08137438]
uuuuu2:  0.18979011005899582
uuuuu1:  [0.08322]
uuuuu1:  [0.08319341]
uuuuu2:  0.18854695991425421
uuuuu1:  [0.07370668]
uuuuu1:  [0.08554459]
uuuuu1:  [0.08067618]
uuuuu2:  0.18949677917393484
uuuuu1:  [0.07650483]
uuuuu1:  [0.0779589]
uuuuu1:  [0.07671887]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  191
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu2:  0.0
in if
in if  cur_best:  0.0 best_act:  129
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
uuuuu2:  0.0
a:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
p P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
. . . . . . . .
p P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  129 next_s:  . n b q k b n r
P p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
  1 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
  1 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  192
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
P p p p p p p p
. . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  7 6 7 5  at:  4029
count:  7
inserting:  6 6 6 5  at:  3509
count:  8
inserting:  5 6 5 5  at:  2989
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  7 6 7 4  at:  4028
count:  14
inserting:  6 6 6 4  at:  3508
count:  15
inserting:  5 6 5 4  at:  2988
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  908  :  0.00024233275325968862
POLICY:  909  :  0.00024319897056557238
POLICY:  965  :  0.00024485785979777575
POLICY:  981  :  0.0002442295372020453
POLICY:  1428  :  0.00024297682102769613
POLICY:  1429  :  0.00024079160357359797
POLICY:  1948  :  0.0002406844578217715
POLICY:  1949  :  0.00024401281552854925
POLICY:  2468  :  0.00024355917412322015
POLICY:  2469  :  0.00024273440067190677
POLICY:  2988  :  0.0002461895637679845
POLICY:  2989  :  0.00024338872754015028
POLICY:  3508  :  0.00024172292614821345
POLICY:  3509  :  0.00024388560268562287
POLICY:  3565  :  0.00024306244449689984
POLICY:  3581  :  0.0002433590852888301
POLICY:  3632  :  0.00024302104429807514
POLICY:  3641  :  0.00024723540991544724
POLICY:  4028  :  0.0002459548704791814
POLICY:  4029  :  0.0002447592851240188
MCTS.py==>search  returning value of canonical board -v:  [-0.01895129]
MCTS.py==>search  returning value of canonical board -v2:  [0.01895129]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01895129]
MCTS.py==>search  returning value of canonical board -v2:  [0.01895129]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  193
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.11822039]
uuuuu2:  0.2722579843247961
uuuuu1:  [0.11900918]
uuuuu1:  [0.12640832]
uuuuu2:  0.2725988183794309
uuuuu2:  0.27269847851225126
uuuuu1:  [0.11379266]
uuuuu1:  [0.11756624]
uuuuu2:  0.2714558928732907
uuuuu2:  0.2708548724072113
uuuuu1:  [0.11498033]
uuuuu1:  [0.12106024]
uuuuu1:  [0.12860467]
uuuuu1:  [0.10257503]
uuuuu1:  [0.1195187]
uuuuu2:  0.27114014156099925
uuuuu1:  [0.11848333]
uuuuu1:  [0.12542675]
uuuuu1:  [0.12790808]
uuuuu1:  [0.12244277]
uuuuu1:  [0.12314209]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  194
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08431336]
uuuuu2:  0.19518484610488596
uuuuu1:  [0.08204525]
uuuuu1:  [0.08409829]
uuuuu1:  [0.08816843]
uuuuu1:  [0.08069369]
uuuuu2:  0.19409223303293285
uuuuu2:  0.19404361226710112
uuuuu1:  [0.08191247]
uuuuu1:  [0.08430126]
uuuuu2:  0.19563116761771016
uuuuu1:  [0.08617593]
uuuuu1:  [0.08611861]
uuuuu2:  0.19434975777889227
uuuuu1:  [0.07663845]
uuuuu1:  [0.08846645]
uuuuu1:  [0.0836047]
uuuuu2:  0.19532880906211958
uuuuu1:  [0.07947136]
uuuuu1:  [0.08092168]
uuuuu1:  [0.07966521]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  195
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.00601459]
in if
in if  cur_best:  [0.00601459] best_act:  129
uuuuu2:  0.049804297071335754
in if
in if  cur_best:  0.049804297071335754 best_act:  137
uuuuu2:  0.0501445436069736
in if
in if  cur_best:  0.0501445436069736 best_act:  324
uuuuu2:  0.049853703232579295
uuuuu2:  0.049840018351082094
uuuuu2:  0.050170289131573904
in if
in if  cur_best:  0.050170289131573904 best_act:  981
uuuuu2:  0.0501061362018536
uuuuu2:  0.04960302611585993
uuuuu2:  0.04946905785627196
uuuuu2:  0.05001796667900958
uuuuu2:  0.049865964288154596
uuuuu2:  0.04991656694176948
uuuuu2:  0.04995251256383545
uuuuu2:  0.050415689716935656
in if
in if  cur_best:  0.050415689716935656 best_act:  2859
uuuuu2:  0.04969826989984949
uuuuu2:  0.05022633881670931
uuuuu2:  0.0499097529177147
uuuuu2:  0.05010601057015461
uuuuu2:  0.05067772154625904
in if
in if  cur_best:  0.05067772154625904 best_act:  4028
uuuuu2:  0.050290375088423406
a:  4028
ChessGame==>getNextState  param action number:  4028 self.n*self.n:  64
selected action:  8 7 8 5
MOVE:  h7h5  by converting:  8 7 8 5
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  h7h5
MOVE FROM:  55 MOVE TO:  39
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  39
piece moved: PAWN
position:  h7h5
board:  . n b q k b n R
. p p p p . p .
p . . . . . . .
. . . . . p . p
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p . p .
p . . . . . . .
. . . . . p . p
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  4028 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . P
P . . . . . . .
. P P P P . P .
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  0  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  0  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  1  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  196
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . P
P . . . . . . .
. P P P P . P .
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 4], [8, 1, 8, 3], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 3  at:  3643
count:  5
inserting:  7 0 7 2  at:  3642
count:  6
inserting:  7 0 7 1  at:  3641
count:  7
inserting:  7 0 6 0  at:  3632
count:  8
inserting:  1 6 0 5  at:  901
count:  9
inserting:  7 6 7 5  at:  4029
count:  10
inserting:  6 6 6 5  at:  3509
count:  11
inserting:  5 6 5 5  at:  2989
count:  12
inserting:  4 6 4 5  at:  2469
count:  13
inserting:  3 6 3 5  at:  1949
count:  14
inserting:  2 6 2 5  at:  1429
count:  15
inserting:  1 6 1 5  at:  909
count:  16
inserting:  7 6 7 4  at:  4028
count:  17
inserting:  6 6 6 4  at:  3508
count:  18
inserting:  5 6 5 4  at:  2988
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.0002466959413141012
POLICY:  908  :  0.00024252654111478478
POLICY:  909  :  0.00024320736702065915
POLICY:  965  :  0.00024472185759805143
POLICY:  981  :  0.00024389482859987766
POLICY:  1428  :  0.00024318470968864858
POLICY:  1429  :  0.00024099166330415756
POLICY:  1948  :  0.0002407612046226859
POLICY:  1949  :  0.0002440765529172495
POLICY:  2468  :  0.00024354501510970294
POLICY:  2469  :  0.0002428977459203452
POLICY:  2988  :  0.0002459640381857753
POLICY:  2989  :  0.00024335378839168698
POLICY:  3508  :  0.0002418464282527566
POLICY:  3509  :  0.00024394725915044546
POLICY:  3565  :  0.0002429932646919042
POLICY:  3581  :  0.00024359642702620476
POLICY:  3632  :  0.00024295077309943736
POLICY:  3641  :  0.0002470178296789527
POLICY:  3642  :  0.0002456138900015503
POLICY:  3643  :  0.00024431804195046425
POLICY:  4028  :  0.0002458810922689736
POLICY:  4029  :  0.0002447073347866535
MCTS.py==>search  returning value of canonical board -v:  [-0.01569799]
MCTS.py==>search  returning value of canonical board -v2:  [0.01569799]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01569799]
MCTS.py==>search  returning value of canonical board -v2:  [0.01569799]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  197
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.12027188]
uuuuu2:  0.276352319099898
uuuuu1:  [0.12107]
uuuuu1:  [0.12847388]
uuuuu2:  0.27669827876627895
uuuuu2:  0.27679943763181236
uuuuu1:  [0.11585489]
uuuuu1:  [0.11962759]
uuuuu2:  0.27553816544595305
uuuuu2:  0.27492810657095085
uuuuu1:  [0.11703385]
uuuuu1:  [0.12311151]
uuuuu1:  [0.13065693]
uuuuu1:  [0.10463099]
uuuuu1:  [0.1215933]
uuuuu2:  0.27521766572717726
uuuuu1:  [0.12055073]
uuuuu1:  [0.12748146]
uuuuu1:  [0.1299718]
uuuuu1:  [0.12452903]
uuuuu1:  [0.12521172]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  198
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08719686]
uuuuu2:  0.2008435496894776
uuuuu1:  [0.08488867]
uuuuu1:  [0.08695659]
uuuuu1:  [0.09102149]
uuuuu1:  [0.0835363]
uuuuu2:  0.19971926011378857
uuuuu2:  0.19966922975849646
uuuuu1:  [0.08476072]
uuuuu1:  [0.08714326]
uuuuu2:  0.20130281073728568
uuuuu1:  [0.08904612]
uuuuu1:  [0.08895898]
uuuuu2:  0.19998425089121594
uuuuu1:  [0.07948518]
uuuuu1:  [0.09130357]
uuuuu1:  [0.08644828]
uuuuu2:  0.2009916863503486
uuuuu1:  [0.08235188]
uuuuu1:  [0.08379851]
uuuuu1:  [0.0825261]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  199
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.0163558]
in if
in if  cur_best:  [0.0163558] best_act:  129
uuuuu2:  0.07043391238274165
in if
in if  cur_best:  0.07043391238274165 best_act:  137
uuuuu2:  0.07091509364799116
in if
in if  cur_best:  0.07091509364799116 best_act:  324
uuuuu2:  0.07050378324603705
uuuuu2:  0.07048442990102424
uuuuu2:  0.0709515033180513
in if
in if  cur_best:  0.0709515033180513 best_act:  981
uuuuu2:  0.07086077737477489
uuuuu2:  0.07014927226779594
uuuuu2:  0.06995981253815912
uuuuu2:  0.07073608683978092
uuuuu2:  0.07052112299712066
uuuuu2:  0.0705926859561549
uuuuu2:  0.07064352074238853
uuuuu2:  0.07129855215408419
in if
in if  cur_best:  0.07129855215408419 best_act:  2859
uuuuu2:  0.07028396731884572
uuuuu2:  0.07103076954293654
uuuuu2:  0.07058304947092228
uuuuu2:  0.07086059970472232
uuuuu1:  [0.02013657]
uuuuu2:  0.07112133050687842
a:  2859
ChessGame==>getNextState  param action number:  2859 self.n*self.n:  64
selected action:  6 5 6 4
MOVE:  f5f4  by converting:  6 5 6 4
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  f5f4
MOVE FROM:  37 MOVE TO:  29
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  29
piece moved: PAWN
position:  f5f4
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . . . .
. . . . . p . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . . . .
. . . . . p . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2859 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . P . .
. . . . . . . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  200
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . P . .
. . . . . . . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  4 6 4 4  at:  2468
count:  17
inserting:  3 6 3 4  at:  1948
count:  18
inserting:  2 6 2 4  at:  1428
count:  19
inserting:  1 6 1 4  at:  908
count:  20
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.0002467423037160188
POLICY:  908  :  0.0002421453973511234
POLICY:  909  :  0.00024325803678948432
POLICY:  965  :  0.0002447386214043945
POLICY:  981  :  0.00024446399766020477
POLICY:  1428  :  0.0002431192115182057
POLICY:  1429  :  0.00024083057360257953
POLICY:  1948  :  0.00024070145445875823
POLICY:  1949  :  0.00024396796652581543
POLICY:  2468  :  0.00024379791284445673
POLICY:  2469  :  0.0002426974242553115
POLICY:  2989  :  0.0002438802330289036
POLICY:  3508  :  0.0002420422970317304
POLICY:  3509  :  0.0002442368131596595
POLICY:  3565  :  0.0002428143925499171
POLICY:  3581  :  0.00024344386474695057
POLICY:  3632  :  0.0002430006134090945
POLICY:  3641  :  0.00024714579922147095
POLICY:  4028  :  0.00024596397997811437
POLICY:  4029  :  0.00024432060308754444
MCTS.py==>search  returning value of canonical board -v:  [-0.02126226]
MCTS.py==>search  returning value of canonical board -v2:  [0.02126226]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02126226]
MCTS.py==>search  returning value of canonical board -v2:  [0.02126226]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  324 COUNT:  1
CNT NUM:  454 COUNT:  1
CNT NUM:  981 COUNT:  1
CNT NUM:  1428 COUNT:  1
CNT NUM:  1949 COUNT:  1
CNT NUM:  2468 COUNT:  1
CNT NUM:  2469 COUNT:  1
CNT NUM:  2542 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  3565 COUNT:  1
CNT NUM:  3581 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  201
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.10865736]
uuuuu2:  0.2614100809602977
uuuuu1:  [0.10931718]
uuuuu2:  0.2613232882131346
uuuuu1:  [0.10694589]
uuuuu1:  [0.11068007]
uuuuu1:  [0.110137]
uuuuu1:  [0.10959368]
uuuuu1:  [0.10833438]
uuuuu1:  [0.11256273]
uuuuu2:  0.2631851831064752
uuuuu1:  [0.1131735]
uuuuu1:  [0.10939322]
uuuuu1:  [0.10837013]
uuuuu1:  [0.11150168]
uuuuu1:  [0.10469966]
uuuuu2:  0.2633828258874855
uuuuu2:  0.2637475735534
uuuuu2:  0.2633715085305435
uuuuu1:  [0.10806467]
uuuuu1:  [0.10859652]
uuuuu2:  0.26446546701372686
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  202
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07601546]
uuuuu2:  0.1756709940145724
uuuuu1:  [0.0796285]
uuuuu1:  [0.07960544]
uuuuu2:  0.17590199202039145
uuuuu2:  0.17632325598929868
uuuuu1:  [0.08228546]
uuuuu1:  [0.083391]
uuuuu1:  [0.07799853]
uuuuu2:  0.17508188994531493
uuuuu2:  0.17488408179381648
uuuuu1:  [0.07573982]
uuuuu1:  [0.07383903]
uuuuu2:  0.17611519088409391
uuuuu1:  [0.0646137]
uuuuu1:  [0.07233246]
uuuuu2:  0.17516986101685603
uuuuu1:  [0.073227]
uuuuu2:  0.17620260210131325
uuuuu1:  [0.07629275]
uuuuu2:  0.17593940719034803
uuuuu1:  [0.07727418]
uuuuu1:  [0.07792373]
uuuuu1:  [0.07595648]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  203
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.01588511]
in if
in if  cur_best:  [0.01588511] best_act:  901
uuuuu2:  0.07416841952719064
in if
in if  cur_best:  0.07416841952719064 best_act:  908
uuuuu2:  0.07416174467544537
uuuuu2:  0.0746077687568473
in if
in if  cur_best:  0.0746077687568473 best_act:  965
uuuuu2:  0.07456108034643731
uuuuu2:  0.07454122466228427
uuuuu2:  0.07366037531865358
uuuuu2:  0.07338956387357702
uuuuu2:  0.07434120130871931
uuuuu2:  0.0742592099540587
uuuuu2:  0.07416301565254199
uuuuu2:  0.07528495068670589
in if
in if  cur_best:  0.07528495068670589 best_act:  2988
uuuuu2:  0.07457174588850699
uuuuu2:  0.07377820289466826
uuuuu2:  0.07457775414387288
uuuuu2:  0.07417704972831533
uuuuu2:  0.07455617419708525
uuuuu1:  [0.01559617]
uuuuu2:  0.07464395160831865
a:  2988
ChessGame==>getNextState  param action number:  2988 self.n*self.n:  64
selected action:  6 7 6 5
MOVE:  f7f5  by converting:  6 7 6 5
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  f7f5
MOVE FROM:  53 MOVE TO:  37
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  37
piece moved: PAWN
position:  f7f5
board:  . n b q k b n R
. p p p p . p p
P . . . . . . .
. . . . . p . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p . p p
P . . . . . . .
. . . . . p . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2988 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . P . .
p . . . . . . .
. P P P P . P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  204
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . P . .
p . . . . . . .
. P P P P . P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  0 2 0 1  at:  129
count:  16
inserting:  7 6 7 4  at:  4028
count:  17
inserting:  6 6 6 4  at:  3508
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
inserting:  0 6 0 4  at:  388
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024284262326546013
POLICY:  137  :  0.0002425974525976926
POLICY:  388  :  0.00024325965205207467
POLICY:  389  :  0.00024764036061242223
POLICY:  908  :  0.0002423502883175388
POLICY:  909  :  0.0002427984436508268
POLICY:  965  :  0.0002444347774144262
POLICY:  981  :  0.0002439466188661754
POLICY:  1428  :  0.00024314179609064013
POLICY:  1429  :  0.0002409165899734944
POLICY:  1948  :  0.00024119802401401103
POLICY:  1949  :  0.00024421190028078854
POLICY:  2468  :  0.00024346236023120582
POLICY:  2469  :  0.00024285328981932253
POLICY:  2542  :  0.0002429931628284976
POLICY:  3508  :  0.00024168113304767758
POLICY:  3509  :  0.0002435744390822947
POLICY:  3565  :  0.00024290582223329693
POLICY:  3581  :  0.00024363366537727416
POLICY:  3632  :  0.00024281858350150287
POLICY:  3641  :  0.00024727050913497806
POLICY:  4028  :  0.0002459333336446434
POLICY:  4029  :  0.00024473099620081484
MCTS.py==>search  returning value of canonical board -v:  [-0.01924656]
MCTS.py==>search  returning value of canonical board -v2:  [0.01924656]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01924656]
MCTS.py==>search  returning value of canonical board -v2:  [0.01924656]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  205
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.110618]
uuuuu2:  0.26522648839459884
uuuuu1:  [0.11127464]
uuuuu2:  0.26513842853300656
uuuuu1:  [0.10889024]
uuuuu1:  [0.11261919]
uuuuu1:  [0.11209534]
uuuuu1:  [0.11152487]
uuuuu1:  [0.11027084]
uuuuu1:  [0.1145055]
uuuuu2:  0.2670275058115357
uuuuu1:  [0.11512086]
uuuuu1:  [0.11133266]
uuuuu1:  [0.11030103]
uuuuu1:  [0.11343297]
uuuuu1:  [0.10663073]
uuuuu2:  0.26722803404124795
uuuuu2:  0.2675981067722813
uuuuu2:  0.26721655145867645
uuuuu1:  [0.11000948]
uuuuu1:  [0.11052744]
uuuuu2:  0.2683264809834995
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  206
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07842927]
uuuuu2:  0.18048478923648492
uuuuu1:  [0.08205355]
uuuuu1:  [0.08206806]
uuuuu2:  0.18072211712677305
uuuuu2:  0.18115492471158606
uuuuu1:  [0.08472033]
uuuuu1:  [0.08581553]
uuuuu1:  [0.0804211]
uuuuu2:  0.17987954234086212
uuuuu2:  0.17967631378436238
uuuuu1:  [0.07816444]
uuuuu1:  [0.07625523]
uuuuu2:  0.18094115813691047
uuuuu1:  [0.06703164]
uuuuu1:  [0.07477341]
uuuuu2:  0.17996992402507284
uuuuu1:  [0.07565394]
uuuuu2:  0.1810309646254844
uuuuu1:  [0.0787163]
uuuuu2:  0.18076055755970705
uuuuu1:  [0.07972401]
uuuuu1:  [0.08037312]
uuuuu1:  [0.07838724]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  207
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.02435932]
in if
in if  cur_best:  [0.02435932] best_act:  901
uuuuu2:  0.0908373914351465
in if
in if  cur_best:  0.0908373914351465 best_act:  908
uuuuu2:  0.09082921644470418
uuuuu2:  0.09137548215091834
in if
in if  cur_best:  0.09137548215091834 best_act:  965
uuuuu2:  0.09131830075971528
uuuuu2:  0.09129398261238088
uuuuu2:  0.09021516689630053
uuuuu2:  0.0898834919678289
uuuuu2:  0.09104900503594364
uuuuu2:  0.09094858654482463
uuuuu2:  0.09083077306738495
uuuuu1:  [0.02685587]
uuuuu2:  0.09133136332766573
uuuuu2:  0.09035947561573303
uuuuu2:  0.09133872190761114
uuuuu2:  0.09084796122971306
uuuuu2:  0.09131229197845808
uuuuu1:  [0.02406436]
uuuuu2:  0.09141979691269021
in if
in if  cur_best:  0.09141979691269021 best_act:  4029
a:  4029
ChessGame==>getNextState  param action number:  4029 self.n*self.n:  64
selected action:  8 7 8 6
MOVE:  h7h6  by converting:  8 7 8 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  h7h6
MOVE FROM:  55 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
piece moved: PAWN
position:  h7h6
board:  . n b q k b n R
. p p p p p p .
P . . . . . . p
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p p p .
P . . . . . . p
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  4029 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . P
. P P P P P P .
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  0 -1  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  0 -1  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  208
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . P
. P P P P P P .
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 3], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 2  at:  3642
count:  6
inserting:  7 0 7 1  at:  3641
count:  7
inserting:  7 0 6 0  at:  3632
count:  8
inserting:  0 2 1 1  at:  137
count:  9
inserting:  7 6 7 5  at:  4029
count:  10
inserting:  6 6 6 5  at:  3509
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  0 6 0 5  at:  389
count:  16
inserting:  5 4 5 3  at:  2859
count:  17
inserting:  0 2 0 1  at:  129
count:  18
inserting:  7 6 7 4  at:  4028
count:  19
inserting:  6 6 6 4  at:  3508
count:  20
inserting:  4 6 4 4  at:  2468
count:  21
inserting:  3 6 3 4  at:  1948
count:  22
inserting:  2 6 2 4  at:  1428
count:  23
inserting:  1 6 1 4  at:  908
count:  24
inserting:  0 6 0 4  at:  388
count:  25
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002426919963909313
POLICY:  137  :  0.00024237856268882751
POLICY:  388  :  0.00024373656196985394
POLICY:  389  :  0.0002475552319083363
POLICY:  908  :  0.00024241239589173347
POLICY:  909  :  0.0002425884740659967
POLICY:  965  :  0.00024484292953275144
POLICY:  981  :  0.0002435872593196109
POLICY:  1428  :  0.00024325175036210567
POLICY:  1429  :  0.00024124025367200375
POLICY:  1948  :  0.00024067498452495784
POLICY:  1949  :  0.00024406514421571046
POLICY:  2468  :  0.00024312637106049806
POLICY:  2469  :  0.00024256898905150592
POLICY:  2542  :  0.0002428724110359326
POLICY:  2859  :  0.00024549008230678737
POLICY:  3508  :  0.00024165937793441117
POLICY:  3509  :  0.00024402429698966444
POLICY:  3565  :  0.0002426349528832361
POLICY:  3581  :  0.00024344559642486274
POLICY:  3632  :  0.00024283333914354444
POLICY:  3641  :  0.0002467809827066958
POLICY:  3642  :  0.0002455417416058481
POLICY:  4028  :  0.00024585454957559705
POLICY:  4029  :  0.0002443723496980965
MCTS.py==>search  returning value of canonical board -v:  [-0.02362531]
MCTS.py==>search  returning value of canonical board -v2:  [0.02362531]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02362531]
MCTS.py==>search  returning value of canonical board -v2:  [0.02362531]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  209
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.1125508]
uuuuu2:  0.2689887541600785
uuuuu1:  [0.11320432]
uuuuu2:  0.2688994451600438
uuuuu1:  [0.11080699]
uuuuu1:  [0.11453082]
uuuuu1:  [0.11402589]
uuuuu1:  [0.11342867]
uuuuu1:  [0.11217983]
uuuuu1:  [0.1164207]
uuuuu2:  0.2708153191993957
uuuuu1:  [0.1170406]
uuuuu1:  [0.1132446]
uuuuu1:  [0.11220451]
uuuuu1:  [0.11533688]
uuuuu1:  [0.1085344]
uuuuu2:  0.27101869194323713
uuuuu2:  0.27139401419506726
uuuuu2:  0.2710070464790184
uuuuu1:  [0.1119267]
uuuuu1:  [0.11243097]
uuuuu2:  0.272132720471442
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  210
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08078033]
uuuuu2:  0.18517348663728517
uuuuu1:  [0.08441558]
uuuuu1:  [0.08446667]
uuuuu2:  0.1854169799150668
uuuuu2:  0.18586103112770322
uuuuu1:  [0.08709192]
uuuuu1:  [0.08817706]
uuuuu1:  [0.08278072]
uuuuu2:  0.1845525164247094
uuuuu2:  0.1843440083252152
uuuuu1:  [0.08052604]
uuuuu1:  [0.07860864]
uuuuu2:  0.18564171124968668
uuuuu1:  [0.06938675]
uuuuu1:  [0.07715092]
uuuuu2:  0.18464524607613458
uuuuu1:  [0.07801781]
uuuuu2:  0.1857338507628403
uuuuu1:  [0.08107688]
uuuuu2:  0.18545641896710185
uuuuu1:  [0.08211017]
uuuuu1:  [0.08275886]
uuuuu1:  [0.08075483]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  211
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03150342]
in if
in if  cur_best:  [0.03150342] best_act:  901
uuuuu2:  0.10488998479513048
in if
in if  cur_best:  0.10488998479513048 best_act:  908
uuuuu2:  0.10488054512926549
uuuuu2:  0.10551131843432911
in if
in if  cur_best:  0.10551131843432911 best_act:  965
uuuuu2:  0.10544529105112166
uuuuu2:  0.10541721087330223
uuuuu2:  0.10417150178513226
uuuuu2:  0.10378851656665916
uuuuu2:  0.10513433513389932
uuuuu2:  0.10501838184814095
uuuuu2:  0.10488234256231302
uuuuu1:  [0.03398794]
uuuuu2:  0.10546037440536665
uuuuu2:  0.10433813514115378
uuuuu2:  0.10546887136159132
uuuuu2:  0.10490218974260705
uuuuu2:  0.10543835270816897
uuuuu1:  [0.03120338]
uuuuu1:  [0.02915593]
a:  965
ChessGame==>getNextState  param action number:  965 self.n*self.n:  64
selected action:  2 8 1 6
MOVE:  b8a6  by converting:  2 8 1 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  b8a6
MOVE FROM:  57 MOVE TO:  40
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  40
position:  b8a6
board:  . . b q k b n R
. p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . . b q k b n R
. p p p p p p p
n . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  965 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
N . . . . . . .
. P P P P P P P
. . B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2 -4  0  1  1  1  1  1  1  1  2  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  0  3  5  6  3  2 -4  0  1  1  1  1  1  1  1  2  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  212
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
N . . . . . . .
. P P P P P P P
. . B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  0 6 0 5  at:  389
count:  14
inserting:  5 4 5 3  at:  2859
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
inserting:  0 6 0 4  at:  388
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  388  :  0.000244516966631636
POLICY:  389  :  0.00024737906642258167
POLICY:  908  :  0.00024308911815751344
POLICY:  909  :  0.0002434843627270311
POLICY:  965  :  0.00024517180281691253
POLICY:  981  :  0.0002441023098072037
POLICY:  1428  :  0.0002430296881357208
POLICY:  1429  :  0.00024149357341229916
POLICY:  1948  :  0.00024073963868431747
POLICY:  1949  :  0.00024406614829786122
POLICY:  2468  :  0.00024316490453202277
POLICY:  2469  :  0.00024286836560349911
POLICY:  2542  :  0.00024258824123535305
POLICY:  2859  :  0.00024559692246839404
POLICY:  3508  :  0.00024215146549977362
POLICY:  3509  :  0.00024364166893064976
POLICY:  3565  :  0.00024338516232091933
POLICY:  3581  :  0.00024369562743231654
POLICY:  3632  :  0.00024318356008734554
POLICY:  3641  :  0.00024668354308232665
POLICY:  4028  :  0.0002458510862197727
POLICY:  4029  :  0.0002447978768032044
MCTS.py==>search  returning value of canonical board -v:  [-0.0186453]
MCTS.py==>search  returning value of canonical board -v2:  [0.0186453]
MCTS.py==>search  returning value of canonical board -v2:  [-0.0186453]
MCTS.py==>search  returning value of canonical board -v2:  [0.0186453]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  213
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.11445695]
uuuuu2:  0.2726991191460874
uuuuu1:  [0.11510739]
uuuuu2:  0.27260857823958257
uuuuu1:  [0.11269733]
uuuuu1:  [0.11641607]
uuuuu1:  [0.11592981]
uuuuu1:  [0.11530621]
uuuuu1:  [0.11406249]
uuuuu1:  [0.11830948]
uuuuu2:  0.27455087937613937
uuuuu1:  [0.11893386]
uuuuu1:  [0.11513015]
uuuuu1:  [0.11408175]
uuuuu1:  [0.1172145]
uuuuu1:  [0.11041181]
uuuuu2:  0.2747570573937931
uuuuu2:  0.2751375567488297
uuuuu2:  0.2747452512948935
uuuuu1:  [0.11381746]
uuuuu1:  [0.11430825]
uuuuu2:  0.2758864525586344
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  214
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08307333]
uuuuu2:  0.18974636007333384
uuuuu1:  [0.08671927]
uuuuu1:  [0.08680604]
uuuuu2:  0.1899958664362609
uuuuu2:  0.19045088352760592
uuuuu1:  [0.08940493]
uuuuu1:  [0.09048025]
uuuuu1:  [0.08508205]
uuuuu2:  0.18911005495379474
uuuuu2:  0.1888963977308126
uuuuu1:  [0.0828293]
uuuuu1:  [0.08090391]
uuuuu2:  0.19022614752840272
uuuuu1:  [0.07168368]
uuuuu1:  [0.0794697]
uuuuu2:  0.18920507457106456
uuuuu1:  [0.08032329]
uuuuu2:  0.1903205624338912
uuuuu1:  [0.08337914]
uuuuu2:  0.19003627943870685
uuuuu1:  [0.08443739]
uuuuu1:  [0.08508566]
uuuuu1:  [0.08306394]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  215
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03779749]
in if
in if  cur_best:  [0.03779749] best_act:  901
uuuuu2:  0.11727056808041555
in if
in if  cur_best:  0.11727056808041555 best_act:  908
uuuuu2:  0.11726001421313606
uuuuu1:  [0.04033732]
uuuuu2:  0.11789141934877914
in if
in if  cur_best:  0.11789141934877914 best_act:  981
uuuuu2:  0.1178600247555669
uuuuu2:  0.11646727965489823
uuuuu2:  0.1160390891634565
uuuuu2:  0.11754376006432167
uuuuu2:  0.11741412034973658
uuuuu2:  0.1172620238043757
uuuuu1:  [0.04027142]
uuuuu2:  0.1179082830514894
in if
in if  cur_best:  0.1179082830514894 best_act:  2989
uuuuu2:  0.11665358141058974
uuuuu2:  0.1179177829373495
in if
in if  cur_best:  0.1179177829373495 best_act:  3509
uuuuu2:  0.11728421362652527
uuuuu2:  0.11788366204553244
uuuuu1:  [0.03749298]
uuuuu1:  [0.03538591]
a:  3509
ChessGame==>getNextState  param action number:  3509 self.n*self.n:  64
selected action:  7 7 7 6
MOVE:  g7g6  by converting:  7 7 7 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  g7g6
MOVE FROM:  54 MOVE TO:  46
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  46
piece moved: PAWN
position:  g7g6
board:  . n b q k b n R
. p p p p p . p
P . . . . . p .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p p . p
P . . . . . p .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3509 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . P .
. P P P P P . P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  1  0  1 -1  0  0  0  0  0  1  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  1  0  1 -1  0  0  0  0  0  1  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  216
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . P .
. P P P P P . P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024303454847540706
POLICY:  137  :  0.00024273814051412046
POLICY:  388  :  0.00024345020938199013
POLICY:  389  :  0.0002473600616212934
POLICY:  908  :  0.00024264221428893507
POLICY:  909  :  0.00024299035430885851
POLICY:  965  :  0.00024444167502224445
POLICY:  981  :  0.00024404081341344863
POLICY:  1428  :  0.0002437611692585051
POLICY:  1429  :  0.00024069166101980954
POLICY:  1948  :  0.00024095173284877092
POLICY:  1949  :  0.0002442518889438361
POLICY:  2468  :  0.00024325959384441376
POLICY:  2469  :  0.00024254765594378114
POLICY:  2542  :  0.000242682290263474
POLICY:  2859  :  0.00024549628142267466
POLICY:  3508  :  0.0002419446100248024
POLICY:  3509  :  0.00024368394224438816
POLICY:  3565  :  0.00024266022955998778
POLICY:  3581  :  0.0002435642818454653
POLICY:  3632  :  0.00024286832194775343
POLICY:  3641  :  0.0002464812423568219
POLICY:  4028  :  0.00024616587324999273
POLICY:  4029  :  0.0002441616088617593
MCTS.py==>search  returning value of canonical board -v:  [-0.02726412]
MCTS.py==>search  returning value of canonical board -v2:  [0.02726412]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02726412]
MCTS.py==>search  returning value of canonical board -v2:  [0.02726412]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  217
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.11633751]
uuuuu2:  0.2763596737975945
uuuuu1:  [0.11698493]
uuuuu2:  0.2762679175225271
uuuuu1:  [0.11456227]
uuuuu1:  [0.118276]
uuuuu1:  [0.11780818]
uuuuu1:  [0.11715854]
uuuuu1:  [0.11591987]
uuuuu1:  [0.12017292]
uuuuu2:  0.27823629098187797
uuuuu1:  [0.12080169]
uuuuu1:  [0.11699039]
uuuuu1:  [0.11593378]
uuuuu1:  [0.11906692]
uuuuu1:  [0.11226402]
uuuuu2:  0.27844523661353765
uuuuu2:  0.2788308435710056
uuuuu2:  0.2784332720364209
uuuuu1:  [0.11568285]
uuuuu1:  [0.11616032]
uuuuu2:  0.27958979212336654
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  218
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08531234]
uuuuu2:  0.19421159123170198
uuuuu1:  [0.08896872]
uuuuu1:  [0.08909034]
uuuuu2:  0.19446696913590933
uuuuu2:  0.1949326939767631
uuuuu1:  [0.09166349]
uuuuu1:  [0.09272923]
uuuuu1:  [0.08732922]
uuuuu2:  0.19356031217830244
uuuuu2:  0.19334162703863775
uuuuu1:  [0.08507834]
uuuuu1:  [0.08314516]
uuuuu2:  0.19470266934811975
uuuuu1:  [0.07392654]
uuuuu1:  [0.08173389]
uuuuu2:  0.19365756785720492
uuuuu1:  [0.0825745]
uuuuu2:  0.19479930608478135
uuuuu1:  [0.08562721]
uuuuu2:  0.19450833316264715
uuuuu1:  [0.08670982]
uuuuu1:  [0.0873577]
uuuuu1:  [0.08531869]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  219
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04348776]
in if
in if  cur_best:  [0.04348776] best_act:  901
uuuuu2:  0.1284634709381778
in if
in if  cur_best:  0.1284634709381778 best_act:  908
uuuuu2:  0.12845190975582202
uuuuu1:  [0.04596692]
uuuuu2:  0.12914357942725466
in if
in if  cur_best:  0.12914357942725466 best_act:  981
uuuuu2:  0.12910918837348256
uuuuu2:  0.1275835125565005
uuuuu2:  0.12711445337435678
uuuuu2:  0.12876273776240774
uuuuu2:  0.12862072457035417
uuuuu2:  0.12845411115272864
uuuuu1:  [0.04595212]
uuuuu2:  0.1291620526880096
in if
in if  cur_best:  0.1291620526880096 best_act:  2989
uuuuu2:  0.1277875959046906
uuuuu1:  [0.03732211]
uuuuu2:  0.12847841888500533
uuuuu2:  0.1291350817273074
uuuuu1:  [0.04317921]
uuuuu1:  [0.04101825]
a:  2989
ChessGame==>getNextState  param action number:  2989 self.n*self.n:  64
selected action:  6 7 6 6
MOVE:  f7f6  by converting:  6 7 6 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  f7f6
MOVE FROM:  53 MOVE TO:  45
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  45
piece moved: PAWN
position:  f7f6
board:  . n b q k b n R
. p p p p . p p
P . . . . p . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p . p p
P . . . . p . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2989 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . P . .
. P P P P . P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1 -1  0  0  0  0  1  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1 -1  0  0  0  0  1  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  220
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . P . .
. P P P P . P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024292239686474204
POLICY:  137  :  0.000242529422394
POLICY:  388  :  0.00024408454191870987
POLICY:  389  :  0.0002471121260896325
POLICY:  908  :  0.0002423068945063278
POLICY:  909  :  0.0002427036815788597
POLICY:  965  :  0.00024427438620477915
POLICY:  981  :  0.00024381984258070588
POLICY:  1428  :  0.0002434737834846601
POLICY:  1429  :  0.00024071859661489725
POLICY:  1948  :  0.0002410702727502212
POLICY:  1949  :  0.0002444799174554646
POLICY:  2468  :  0.0002435717760818079
POLICY:  2469  :  0.00024267315166071057
POLICY:  2542  :  0.0002429888118058443
POLICY:  2859  :  0.00024510640650987625
POLICY:  3508  :  0.00024187976669054478
POLICY:  3509  :  0.00024350403691641986
POLICY:  3565  :  0.00024268064589705318
POLICY:  3581  :  0.00024378187663387507
POLICY:  3632  :  0.00024298833159264177
POLICY:  3641  :  0.0002470359031576663
POLICY:  4028  :  0.00024548437795601785
POLICY:  4029  :  0.00024465456954203546
MCTS.py==>search  returning value of canonical board -v:  [-0.01710174]
MCTS.py==>search  returning value of canonical board -v2:  [0.01710174]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01710174]
MCTS.py==>search  returning value of canonical board -v2:  [0.01710174]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  514 COUNT:  1
CNT NUM:  530 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  587 COUNT:  1
CNT NUM:  1106 COUNT:  1
CNT NUM:  1107 COUNT:  1
CNT NUM:  1627 COUNT:  1
CNT NUM:  2089 COUNT:  1
CNT NUM:  2146 COUNT:  1
CNT NUM:  2147 COUNT:  1
CNT NUM:  2796 COUNT:  1
CNT NUM:  3187 COUNT:  1
CNT NUM:  3706 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  221
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.1222934]
uuuuu2:  0.28038687293663156
uuuuu1:  [0.12310071]
uuuuu1:  [0.13050927]
uuuuu2:  0.280737883376257
uuuuu2:  0.2808405190916695
uuuuu1:  [0.11788702]
uuuuu1:  [0.12165885]
uuuuu2:  0.2795608331991578
uuuuu2:  0.27894186788406206
uuuuu1:  [0.11905738]
uuuuu1:  [0.12513281]
uuuuu1:  [0.13267922]
uuuuu1:  [0.10665692]
uuuuu1:  [0.12363761]
uuuuu2:  0.2792356544048661
uuuuu1:  [0.12258793]
uuuuu1:  [0.12950619]
uuuuu1:  [0.1320054]
uuuuu1:  [0.12658484]
uuuuu1:  [0.12725112]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  222
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09000133]
uuuuu2:  0.2063471316853019
uuuuu1:  [0.08765414]
uuuuu1:  [0.08973653]
uuuuu1:  [0.09379632]
uuuuu1:  [0.08630099]
uuuuu2:  0.2051920339513403
uuuuu2:  0.20514063264755095
uuuuu1:  [0.08753089]
uuuuu1:  [0.08990735]
uuuuu2:  0.20681897755765627
uuuuu1:  [0.09183764]
uuuuu1:  [0.09172148]
uuuuu2:  0.20546428609451212
uuuuu1:  [0.08225387]
uuuuu1:  [0.09406292]
uuuuu1:  [0.08921392]
uuuuu2:  0.20649932763640624
uuuuu1:  [0.08515343]
uuuuu1:  [0.08659649]
uuuuu1:  [0.08530855]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  223
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.02429088]
in if
in if  cur_best:  [0.02429088] best_act:  129
uuuuu2:  0.08626357296280736
in if
in if  cur_best:  0.08626357296280736 best_act:  137
uuuuu2:  0.08685289724963141
in if
in if  cur_best:  0.08685289724963141 best_act:  324
uuuuu2:  0.08634914694428811
uuuuu2:  0.0863254440342394
uuuuu2:  0.08689748980630664
in if
in if  cur_best:  0.08689748980630664 best_act:  981
uuuuu2:  0.08678637367257667
uuuuu2:  0.08591496144183529
uuuuu2:  0.08568292160962736
uuuuu2:  0.08663365957933174
uuuuu2:  0.08637038371549896
uuuuu2:  0.08645803008255774
uuuuu2:  0.08652028972628567
uuuuu1:  [0.02239901]
uuuuu2:  0.08607992851481033
uuuuu2:  0.0869945707087094
in if
in if  cur_best:  0.0869945707087094 best_act:  3509
uuuuu2:  0.08644622784669087
uuuuu2:  0.08678615607209099
uuuuu1:  [0.0281902]
uuuuu2:  0.0871054847848455
in if
in if  cur_best:  0.0871054847848455 best_act:  4029
a:  4029
ChessGame==>getNextState  param action number:  4029 self.n*self.n:  64
selected action:  8 7 8 6
MOVE:  h7h6  by converting:  8 7 8 6
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  h7h6
MOVE FROM:  55 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
piece moved: PAWN
position:  h7h6
board:  . n b q k b n R
. p p p p . p .
p . . . . . . p
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p . p .
p . . . . . . p
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  4029 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . P
. P P P P . P .
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  0  1  0  0  0  0  0  0  1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  0  1  0  0  0  0  0  0  1
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  224
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . P
. P P P P . P .
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 3], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 2  at:  3642
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  1 6 0 5  at:  901
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  5 6 5 5  at:  2989
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  5 6 5 4  at:  2988
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.0002467891317792237
POLICY:  908  :  0.00024228169058915228
POLICY:  909  :  0.00024303614918608218
POLICY:  965  :  0.0002448361774440855
POLICY:  981  :  0.00024402847338933498
POLICY:  1428  :  0.0002431018656352535
POLICY:  1429  :  0.00024093793763313442
POLICY:  1948  :  0.00024092454987112433
POLICY:  1949  :  0.00024397617380600423
POLICY:  2468  :  0.00024353530898224562
POLICY:  2469  :  0.00024281549849547446
POLICY:  2988  :  0.00024618604220449924
POLICY:  2989  :  0.0002433057816233486
POLICY:  3508  :  0.0002417979558231309
POLICY:  3509  :  0.00024407818273175508
POLICY:  3565  :  0.0002431157772662118
POLICY:  3581  :  0.00024356460198760033
POLICY:  3632  :  0.00024294258037116379
POLICY:  3641  :  0.0002472204505465925
POLICY:  3642  :  0.0002454157220199704
POLICY:  4028  :  0.0002457110967952758
POLICY:  4029  :  0.00024481190484948456
MCTS.py==>search  returning value of canonical board -v:  [-0.01855641]
MCTS.py==>search  returning value of canonical board -v2:  [0.01855641]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01855641]
MCTS.py==>search  returning value of canonical board -v2:  [0.01855641]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  225
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.12428625]
uuuuu2:  0.28436419035890176
uuuuu1:  [0.12510261]
uuuuu1:  [0.13251579]
uuuuu2:  0.284720179918706
uuuuu2:  0.2848242715325876
uuuuu1:  [0.1198903]
uuuuu1:  [0.1236613]
uuuuu2:  0.2835264331604608
uuuuu2:  0.28289868775696175
uuuuu1:  [0.12105221]
uuuuu1:  [0.12712546]
uuuuu1:  [0.13467284]
uuuuu1:  [0.10865413]
uuuuu1:  [0.12565291]
uuuuu2:  0.28319664167060904
uuuuu1:  [0.12459623]
uuuuu1:  [0.13150217]
uuuuu1:  [0.13401014]
uuuuu1:  [0.12861149]
uuuuu1:  [0.12926158]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  226
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09273291]
uuuuu2:  0.21170769012398433
uuuuu1:  [0.09034774]
uuuuu1:  [0.09244423]
uuuuu1:  [0.09649905]
uuuuu1:  [0.08899383]
uuuuu2:  0.21052258485439712
uuuuu2:  0.2104698482294403
uuuuu1:  [0.09022906]
uuuuu1:  [0.0925996]
uuuuu2:  0.21219179377454064
uuuuu1:  [0.09455661]
uuuuu1:  [0.09441218]
uuuuu2:  0.2108019096596002
uuuuu1:  [0.08495062]
uuuuu1:  [0.09675056]
uuuuu1:  [0.09190768]
uuuuu2:  0.21186383987509239
uuuuu1:  [0.08788216]
uuuuu1:  [0.08932175]
uuuuu1:  [0.0880187]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  227
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03098047]
in if
in if  cur_best:  [0.03098047] best_act:  129
uuuuu2:  0.09960859414267151
in if
in if  cur_best:  0.09960859414267151 best_act:  137
uuuuu2:  0.1002890872139472
in if
in if  cur_best:  0.1002890872139472 best_act:  324
uuuuu2:  0.09970740646515859
uuuuu2:  0.09968003670216419
uuuuu2:  0.10034057826314781
in if
in if  cur_best:  0.10034057826314781 best_act:  981
uuuuu2:  0.1002122724037072
uuuuu2:  0.09920605223171985
uuuuu2:  0.09893811571254392
uuuuu2:  0.10003593335801916
uuuuu2:  0.09973192857630919
uuuuu2:  0.09983313388353895
uuuuu2:  0.0999050251276709
uuuuu1:  [0.02915343]
uuuuu2:  0.09939653979969898
uuuuu2:  0.10045267763341861
in if
in if  cur_best:  0.10045267763341861 best_act:  3509
uuuuu2:  0.0998195058354294
uuuuu2:  0.10021202114030922
uuuuu1:  [0.03497973]
uuuuu1:  [0.03173396]
a:  3509
ChessGame==>getNextState  param action number:  3509 self.n*self.n:  64
selected action:  7 7 7 6
MOVE:  g7g6  by converting:  7 7 7 6
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  g7g6
MOVE FROM:  54 MOVE TO:  46
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  46
piece moved: PAWN
position:  g7g6
board:  . n b q k b n R
. p p p p . . p
p . . . . . p .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p . . p
p . . . . . p .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3509 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . P .
. P P P P . . P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  0  1  1  0  0  0  0  0  1  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  0  1  1  0  0  0  0  0  1  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  228
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . P .
. P P P P . . P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.00024660417693667114
POLICY:  908  :  0.00024222012143582106
POLICY:  909  :  0.00024321784439962357
POLICY:  965  :  0.000244559021666646
POLICY:  981  :  0.0002444191777613014
POLICY:  1428  :  0.00024344146368093789
POLICY:  1429  :  0.00024060190480668098
POLICY:  1948  :  0.00024097344430629164
POLICY:  1949  :  0.00024404848227277398
POLICY:  2468  :  0.0002435523783788085
POLICY:  2469  :  0.00024255590687971562
POLICY:  2988  :  0.0002458641829434782
POLICY:  2989  :  0.00024307082640007138
POLICY:  3508  :  0.0002419225056655705
POLICY:  3509  :  0.00024378116359002888
POLICY:  3565  :  0.0002431866741972044
POLICY:  3581  :  0.00024352030595764518
POLICY:  3632  :  0.0002431561442790553
POLICY:  3641  :  0.0002469997853040695
POLICY:  4028  :  0.00024610516265966
POLICY:  4029  :  0.00024461440625600517
MCTS.py==>search  returning value of canonical board -v:  [-0.01890732]
MCTS.py==>search  returning value of canonical board -v2:  [0.01890732]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01890732]
MCTS.py==>search  returning value of canonical board -v2:  [0.01890732]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  229
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.12625161]
uuuuu2:  0.2882866403456196
uuuuu1:  [0.12707691]
uuuuu1:  [0.13449462]
uuuuu2:  0.2886475403382121
uuuuu2:  0.28875306776631826
uuuuu1:  [0.12186596]
uuuuu1:  [0.12563613]
uuuuu2:  0.28743732732959226
uuuuu2:  0.2868009229597638
uuuuu1:  [0.12301952]
uuuuu1:  [0.12909059]
uuuuu1:  [0.13663894]
uuuuu1:  [0.11062378]
uuuuu1:  [0.12764041]
uuuuu2:  0.287102986776712
uuuuu1:  [0.12657681]
uuuuu1:  [0.13347062]
uuuuu1:  [0.13598722]
uuuuu1:  [0.13061017]
uuuuu1:  [0.1312443]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  230
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09539702]
uuuuu2:  0.21693582774754983
uuuuu1:  [0.09297481]
uuuuu1:  [0.09508504]
uuuuu1:  [0.09913501]
uuuuu1:  [0.09162015]
uuuuu2:  0.2157214562125559
uuuuu2:  0.21566741725260632
uuuuu1:  [0.09286059]
uuuuu1:  [0.09522536]
uuuuu2:  0.217431886374837
uuuuu1:  [0.09720842]
uuuuu1:  [0.09703642]
uuuuu2:  0.2160076789652186
uuuuu1:  [0.08758075]
uuuuu1:  [0.09937181]
uuuuu1:  [0.0945349]
uuuuu2:  0.21709583362872195
uuuuu1:  [0.09054349]
uuuuu1:  [0.09197968]
uuuuu1:  [0.0906619]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  231
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.03687412]
in if
in if  cur_best:  [0.03687412] best_act:  129
uuuuu2:  0.11136579382310044
in if
in if  cur_best:  0.11136579382310044 best_act:  137
uuuuu2:  0.11212660820589548
in if
in if  cur_best:  0.11212660820589548 best_act:  324
uuuuu2:  0.11147626935814832
uuuuu2:  0.11144566903285655
uuuuu2:  0.11218417694901815
in if
in if  cur_best:  0.11218417694901815 best_act:  981
uuuuu2:  0.11204072663720778
uuuuu2:  0.11091573828476016
uuuuu2:  0.11061617614949412
uuuuu2:  0.11184357359058483
uuuuu2:  0.1115036859118906
uuuuu2:  0.11161683688521534
uuuuu2:  0.11169721373964837
uuuuu1:  [0.0351042]
uuuuu2:  0.11112870986019513
uuuuu1:  [0.03724744]
uuuuu2:  0.11160160026422854
uuuuu2:  0.11204044571618871
uuuuu1:  [0.04096142]
uuuuu1:  [0.03766994]
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  2 8 3 6
MOVE:  b8c6  by converting:  2 8 3 6
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  b8c6
MOVE FROM:  57 MOVE TO:  42
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  42
position:  b8c6
board:  . . b q k b n R
. p p p p . p p
p . n . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . . b q k b n R
. p p p p . p p
p . n . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  981 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . N . . . . .
. P P P P . P P
. . B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  2  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  0  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  2  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  232
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . N . . . . .
. P P P P . P P
. . B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.0002467083395458758
POLICY:  908  :  0.0002427097933832556
POLICY:  909  :  0.0002431892789900303
POLICY:  965  :  0.00024535536067560315
POLICY:  981  :  0.0002439507661620155
POLICY:  1428  :  0.0002434184425510466
POLICY:  1429  :  0.0002411769819445908
POLICY:  1948  :  0.00024130956444423646
POLICY:  1949  :  0.0002442297409288585
POLICY:  2468  :  0.00024334341287612915
POLICY:  2469  :  0.0002425606653559953
POLICY:  2988  :  0.0002458763192407787
POLICY:  2989  :  0.0002429955784464255
POLICY:  3508  :  0.00024173554265871644
POLICY:  3509  :  0.00024332458269782364
POLICY:  3565  :  0.00024428602773696184
POLICY:  3581  :  0.00024384573043789715
POLICY:  3632  :  0.00024374200438614935
POLICY:  3641  :  0.0002472560736350715
POLICY:  4028  :  0.0002457861555740237
POLICY:  4029  :  0.0002445185964461416
MCTS.py==>search  returning value of canonical board -v:  [-0.00664706]
MCTS.py==>search  returning value of canonical board -v2:  [0.00664706]
MCTS.py==>search  returning value of canonical board -v2:  [-0.00664706]
MCTS.py==>search  returning value of canonical board -v2:  [0.00664706]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  233
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.12819059]
uuuuu2:  0.2921564328318916
uuuuu1:  [0.12902468]
uuuuu1:  [0.1364469]
uuuuu2:  0.2925221773364529
uuuuu2:  0.2926291213034868
uuuuu1:  [0.12381509]
uuuuu1:  [0.12758443]
uuuuu2:  0.291295719131032
uuuuu2:  0.29065077203842715
uuuuu1:  [0.12496043]
uuuuu1:  [0.13102935]
uuuuu1:  [0.13857865]
uuuuu1:  [0.11256698]
uuuuu1:  [0.12960123]
uuuuu2:  0.2909568905846816
uuuuu1:  [0.12853083]
uuuuu1:  [0.13541265]
uuuuu1:  [0.13793775]
uuuuu1:  [0.13258202]
uuuuu1:  [0.1332004]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  234
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09799841]
uuuuu2:  0.22204089862769935
uuuuu1:  [0.09554004]
uuuuu1:  [0.09766369]
uuuuu1:  [0.10170893]
uuuuu1:  [0.09418464]
uuuuu2:  0.22079794973494324
uuuuu2:  0.22074263909606587
uuuuu1:  [0.09543017]
uuuuu1:  [0.0977893]
uuuuu2:  0.2225486308198343
uuuuu1:  [0.0997978]
uuuuu1:  [0.0995989]
uuuuu2:  0.22109090806215362
uuuuu1:  [0.09014896]
uuuuu1:  [0.10193135]
uuuuu1:  [0.09710027]
uuuuu2:  0.22220466986830106
uuuuu1:  [0.09314218]
uuuuu1:  [0.09457506]
uuuuu1:  [0.09324288]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  235
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04220238]
in if
in if  cur_best:  [0.04220238] best_act:  129
uuuuu2:  0.12199511482276319
in if
in if  cur_best:  0.12199511482276319 best_act:  137
uuuuu2:  0.12282854522182562
in if
in if  cur_best:  0.12282854522182562 best_act:  324
uuuuu2:  0.12211613470795954
uuuuu2:  0.12208261373110095
uuuuu1:  [0.05479874]
uuuuu2:  0.12273446667693724
uuuuu2:  0.12150210368180499
uuuuu2:  0.12117394980408575
uuuuu2:  0.12251849633510474
uuuuu2:  0.12214616803782694
uuuuu2:  0.1222701187188142
uuuuu2:  0.12235816715136276
uuuuu1:  [0.0404841]
uuuuu2:  0.12173540235375128
uuuuu1:  [0.04260714]
uuuuu2:  0.12225342783678493
uuuuu2:  0.1227341589433792
uuuuu1:  [0.04636928]
uuuuu1:  [0.04303647]
a:  324
ChessGame==>getNextState  param action number:  324 self.n*self.n:  64
selected action:  1 6 1 5
MOVE:  a6a5  by converting:  1 6 1 5
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  a6a5
MOVE FROM:  40 MOVE TO:  32
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  32
piece moved: PAWN
position:  a6a5
board:  . n b q k b n R
. p p p p . p p
. . . . . . . .
p . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p p . p p
. . . . . . . .
p . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  324 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
P . . . . P . .
. . . . . . . .
. P P P P . P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  1  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  236
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
P . . . . P . .
. . . . . . . .
. P P P P . P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.00024642577045597136
POLICY:  908  :  0.00024233560543507338
POLICY:  909  :  0.00024306378327310085
POLICY:  965  :  0.00024481903528794646
POLICY:  981  :  0.0002439837553538382
POLICY:  1428  :  0.00024321686942130327
POLICY:  1429  :  0.00024099739675875753
POLICY:  1948  :  0.00024090915394481272
POLICY:  1949  :  0.0002439936070004478
POLICY:  2468  :  0.00024358381051570177
POLICY:  2469  :  0.0002429520827718079
POLICY:  2988  :  0.00024618624593131244
POLICY:  2989  :  0.00024332103203050792
POLICY:  3508  :  0.00024165336799342185
POLICY:  3509  :  0.0002439103409415111
POLICY:  3565  :  0.0002429565938655287
POLICY:  3581  :  0.0002435068308841437
POLICY:  3632  :  0.00024289661087095737
POLICY:  3641  :  0.0002472310443408787
POLICY:  4028  :  0.00024599151220172644
POLICY:  4029  :  0.0002444899291731417
MCTS.py==>search  returning value of canonical board -v:  [-0.01806132]
MCTS.py==>search  returning value of canonical board -v2:  [0.01806132]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01806132]
MCTS.py==>search  returning value of canonical board -v2:  [0.01806132]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  237
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.13010421]
uuuuu2:  0.2959756332679204
uuuuu1:  [0.13094701]
uuuuu1:  [0.13837364]
uuuuu2:  0.29634615894932514
uuuuu2:  0.2964545009360486
uuuuu1:  [0.12573874]
uuuuu1:  [0.12950727]
uuuuu2:  0.2951036679300192
uuuuu2:  0.2944502897986266
uuuuu1:  [0.12687597]
uuuuu1:  [0.13294277]
uuuuu1:  [0.14049302]
uuuuu1:  [0.11448477]
uuuuu1:  [0.13153641]
uuuuu2:  0.29476041006435033
uuuuu1:  [0.1304593]
uuuuu1:  [0.1373293]
uuuuu1:  [0.1398628]
uuuuu1:  [0.1345281]
uuuuu1:  [0.13513094]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  238
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10054132]
uuuuu2:  0.2270312048293756
uuuuu1:  [0.0980476]
uuuuu1:  [0.10018436]
uuuuu1:  [0.10422497]
uuuuu1:  [0.09669149]
uuuuu2:  0.22576032101289045
uuuuu2:  0.22570376728309643
uuuuu1:  [0.09794199]
uuuuu1:  [0.1002956]
uuuuu2:  0.22755034815848063
uuuuu1:  [0.10232897]
uuuuu1:  [0.10210377]
uuuuu2:  0.22605986349539
uuuuu1:  [0.09265944]
uuuuu1:  [0.10443334]
uuuuu1:  [0.09960798]
uuuuu2:  0.22719865678214646
uuuuu1:  [0.09568246]
uuuuu1:  [0.09711209]
uuuuu1:  [0.09576584]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  239
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04710222]
in if
in if  cur_best:  [0.04710222] best_act:  129
uuuuu2:  0.13176978427313693
in if
in if  cur_best:  0.13176978427313693 best_act:  137
uuuuu1:  [0.04827367]
uuuuu2:  0.1319005006890217
in if
in if  cur_best:  0.1319005006890217 best_act:  908
uuuuu2:  0.13186429389585871
uuuuu1:  [0.059722]
uuuuu2:  0.13256837554843512
in if
in if  cur_best:  0.13256837554843512 best_act:  1428
uuuuu2:  0.13123727137880753
uuuuu2:  0.13088282468036164
uuuuu2:  0.13233510091777462
uuuuu2:  0.13193294039288508
uuuuu2:  0.13206682243003
uuuuu2:  0.1321619256067381
uuuuu1:  [0.04543143]
uuuuu2:  0.13148926274516867
uuuuu1:  [0.04753588]
uuuuu2:  0.13204879421695345
uuuuu2:  0.1325680431582028
uuuuu1:  [0.05134233]
uuuuu1:  [0.0479715]
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  3 7 3 5
MOVE:  c7c5  by converting:  3 7 3 5
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  c7c5
MOVE FROM:  50 MOVE TO:  34
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  34
piece moved: PAWN
position:  c7c5
board:  . n b q k b n R
. p . p p . p p
p . . . . . . .
. . p . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p . p p . p p
p . . . . . . .
. . p . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  1428 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . P . . P . .
P . . . . . . .
. P . P P . P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  0  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  0  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  1  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  240
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . P . . P . .
P . . . . . . .
. P . P P . P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.0002468437305651605
POLICY:  908  :  0.00024220783961936831
POLICY:  909  :  0.00024315500922966748
POLICY:  965  :  0.00024452307843603194
POLICY:  981  :  0.00024415168445557356
POLICY:  1428  :  0.00024336831120308489
POLICY:  1429  :  0.00024075328838080168
POLICY:  1948  :  0.0002410089218756184
POLICY:  1949  :  0.0002438867522869259
POLICY:  2468  :  0.00024338322691619396
POLICY:  2469  :  0.00024284483515657485
POLICY:  2988  :  0.00024607524392195046
POLICY:  2989  :  0.00024349377781618387
POLICY:  3508  :  0.00024176914303097874
POLICY:  3509  :  0.00024389350437559187
POLICY:  3565  :  0.00024328543804585934
POLICY:  3581  :  0.00024392693012487143
POLICY:  3632  :  0.0002429276064503938
POLICY:  3641  :  0.00024651215062476695
POLICY:  4028  :  0.00024562000180594623
POLICY:  4029  :  0.0002445291611365974
MCTS.py==>search  returning value of canonical board -v:  [-0.0168885]
MCTS.py==>search  returning value of canonical board -v2:  [0.0168885]
MCTS.py==>search  returning value of canonical board -v2:  [-0.0168885]
MCTS.py==>search  returning value of canonical board -v2:  [0.0168885]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  324 COUNT:  1
CNT NUM:  454 COUNT:  1
CNT NUM:  981 COUNT:  1
CNT NUM:  1428 COUNT:  1
CNT NUM:  1949 COUNT:  1
CNT NUM:  2468 COUNT:  1
CNT NUM:  2469 COUNT:  1
CNT NUM:  2542 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  3565 COUNT:  1
CNT NUM:  3581 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  241
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.11819348]
uuuuu2:  0.27997237188689483
uuuuu1:  [0.1188379]
uuuuu2:  0.2798794161324856
uuuuu1:  [0.11640283]
uuuuu1:  [0.12011163]
uuuuu1:  [0.11966197]
uuuuu1:  [0.11898664]
uuuuu1:  [0.11775298]
uuuuu1:  [0.12201199]
uuuuu2:  0.2818735210559749
uuuuu1:  [0.12264511]
uuuuu1:  [0.11882631]
uuuuu1:  [0.1177616]
uuuuu1:  [0.12089513]
uuuuu1:  [0.11409201]
uuuuu2:  0.2820851981190113
uuuuu2:  0.2824758459042503
uuuuu2:  0.2820730771355553
uuuuu1:  [0.11752384]
uuuuu1:  [0.11798818]
uuuuu2:  0.283244715773811
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  242
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08750103]
uuuuu2:  0.19857644164507565
uuuuu1:  [0.09116761]
uuuuu1:  [0.09132329]
uuuuu2:  0.19883755909522707
uuuuu2:  0.19931375096974874
uuuuu1:  [0.09387127]
uuuuu1:  [0.09492764]
uuuuu1:  [0.08952586]
uuuuu2:  0.19791052527972464
uuuuu2:  0.19768692525358889
uuuuu1:  [0.08727683]
uuuuu1:  [0.08533601]
uuuuu2:  0.19907855660283666
uuuuu1:  [0.07611898]
uuuuu1:  [0.08394719]
uuuuu2:  0.1980099667524181
uuuuu1:  [0.0847751]
uuuuu2:  0.19917736522273805
uuuuu1:  [0.08782474]
uuuuu2:  0.19887985276673048
uuuuu1:  [0.08893117]
uuuuu1:  [0.08957866]
uuuuu1:  [0.08752275]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  243
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.04872052]
in if
in if  cur_best:  [0.04872052] best_act:  901
uuuuu2:  0.13875640739463072
in if
in if  cur_best:  0.13875640739463072 best_act:  908
uuuuu2:  0.1387439198904616
uuuuu1:  [0.05114388]
uuuuu2:  0.13949100852204624
in if
in if  cur_best:  0.13949100852204624 best_act:  981
uuuuu2:  0.1394538619384059
uuuuu2:  0.13780594371179053
uuuuu2:  0.13729930188984374
uuuuu2:  0.1390796525092091
uuuuu2:  0.13892626073030037
uuuuu2:  0.1387462976708826
uuuuu1:  [0.05117606]
uuuuu1:  [0.05265374]
uuuuu2:  0.13802637892187103
uuuuu1:  [0.04249699]
uuuuu2:  0.13877255302252453
uuuuu2:  0.1394818299570644
uuuuu1:  [0.04840824]
uuuuu1:  [0.04619771]
a:  981
ChessGame==>getNextState  param action number:  981 self.n*self.n:  64
selected action:  2 8 3 6
MOVE:  b8c6  by converting:  2 8 3 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  b8c6
MOVE FROM:  57 MOVE TO:  42
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  42
position:  b8c6
board:  . . b q k b n R
. p p p p p p p
P . n . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . . b q k b n R
. p p p p p p p
P . n . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  981 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . N . . . . .
. P P P P P P P
. . B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  0  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  2  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  0  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  2  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  244
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . N . . . . .
. P P P P P P P
. . B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024231111456174403
POLICY:  137  :  0.0002426708524581045
POLICY:  388  :  0.00024445788585580885
POLICY:  389  :  0.00024757080245763063
POLICY:  908  :  0.0002427452855044976
POLICY:  909  :  0.00024260830832645297
POLICY:  965  :  0.0002453974448144436
POLICY:  981  :  0.00024358653172384948
POLICY:  1428  :  0.00024320432567037642
POLICY:  1429  :  0.0002413643233012408
POLICY:  1948  :  0.00024141509493347257
POLICY:  1949  :  0.0002444532874505967
POLICY:  2468  :  0.00024299093638546765
POLICY:  2469  :  0.00024237140314653516
POLICY:  2542  :  0.00024289239081554115
POLICY:  2859  :  0.00024562241742387414
POLICY:  3508  :  0.00024225571542046964
POLICY:  3509  :  0.00024315586779266596
POLICY:  3565  :  0.00024358369410037994
POLICY:  3581  :  0.00024360707902815193
POLICY:  3632  :  0.00024389092868659645
POLICY:  3641  :  0.0002474964130669832
POLICY:  4028  :  0.00024558769655413926
POLICY:  4029  :  0.00024417502572759986
MCTS.py==>search  returning value of canonical board -v:  [-0.00924388]
MCTS.py==>search  returning value of canonical board -v2:  [0.00924388]
MCTS.py==>search  returning value of canonical board -v2:  [-0.00924388]
MCTS.py==>search  returning value of canonical board -v2:  [0.00924388]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  245
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.1200258]
uuuuu2:  0.2835390427056468
uuuuu1:  [0.12066727]
uuuuu2:  0.28344490275375966
uuuuu1:  [0.11821995]
uuuuu1:  [0.12192386]
uuuuu1:  [0.12149216]
uuuuu1:  [0.12079147]
uuuuu1:  [0.11956273]
uuuuu1:  [0.12382762]
uuuuu2:  0.2854644113118726
uuuuu1:  [0.12446503]
uuuuu1:  [0.12063884]
uuuuu1:  [0.11956614]
uuuuu1:  [0.12270005]
uuuuu1:  [0.1158967]
uuuuu2:  0.2856787850067182
uuuuu2:  0.2860744093974938
uuuuu2:  0.28566650960960455
uuuuu1:  [0.11934138]
uuuuu1:  [0.11979276]
uuuuu2:  0.2868530741825624
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  246
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08964263]
uuuuu2:  0.20284739136624502
uuuuu1:  [0.0933192]
uuuuu1:  [0.0935082]
uuuuu2:  0.2031141248879288
uuuuu2:  0.20360055861962575
uuuuu1:  [0.09603157]
uuuuu1:  [0.09707876]
uuuuu1:  [0.09167524]
uuuuu2:  0.202167152580312
uuuuu2:  0.20193874340128096
uuuuu1:  [0.08942802]
uuuuu1:  [0.08747974]
uuuuu2:  0.20336030573062788
uuuuu1:  [0.07826425]
uuuuu1:  [0.08611286]
uuuuu2:  0.20226873282398233
uuuuu1:  [0.08692836]
uuuuu2:  0.20346123951021144
uuuuu1:  [0.089975]
uuuuu2:  0.20315732820482124
uuuuu1:  [0.09110473]
uuuuu1:  [0.09175183]
uuuuu1:  [0.08967941]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  247
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05359104]
in if
in if  cur_best:  [0.05359104] best_act:  901
uuuuu2:  0.14833683905438128
in if
in if  cur_best:  0.14833683905438128 best_act:  908
uuuuu2:  0.14832348935089074
uuuuu1:  [0.05596247]
uuuuu1:  [0.06531721]
uuuuu2:  0.14908244932456854
in if
in if  cur_best:  0.14908244932456854 best_act:  1428
uuuuu2:  0.14732075063730715
uuuuu2:  0.14677912774715404
uuuuu2:  0.14868240261743862
uuuuu2:  0.1485184199081174
uuuuu2:  0.14832603130508398
uuuuu1:  [0.05603839]
uuuuu1:  [0.05747]
uuuuu2:  0.14755640578933651
uuuuu1:  [0.04731364]
uuuuu2:  0.14835409945663067
uuuuu2:  0.1491123483941705
in if
in if  cur_best:  0.1491123483941705 best_act:  3581
uuuuu1:  [0.05327531]
uuuuu1:  [0.05101864]
a:  3581
ChessGame==>getNextState  param action number:  3581 self.n*self.n:  64
selected action:  7 8 8 6
MOVE:  g8h6  by converting:  7 8 8 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  g8h6
MOVE FROM:  62 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
position:  g8h6
board:  . n b q k b . R
. p p p p p p p
P . . . . . . n
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . R
. p p p p p p p
P . . . . . . n
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3581 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . N
. P P P P P P P
. N B Q K B . r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  0 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  2
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  0 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  2
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  248
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . N
. P P P P P P P
. N B Q K B . r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [8, 1, 6, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  7 0 5 0  at:  3624
count:  8
inserting:  0 2 1 1  at:  137
count:  9
inserting:  7 6 7 5  at:  4029
count:  10
inserting:  6 6 6 5  at:  3509
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  0 6 0 5  at:  389
count:  16
inserting:  5 4 5 3  at:  2859
count:  17
inserting:  0 2 0 1  at:  129
count:  18
inserting:  7 6 7 4  at:  4028
count:  19
inserting:  6 6 6 4  at:  3508
count:  20
inserting:  4 6 4 4  at:  2468
count:  21
inserting:  3 6 3 4  at:  1948
count:  22
inserting:  2 6 2 4  at:  1428
count:  23
inserting:  1 6 1 4  at:  908
count:  24
inserting:  0 6 0 4  at:  388
count:  25
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.0002428888838039711
POLICY:  137  :  0.0002424718113616109
POLICY:  388  :  0.00024405789736192673
POLICY:  389  :  0.0002479233080521226
POLICY:  908  :  0.00024222361389547586
POLICY:  909  :  0.00024253925948869437
POLICY:  965  :  0.00024457613471895456
POLICY:  981  :  0.0002432257024338469
POLICY:  1428  :  0.00024290106375701725
POLICY:  1429  :  0.00024165122886188328
POLICY:  1948  :  0.00024063672753982246
POLICY:  1949  :  0.00024401978589594364
POLICY:  2468  :  0.000243153321207501
POLICY:  2469  :  0.00024297797062899917
POLICY:  2542  :  0.000242829933995381
POLICY:  2859  :  0.0002455510839354247
POLICY:  3508  :  0.00024185598886106163
POLICY:  3509  :  0.00024395131913479418
POLICY:  3565  :  0.0002426527498755604
POLICY:  3581  :  0.000243342510657385
POLICY:  3624  :  0.00024312363530043513
POLICY:  3632  :  0.00024273685994558036
POLICY:  3641  :  0.000246777490247041
POLICY:  4028  :  0.00024574072449468076
POLICY:  4029  :  0.0002442248514853418
MCTS.py==>search  returning value of canonical board -v:  [-0.02209853]
MCTS.py==>search  returning value of canonical board -v2:  [0.02209853]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02209853]
MCTS.py==>search  returning value of canonical board -v2:  [0.02209853]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  249
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.12183537]
uuuuu2:  0.2870614018932107
uuuuu1:  [0.12247392]
uuuuu2:  0.28696609245608695
uuuuu1:  [0.12001448]
uuuuu1:  [0.12371358]
uuuuu1:  [0.12329961]
uuuuu1:  [0.12257386]
uuuuu1:  [0.12134999]
uuuuu1:  [0.12562071]
uuuuu2:  0.2890106890389607
uuuuu1:  [0.12626235]
uuuuu1:  [0.12242886]
uuuuu1:  [0.12134825]
uuuuu1:  [0.12448254]
uuuuu1:  [0.11767898]
uuuuu2:  0.28922772586318135
uuuuu2:  0.289628265031105
uuuuu2:  0.2892152979708155
uuuuu1:  [0.12113634]
uuuuu1:  [0.12157491]
uuuuu2:  0.2904166030415381
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  250
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09174006]
uuuuu2:  0.20703025187580926
uuuuu1:  [0.0954264]
uuuuu1:  [0.09564804]
uuuuu2:  0.20730248563640127
uuuuu2:  0.2077989499848744
uuuuu1:  [0.0981473]
uuuuu1:  [0.09918551]
uuuuu1:  [0.09378029]
uuuuu2:  0.20633598607214834
uuuuu2:  0.20610286692998414
uuuuu1:  [0.09153484]
uuuuu1:  [0.08957925]
uuuuu2:  0.20755374290684342
uuuuu1:  [0.08036529]
uuuuu1:  [0.08823388]
uuuuu2:  0.20643966097420663
uuuuu1:  [0.08903721]
uuuuu2:  0.20765675801425604
uuuuu1:  [0.09208091]
uuuuu2:  0.20734657983706054
uuuuu1:  [0.09323346]
uuuuu1:  [0.09388018]
uuuuu1:  [0.09179157]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  251
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05816554]
in if
in if  cur_best:  [0.05816554] best_act:  901
uuuuu2:  0.15733497719269574
in if
in if  cur_best:  0.15733497719269574 best_act:  908
uuuuu2:  0.15732081769389825
uuuuu1:  [0.06048819]
uuuuu1:  [0.0698401]
uuuuu2:  0.15812581630995334
in if
in if  cur_best:  0.15812581630995334 best_act:  1428
uuuuu2:  0.1562572526776984
uuuuu2:  0.15568277484998874
uuuuu2:  0.15770150270084898
uuuuu2:  0.15752757277221144
uuuuu2:  0.15732351384346954
uuuuu1:  [0.06060519]
uuuuu1:  [0.06199354]
uuuuu2:  0.1565072027117307
uuuuu1:  [0.05183753]
uuuuu2:  0.15735328461391057
uuuuu1:  [0.05698024]
uuuuu1:  [0.05784655]
uuuuu1:  [0.05554655]
a:  1428
ChessGame==>getNextState  param action number:  1428 self.n*self.n:  64
selected action:  3 7 3 5
MOVE:  c7c5  by converting:  3 7 3 5
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  c7c5
MOVE FROM:  50 MOVE TO:  34
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  34
piece moved: PAWN
position:  c7c5
board:  . n b q k b n R
. p . p p p p p
P . . . . . . .
. . p . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p . p p p p p
P . . . . . . .
. . p . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  1428 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . P . . . . .
p . . . . . . .
. P . P P P P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  0  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  1  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  0  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  1  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  252
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . P . . . . .
p . . . . . . .
. P . P P P P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024258413759525865
POLICY:  137  :  0.0002420856908429414
POLICY:  388  :  0.00024419292458333075
POLICY:  389  :  0.00024726608535274863
POLICY:  908  :  0.0002421829995000735
POLICY:  909  :  0.00024282406957354397
POLICY:  965  :  0.0002447623701300472
POLICY:  981  :  0.000243768299696967
POLICY:  1428  :  0.00024321417731698602
POLICY:  1429  :  0.0002407128195045516
POLICY:  1948  :  0.00024116704298648983
POLICY:  1949  :  0.00024406652664765716
POLICY:  2468  :  0.00024299489450640976
POLICY:  2469  :  0.000242850961512886
POLICY:  2542  :  0.00024332015891559422
POLICY:  2859  :  0.00024545553606003523
POLICY:  3508  :  0.00024184674839489162
POLICY:  3509  :  0.00024399104586336762
POLICY:  3565  :  0.00024286708503495902
POLICY:  3581  :  0.00024352860054932535
POLICY:  3632  :  0.00024279208446387202
POLICY:  3641  :  0.00024668785044923425
POLICY:  4028  :  0.00024548149667680264
POLICY:  4029  :  0.00024430023040622473
MCTS.py==>search  returning value of canonical board -v:  [-0.02423632]
MCTS.py==>search  returning value of canonical board -v2:  [0.02423632]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02423632]
MCTS.py==>search  returning value of canonical board -v2:  [0.02423632]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  253
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.12362298]
uuuuu2:  0.2905410610832079
uuuuu1:  [0.12425866]
uuuuu2:  0.29044459633799813
uuuuu1:  [0.12178727]
uuuuu1:  [0.12548162]
uuuuu1:  [0.12508515]
uuuuu1:  [0.12433466]
uuuuu1:  [0.12311558]
uuuuu1:  [0.12739204]
uuuuu2:  0.2925139768146399
uuuuu1:  [0.12803788]
uuuuu1:  [0.12419716]
uuuuu1:  [0.12310877]
uuuuu1:  [0.12624343]
uuuuu1:  [0.11943966]
uuuuu2:  0.2927336444842999
uuuuu2:  0.2931390388497089
uuuuu2:  0.2927210659453142
uuuuu1:  [0.12290954]
uuuuu1:  [0.12333545]
uuuuu2:  0.29393693282128736
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  254
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09379594]
uuuuu2:  0.21113025884375614
uuuuu1:  [0.09749187]
uuuuu1:  [0.0977455]
uuuuu2:  0.2114078838952596
uuuuu2:  0.2119141801753931
uuuuu1:  [0.10022113]
uuuuu1:  [0.10125054]
uuuuu1:  [0.09584366]
uuuuu2:  0.21042224386765868
uuuuu2:  0.21018450805668124
uuuuu1:  [0.09359993]
uuuuu1:  [0.09163718]
uuuuu2:  0.2116641170402429
uuuuu1:  [0.08242469]
uuuuu1:  [0.09031288]
uuuuu2:  0.21052797193739167
uuuuu1:  [0.09110428]
uuuuu2:  0.21176917224882127
uuuuu1:  [0.0941451]
uuuuu2:  0.21145285133317918
uuuuu1:  [0.09532002]
uuuuu1:  [0.09596637]
uuuuu1:  [0.0938619]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  255
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.0624922]
in if
in if  cur_best:  [0.0624922] best_act:  901
uuuuu2:  0.16584562784652107
in if
in if  cur_best:  0.16584562784652107 best_act:  908
uuuuu2:  0.16583070242427891
uuuuu1:  [0.06476872]
uuuuu1:  [0.07411794]
uuuuu1:  [0.0591033]
uuuuu2:  0.1647096064606571
uuuuu2:  0.16410405366038103
uuuuu2:  0.16623197965529268
in if
in if  cur_best:  0.16623197965529268 best_act:  1949
uuuuu2:  0.1660486414127043
uuuuu2:  0.16583354441546483
uuuuu1:  [0.06492457]
uuuuu1:  [0.06627201]
uuuuu2:  0.16497307693024998
uuuuu1:  [0.05611634]
uuuuu2:  0.1658649255628954
uuuuu1:  [0.06125781]
uuuuu1:  [0.06217015]
uuuuu1:  [0.05982916]
a:  1949
ChessGame==>getNextState  param action number:  1949 self.n*self.n:  64
selected action:  4 7 4 6
MOVE:  d7d6  by converting:  4 7 4 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  d7d6
MOVE FROM:  51 MOVE TO:  43
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  43
piece moved: PAWN
position:  d7d6
board:  . n b q k b n R
. p p . p p p p
P . . p . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p . p p p p
P . . p . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  1949 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . P . . . .
. P P . P P P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  0  1  1  1  1 -1  0  0  1  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  0  1  1  1  1 -1  0  0  1  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  256
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . P . . . .
. P P . P P P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024275593750644475
POLICY:  137  :  0.0002421373501420021
POLICY:  388  :  0.00024404026044066995
POLICY:  389  :  0.0002473581407684833
POLICY:  908  :  0.0002428342995699495
POLICY:  909  :  0.00024261328508146107
POLICY:  965  :  0.00024424202274531126
POLICY:  981  :  0.00024349383602384478
POLICY:  1428  :  0.00024376902729272842
POLICY:  1429  :  0.000241218731389381
POLICY:  1948  :  0.00024105182092171162
POLICY:  1949  :  0.00024435226805508137
POLICY:  2468  :  0.00024333242618013173
POLICY:  2469  :  0.00024255231255665421
POLICY:  2542  :  0.00024258773191832006
POLICY:  2859  :  0.00024493117234669626
POLICY:  3508  :  0.00024219168699346483
POLICY:  3509  :  0.0002441883261781186
POLICY:  3565  :  0.00024271485744975507
POLICY:  3581  :  0.00024359006783924997
POLICY:  3632  :  0.00024294086324516684
POLICY:  3641  :  0.00024670379934832454
POLICY:  4028  :  0.00024625303922221065
POLICY:  4029  :  0.0002442323893774301
MCTS.py==>search  returning value of canonical board -v:  [-0.02006869]
MCTS.py==>search  returning value of canonical board -v2:  [0.02006869]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02006869]
MCTS.py==>search  returning value of canonical board -v2:  [0.02006869]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  257
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.12538946]
uuuuu2:  0.2939795365222164
uuuuu1:  [0.12602228]
uuuuu2:  0.29388193014265074
uuuuu1:  [0.12353907]
uuuuu1:  [0.1272287]
uuuuu1:  [0.12684956]
uuuuu1:  [0.1260746]
uuuuu1:  [0.12486029]
uuuuu1:  [0.12914242]
uuuuu2:  0.29597580118154343
uuuuu1:  [0.1297924]
uuuuu1:  [0.12594455]
uuuuu1:  [0.12484845]
uuuuu1:  [0.12798347]
uuuuu1:  [0.12117951]
uuuuu2:  0.29619806855908654
uuuuu2:  0.2966082606579497
uuuuu2:  0.29618534115646966
uuuuu1:  [0.12466177]
uuuuu1:  [0.12507516]
uuuuu2:  0.29741559749042357
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  258
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09581265]
uuuuu2:  0.2151521489716101
uuuuu1:  [0.09951799]
uuuuu1:  [0.099803]
uuuuu2:  0.21543506259453865
uuuuu2:  0.21595100347995985
uuuuu1:  [0.10225545]
uuuuu1:  [0.10327622]
uuuuu1:  [0.0978677]
uuuuu2:  0.2144306467840711
uuuuu2:  0.21418838226500395
uuuuu1:  [0.09562568]
uuuuu1:  [0.09365589]
uuuuu2:  0.21569617680944478
uuuuu1:  [0.08444487]
uuuuu1:  [0.09235227]
uuuuu2:  0.21453838890277188
uuuuu1:  [0.09313197]
uuuuu2:  0.21580323324943626
uuuuu1:  [0.09616996]
uuuuu2:  0.21548088663205525
uuuuu1:  [0.09736683]
uuuuu1:  [0.09801282]
uuuuu1:  [0.09589279]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  259
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06660742]
in if
in if  cur_best:  [0.06660742] best_act:  901
uuuuu2:  0.17394036191576534
in if
in if  cur_best:  0.17394036191576534 best_act:  908
uuuuu2:  0.1739247080008551
uuuuu1:  [0.06884006]
uuuuu1:  [0.07818674]
uuuuu1:  [0.06317101]
uuuuu2:  0.17274889263456072
uuuuu2:  0.17211378349959694
uuuuu1:  [0.06710409]
uuuuu2:  0.1741532843402769
in if
in if  cur_best:  0.1741532843402769 best_act:  2468
uuuuu2:  0.17392768870635733
uuuuu1:  [0.06903286]
uuuuu1:  [0.07034138]
uuuuu2:  0.17302522279430127
uuuuu1:  [0.06018605]
uuuuu2:  0.17396060153144824
uuuuu1:  [0.06532634]
uuuuu1:  [0.06628244]
uuuuu1:  [0.06390247]
a:  2468
ChessGame==>getNextState  param action number:  2468 self.n*self.n:  64
selected action:  5 7 5 5
MOVE:  e7e5  by converting:  5 7 5 5
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  e7e5
MOVE FROM:  52 MOVE TO:  36
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  36
piece moved: PAWN
position:  e7e5
board:  . n b q k b n R
. p p p . p p p
P . . . . . . .
. . . . p . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p . p p p
P . . . . . . .
. . . . p . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2468 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . P . . .
p . . . . . . .
. P P P . P P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  0  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  1  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  0  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  1  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  260
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . P . . .
p . . . . . . .
. P P P . P P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [6, 5, 5, 4], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  5 4 4 3  at:  2851
count:  8
inserting:  0 2 1 1  at:  137
count:  9
inserting:  7 6 7 5  at:  4029
count:  10
inserting:  6 6 6 5  at:  3509
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  0 6 0 5  at:  389
count:  16
inserting:  5 4 5 3  at:  2859
count:  17
inserting:  0 2 0 1  at:  129
count:  18
inserting:  7 6 7 4  at:  4028
count:  19
inserting:  6 6 6 4  at:  3508
count:  20
inserting:  4 6 4 4  at:  2468
count:  21
inserting:  3 6 3 4  at:  1948
count:  22
inserting:  2 6 2 4  at:  1428
count:  23
inserting:  1 6 1 4  at:  908
count:  24
inserting:  0 6 0 4  at:  388
count:  25
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024276661861222237
POLICY:  137  :  0.0002430282038403675
POLICY:  388  :  0.00024330934684257954
POLICY:  389  :  0.00024724603281356394
POLICY:  908  :  0.00024287763517349958
POLICY:  909  :  0.00024296385527122766
POLICY:  965  :  0.0002448791638016701
POLICY:  981  :  0.00024362929980270565
POLICY:  1428  :  0.00024350298917852342
POLICY:  1429  :  0.00024150569515768439
POLICY:  1948  :  0.00024061482690740377
POLICY:  1949  :  0.0002444261044729501
POLICY:  2468  :  0.00024286247207783163
POLICY:  2469  :  0.00024325388949364424
POLICY:  2542  :  0.0002430202002869919
POLICY:  2851  :  0.00024373552878387272
POLICY:  2859  :  0.0002449211315251887
POLICY:  3508  :  0.00024188555835280567
POLICY:  3509  :  0.00024371503968723118
POLICY:  3565  :  0.00024278824275825173
POLICY:  3581  :  0.00024398035020567477
POLICY:  3632  :  0.00024285369727294892
POLICY:  3641  :  0.00024684416712261736
POLICY:  4028  :  0.0002458258531987667
POLICY:  4029  :  0.00024424539878964424
MCTS.py==>search  returning value of canonical board -v:  [-0.02017549]
MCTS.py==>search  returning value of canonical board -v2:  [0.02017549]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02017549]
MCTS.py==>search  returning value of canonical board -v2:  [0.02017549]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  66 COUNT:  1
CNT NUM:  326 COUNT:  1
CNT NUM:  514 COUNT:  1
CNT NUM:  530 COUNT:  1
CNT NUM:  586 COUNT:  1
CNT NUM:  587 COUNT:  1
CNT NUM:  1106 COUNT:  1
CNT NUM:  1107 COUNT:  1
CNT NUM:  1627 COUNT:  1
CNT NUM:  2089 COUNT:  1
CNT NUM:  2146 COUNT:  1
CNT NUM:  2147 COUNT:  1
CNT NUM:  2796 COUNT:  1
CNT NUM:  3187 COUNT:  1
CNT NUM:  3706 COUNT:  1
IND:  66 PI:  1
Coach.py ==>executeEpisode  action:  66
ChessGame==>getNextState  param action number:  66 self.n*self.n:  64
selected action:  1 2 1 3
MOVE:  a2a3  by converting:  1 2 1 3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a2a3
MOVE FROM:  8 MOVE TO:  16
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  16
piece moved: PAWN
position:  a2a3
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R self.curPlayer:  -1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R player:  -1
if player boardturn2:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  261
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.13199346]
uuuuu2:  0.2997461755079412
uuuuu1:  [0.13284484]
uuuuu1:  [0.14027584]
uuuuu2:  0.30012142145201526
uuuuu2:  0.3002311436470781
uuuuu1:  [0.1276379]
uuuuu1:  [0.13140559]
uuuuu2:  0.29886310188351617
uuuuu2:  0.29820140012826335
uuuuu1:  [0.12876709]
uuuuu1:  [0.13483182]
uuuuu1:  [0.14238298]
uuuuu1:  [0.11637814]
uuuuu1:  [0.13344695]
uuuuu2:  0.2985154711298922
uuuuu1:  [0.13236319]
uuuuu1:  [0.13922152]
uuuuu1:  [0.14176331]
uuuuu1:  [0.13644938]
uuuuu1:  [0.13703689]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  262
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10302953]
uuuuu2:  0.23191415495643974
uuuuu1:  [0.10050121]
uuuuu1:  [0.10265081]
uuuuu1:  [0.1066869]
uuuuu1:  [0.09914441]
uuuuu2:  0.23061593717809745
uuuuu2:  0.23055816709990634
uuuuu1:  [0.10039977]
uuuuu1:  [0.10274799]
uuuuu2:  0.23244446393560034
uuuuu1:  [0.10480569]
uuuuu1:  [0.10455474]
uuuuu2:  0.23092192217145835
uuuuu1:  [0.09511591]
uuuuu1:  [0.10688153]
uuuuu1:  [0.10206173]
uuuuu2:  0.23208520843850117
uuuuu1:  [0.09816808]
uuuuu1:  [0.09959453]
uuuuu1:  [0.09823452]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  263
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05166288]
in if
in if  cur_best:  [0.05166288] best_act:  129
uuuuu2:  0.1408678247654833
in if
in if  cur_best:  0.1408678247654833 best_act:  137
uuuuu1:  [0.05285377]
uuuuu2:  0.1410075664920741
in if
in if  cur_best:  0.1410075664920741 best_act:  908
uuuuu2:  0.14096885980204849
uuuuu1:  [0.06430445]
uuuuu1:  [0.05397228]
uuuuu2:  0.14029854453559187
uuuuu2:  0.13991962507631825
uuuuu2:  0.14147217367956183
in if
in if  cur_best:  0.14147217367956183 best_act:  1949
uuuuu2:  0.1410422459942413
uuuuu2:  0.1411853719123098
uuuuu2:  0.14128704148477705
uuuuu1:  [0.0500363]
uuuuu2:  0.14056793463769143
uuuuu1:  [0.05212346]
uuuuu2:  0.14116609894184456
uuuuu2:  0.14172119940944464
in if
in if  cur_best:  0.14172119940944464 best_act:  3581
uuuuu1:  [0.05597113]
uuuuu1:  [0.05256492]
a:  3581
ChessGame==>getNextState  param action number:  3581 self.n*self.n:  64
selected action:  7 8 8 6
MOVE:  g8h6  by converting:  7 8 8 6
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  g8h6
MOVE FROM:  62 MOVE TO:  47
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  47
position:  g8h6
board:  . n b q k b . R
. p p p p . p p
p . . . . . . n
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . R
. p p p p . p p
p . . . . . . n
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3581 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . N
. P P P P . P P
. N B Q K B . r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  0 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  2
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  0 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  2
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  264
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . N
. P P P P . P P
. N B Q K B . r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [8, 1, 6, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  7 0 5 0  at:  3624
count:  7
inserting:  1 6 0 5  at:  901
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  5 6 5 5  at:  2989
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  5 6 5 4  at:  2988
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.0002467130252625793
POLICY:  908  :  0.00024206853413488716
POLICY:  909  :  0.00024293974274769425
POLICY:  965  :  0.000244761846261099
POLICY:  981  :  0.00024392017803620547
POLICY:  1428  :  0.00024290088913403451
POLICY:  1429  :  0.00024106331693474203
POLICY:  1948  :  0.000240671171923168
POLICY:  1949  :  0.00024399357789661735
POLICY:  2468  :  0.0002435242204228416
POLICY:  2469  :  0.00024315023620147258
POLICY:  2988  :  0.0002466502191964537
POLICY:  2989  :  0.0002431619941489771
POLICY:  3508  :  0.00024178874446079135
POLICY:  3509  :  0.0002441795077174902
POLICY:  3565  :  0.00024311912420671433
POLICY:  3581  :  0.00024350368767045438
POLICY:  3624  :  0.00024366905563510954
POLICY:  3632  :  0.00024288127315230668
POLICY:  3641  :  0.00024741230299696326
POLICY:  4028  :  0.00024564703926444054
POLICY:  4029  :  0.0002447985461913049
MCTS.py==>search  returning value of canonical board -v:  [-0.01950161]
MCTS.py==>search  returning value of canonical board -v2:  [0.01950161]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01950161]
MCTS.py==>search  returning value of canonical board -v2:  [0.01950161]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  265
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.13385923]
uuuuu2:  0.3034698732575087
uuuuu1:  [0.13471909]
uuuuu1:  [0.14215441]
uuuuu2:  0.303849780820618
uuuuu2:  0.30396086607657774
uuuuu1:  [0.12951344]
uuuuu1:  [0.13328037]
uuuuu2:  0.30257582935377186
uuuuu2:  0.30190590738575823
uuuuu1:  [0.13063471]
uuuuu1:  [0.13669738]
uuuuu1:  [0.14424947]
uuuuu1:  [0.11824799]
uuuuu1:  [0.13533373]
uuuuu2:  0.30222388004011036
uuuuu1:  [0.13424343]
uuuuu1:  [0.14109023]
uuuuu1:  [0.14364022]
uuuuu1:  [0.13834679]
uuuuu1:  [0.13891914]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  266
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10546642]
uuuuu2:  0.2366963932383449
uuuuu1:  [0.10290422]
uuuuu1:  [0.10506639]
uuuuu1:  [0.10909804]
uuuuu1:  [0.10154673]
uuuuu2:  0.2353714052666998
uuuuu2:  0.2353124439275461
uuuuu1:  [0.10280686]
uuuuu1:  [0.10514981]
uuuuu2:  0.23723763757374478
uuuuu1:  [0.10723133]
uuuuu1:  [0.10695517]
uuuuu2:  0.23568369989281776
uuuuu1:  [0.09752172]
uuuuu1:  [0.1092792]
uuuuu1:  [0.10446489]
uuuuu2:  0.23687097396741855
uuuuu1:  [0.10060243]
uuuuu1:  [0.10202579]
uuuuu1:  [0.10065228]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  267
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05594635]
in if
in if  cur_best:  [0.05594635] best_act:  129
uuuuu2:  0.14941289121400725
in if
in if  cur_best:  0.14941289121400725 best_act:  137
uuuuu1:  [0.05715549]
uuuuu2:  0.1495611096977379
in if
in if  cur_best:  0.1495611096977379 best_act:  908
uuuuu2:  0.14952005505324628
uuuuu1:  [0.06860837]
uuuuu1:  [0.05827071]
uuuuu2:  0.14880907834757978
uuuuu2:  0.1484071735688159
uuuuu2:  0.15005390003702873
in if
in if  cur_best:  0.15005390003702873 best_act:  1949
uuuuu2:  0.1495978928644638
uuuuu2:  0.14974970082530842
uuuuu2:  0.14985753769150634
uuuuu1:  [0.05436128]
uuuuu2:  0.14909480969954847
uuuuu1:  [0.0564322]
uuuuu2:  0.14972925875314408
uuuuu1:  [0.0556574]
uuuuu1:  [0.06031859]
uuuuu1:  [0.05687915]
a:  1949
ChessGame==>getNextState  param action number:  1949 self.n*self.n:  64
selected action:  4 7 4 6
MOVE:  d7d6  by converting:  4 7 4 6
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  d7d6
MOVE FROM:  51 MOVE TO:  43
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  43
piece moved: PAWN
position:  d7d6
board:  . n b q k b n R
. p p . p . p p
p . . p . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p . p . p p
p . . p . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  1949 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . P . . . .
. P P . P . P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  0  1  0  1  1  1  0  0  1  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  0  1  0  1  1  1  0  0  1  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  268
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . P . . . .
. P P . P . P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.00024720802321098745
POLICY:  908  :  0.00024275077157653868
POLICY:  909  :  0.00024322538229171187
POLICY:  965  :  0.00024455104721710086
POLICY:  981  :  0.0002437797375023365
POLICY:  1428  :  0.00024347257567569613
POLICY:  1429  :  0.00024118366127368063
POLICY:  1948  :  0.00024098505673464388
POLICY:  1949  :  0.0002442841068841517
POLICY:  2468  :  0.000243311224039644
POLICY:  2469  :  0.00024290238798130304
POLICY:  2988  :  0.00024584619677625597
POLICY:  2989  :  0.0002435307251289487
POLICY:  3508  :  0.00024187231610994786
POLICY:  3509  :  0.00024450867203995585
POLICY:  3565  :  0.00024326307175215334
POLICY:  3581  :  0.00024369188759010285
POLICY:  3632  :  0.0002427330327918753
POLICY:  3641  :  0.0002468366583343595
POLICY:  4028  :  0.0002461100521031767
POLICY:  4029  :  0.00024443541769869626
MCTS.py==>search  returning value of canonical board -v:  [-0.01655066]
MCTS.py==>search  returning value of canonical board -v2:  [0.01655066]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01655066]
MCTS.py==>search  returning value of canonical board -v2:  [0.01655066]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  269
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.13570239]
uuuuu2:  0.3071484302714558
uuuuu1:  [0.13657062]
uuuuu1:  [0.1440102]
uuuuu2:  0.3075329429428611
uuuuu2:  0.3076453747359353
uuuuu1:  [0.13136625]
uuuuu1:  [0.1351324]
uuuuu2:  0.30624354907623574
uuuuu2:  0.3055655065454533
uuuuu1:  [0.1324797]
uuuuu1:  [0.13854033]
uuuuu1:  [0.14609332]
uuuuu1:  [0.12009516]
uuuuu1:  [0.13719766]
uuuuu2:  0.3058873335545239
uuuuu1:  [0.13610087]
uuuuu1:  [0.14293629]
uuuuu1:  [0.14549437]
uuuuu1:  [0.1402212]
uuuuu1:  [0.1407786]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  270
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10785504]
uuuuu2:  0.24138390558387038
uuuuu1:  [0.10525963]
uuuuu1:  [0.10743412]
uuuuu1:  [0.11146142]
uuuuu1:  [0.10390147]
uuuuu2:  0.24003267767933156
uuuuu2:  0.2399725486755531
uuuuu1:  [0.10516627]
uuuuu1:  [0.10750404]
uuuuu2:  0.24193586866943548
uuuuu1:  [0.10960892]
uuuuu1:  [0.10930805]
uuuuu2:  0.2403511569578447
uuuuu1:  [0.09987988]
uuuuu1:  [0.1116294]
uuuuu1:  [0.10682043]
uuuuu2:  0.24156194369271913
uuuuu1:  [0.10298856]
uuuuu1:  [0.10440888]
uuuuu1:  [0.10302217]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  271
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.05999775]
in if
in if  cur_best:  [0.05999775] best_act:  129
uuuuu2:  0.1574950160090745
in if
in if  cur_best:  0.1574950160090745 best_act:  137
uuuuu1:  [0.06122416]
uuuuu2:  0.15765125200904964
in if
in if  cur_best:  0.15765125200904964 best_act:  908
uuuuu2:  0.157607976614009
uuuuu1:  [0.07267913]
uuuuu1:  [0.06233626]
uuuuu2:  0.15685854136293256
uuuuu2:  0.1564348965284659
uuuuu1:  [0.06253469]
uuuuu2:  0.1576900248711855
in if
in if  cur_best:  0.1576900248711855 best_act:  2468
uuuuu2:  0.15785004451225707
in if
in if  cur_best:  0.15785004451225707 best_act:  2469
uuuuu2:  0.15796371454989713
in if
in if  cur_best:  0.15796371454989713 best_act:  2542
uuuuu1:  [0.05845194]
uuuuu2:  0.15715972865331265
uuuuu1:  [0.0605075]
uuuuu2:  0.1578284966762128
uuuuu1:  [0.05972295]
uuuuu1:  [0.06443052]
uuuuu1:  [0.06095966]
a:  2542
ChessGame==>getNextState  param action number:  2542 self.n*self.n:  64
selected action:  5 8 6 7
MOVE:  e8f7  by converting:  5 8 6 7
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  e8f7
MOVE FROM:  60 MOVE TO:  53
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  53
position:  e8f7
board:  . n b q . b n R
. p p p p k p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q . b n R
. p p p p k p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2542 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P K P P
. N B Q . B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  0  3  2 -4  0  1  1  1  1  6  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  0  3  2 -4  0  1  1  1  1  6  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  272
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P K P P
. N B Q . B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.00024465081514790654
POLICY:  908  :  0.00024197004677262157
POLICY:  909  :  0.00024193218268919736
POLICY:  965  :  0.0002440863027004525
POLICY:  981  :  0.0002423227997496724
POLICY:  1428  :  0.00024399279209319502
POLICY:  1429  :  0.00024051697982940823
POLICY:  1948  :  0.000240674868109636
POLICY:  1949  :  0.00024396168009843677
POLICY:  2468  :  0.00024191243574023247
POLICY:  2469  :  0.00024307880084961653
POLICY:  2988  :  0.0002451702894177288
POLICY:  2989  :  0.00024138834851328284
POLICY:  3508  :  0.00024288221902679652
POLICY:  3509  :  0.00024500518338754773
POLICY:  3565  :  0.00024334582849405706
POLICY:  3581  :  0.00024218576436396688
POLICY:  3632  :  0.0002427467261441052
POLICY:  3641  :  0.00024665886303409934
POLICY:  4028  :  0.0002455343783367425
POLICY:  4029  :  0.0002424421109026298
MCTS.py==>search  returning value of canonical board -v:  [-0.02711014]
MCTS.py==>search  returning value of canonical board -v2:  [0.02711014]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02711014]
MCTS.py==>search  returning value of canonical board -v2:  [0.02711014]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  273
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.13752373]
uuuuu2:  0.31078344946523495
uuuuu1:  [0.13840024]
uuuuu1:  [0.14584404]
uuuuu2:  0.3111725127408533
uuuuu2:  0.31128627513400725
uuuuu1:  [0.13319713]
uuuuu1:  [0.1369625]
uuuuu2:  0.30986785924405696
uuuuu2:  0.30918179226199727
uuuuu1:  [0.13430285]
uuuuu1:  [0.14036147]
uuuuu1:  [0.14791536]
uuuuu1:  [0.12192048]
uuuuu1:  [0.13903952]
uuuuu2:  0.30950742800730013
uuuuu1:  [0.13793632]
uuuuu1:  [0.14476049]
uuuuu1:  [0.14732657]
uuuuu1:  [0.14207342]
uuuuu1:  [0.14261603]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  274
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.11019815]
uuuuu2:  0.24598210743426951
uuuuu1:  [0.10757016]
uuuuu1:  [0.10975675]
uuuuu1:  [0.11377978]
uuuuu1:  [0.10621134]
uuuuu2:  0.24460513954248533
uuuuu2:  0.24454386512142742
uuuuu1:  [0.10748073]
uuuuu1:  [0.10981341]
uuuuu2:  0.24654458504720236
uuuuu1:  [0.11194121]
uuuuu1:  [0.11161609]
uuuuu2:  0.24492968563810558
uuuuu1:  [0.1021931]
uuuuu1:  [0.11393481]
uuuuu1:  [0.1091311]
uuuuu2:  0.2461635370499363
uuuuu1:  [0.10532923]
uuuuu1:  [0.10674655]
uuuuu1:  [0.10534689]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  275
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06385116]
in if
in if  cur_best:  [0.06385116] best_act:  129
uuuuu2:  0.165182166333017
in if
in if  cur_best:  0.165182166333017 best_act:  137
uuuuu1:  [0.06509399]
uuuuu2:  0.16534602803219361
in if
in if  cur_best:  0.16534602803219361 best_act:  908
uuuuu2:  0.16530064041496692
uuuuu1:  [0.07655095]
uuuuu1:  [0.06620312]
uuuuu2:  0.16451462609250736
uuuuu2:  0.16407030364163713
uuuuu1:  [0.06639475]
uuuuu2:  0.1653866933530706
in if
in if  cur_best:  0.1653866933530706 best_act:  2468
uuuuu2:  0.16555452336850748
in if
in if  cur_best:  0.16555452336850748 best_act:  2469
uuuuu1:  [0.05572674]
uuuuu1:  [0.0623427]
uuuuu2:  0.1648305139876144
uuuuu1:  [0.06438364]
uuuuu2:  0.1655319238074053
uuuuu1:  [0.0635898]
uuuuu1:  [0.0683415]
uuuuu1:  [0.06484073]
a:  2469
ChessGame==>getNextState  param action number:  2469 self.n*self.n:  64
selected action:  5 7 5 6
MOVE:  e7e6  by converting:  5 7 5 6
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  e7e6
MOVE FROM:  52 MOVE TO:  44
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  44
piece moved: PAWN
position:  e7e6
board:  . n b q k b n R
. p p p . . p p
p . . . p . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p . . p p
p . . . p . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2469 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . P . . .
. P P P . . P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  0  0  1  1  1  0  0  0  1  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  0  0  1  1  1  0  0  0  1  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  276
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . P . . .
. P P P . . P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  1 6 0 5  at:  901
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  5 6 5 5  at:  2989
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  7 6 7 4  at:  4028
count:  15
inserting:  6 6 6 4  at:  3508
count:  16
inserting:  5 6 5 4  at:  2988
count:  17
inserting:  4 6 4 4  at:  2468
count:  18
inserting:  3 6 3 4  at:  1948
count:  19
inserting:  2 6 2 4  at:  1428
count:  20
inserting:  1 6 1 4  at:  908
count:  21
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.00024699606001377106
POLICY:  908  :  0.0002428503503324464
POLICY:  909  :  0.00024341308744624257
POLICY:  965  :  0.0002452637709211558
POLICY:  981  :  0.00024470294010825455
POLICY:  1428  :  0.0002435523783788085
POLICY:  1429  :  0.0002414496266283095
POLICY:  1948  :  0.0002409501321380958
POLICY:  1949  :  0.00024348923761863261
POLICY:  2468  :  0.00024308409774675965
POLICY:  2469  :  0.00024348591978196055
POLICY:  2988  :  0.00024616604787297547
POLICY:  2989  :  0.00024330492306035012
POLICY:  3508  :  0.00024209408729802817
POLICY:  3509  :  0.00024385562574025244
POLICY:  3565  :  0.00024304621911142021
POLICY:  3581  :  0.00024381665571127087
POLICY:  3632  :  0.00024269703135360032
POLICY:  3641  :  0.00024744850816205144
POLICY:  4028  :  0.0002456792281009257
POLICY:  4029  :  0.0002443257544655353
MCTS.py==>search  returning value of canonical board -v:  [-0.01780323]
MCTS.py==>search  returning value of canonical board -v2:  [0.01780323]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01780323]
MCTS.py==>search  returning value of canonical board -v2:  [0.01780323]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  277
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  454  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.13932401]
uuuuu2:  0.31437644107789187
uuuuu1:  [0.1402087]
uuuuu1:  [0.14765666]
uuuuu2:  0.3147700023442767
uuuuu2:  0.3148850799532993
uuuuu1:  [0.13500684]
uuuuu1:  [0.13877144]
uuuuu2:  0.3134502656470092
uuuuu2:  0.3127562669912503
uuuuu1:  [0.13610493]
uuuuu1:  [0.14216156]
uuuuu1:  [0.14971633]
uuuuu1:  [0.12372468]
uuuuu1:  [0.14086008]
uuuuu2:  0.31308566743671234
uuuuu1:  [0.13975057]
uuuuu1:  [0.14656362]
uuuuu1:  [0.1491376]
uuuuu1:  [0.14390422]
uuuuu1:  [0.14443225]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  278
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.11249825]
uuuuu2:  0.2504959170938444
uuuuu1:  [0.10983828]
uuuuu1:  [0.11203674]
uuuuu1:  [0.11605559]
uuuuu1:  [0.10847883]
uuuuu2:  0.24909368162859444
uuuuu2:  0.24903128281244724
uuuuu1:  [0.1097527]
uuuuu1:  [0.1120804]
uuuuu2:  0.25106871625784055
uuuuu1:  [0.1142307]
uuuuu1:  [0.11388178]
uuuuu2:  0.24942418319519047
uuuuu1:  [0.10446388]
uuuuu1:  [0.1161979]
uuuuu1:  [0.11139936]
uuuuu2:  0.25068067597097765
uuuuu1:  [0.10762694]
uuuuu1:  [0.10904133]
uuuuu1:  [0.10762894]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  279
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  324  :  1
co:  908  :  1
co:  909  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.06753305]
in if
in if  cur_best:  [0.06753305] best_act:  129
uuuuu2:  0.17252714592561472
in if
in if  cur_best:  0.17252714592561472 best_act:  137
uuuuu1:  [0.06879158]
uuuuu2:  0.17269829388857622
in if
in if  cur_best:  0.17269829388857622 best_act:  908
uuuuu2:  0.1726508880684788
uuuuu1:  [0.08025043]
uuuuu1:  [0.06989788]
uuuuu2:  0.17182992288367058
uuuuu2:  0.17136584321925472
uuuuu1:  [0.070083]
uuuuu2:  0.17274076743099792
in if
in if  cur_best:  0.17274076743099792 best_act:  2468
uuuuu1:  [0.06865479]
uuuuu1:  [0.05941015]
uuuuu1:  [0.06606027]
uuuuu2:  0.17215985702962067
uuuuu1:  [0.06808726]
uuuuu2:  0.17289245569338174
in if
in if  cur_best:  0.17289245569338174 best_act:  3565
uuuuu1:  [0.06728455]
uuuuu1:  [0.07207839]
uuuuu1:  [0.06854907]
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  7 8 6 6
MOVE:  g8f6  by converting:  7 8 6 6
board:  . n b q k b n R
. p p p p . p p
p . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
MOOOVOVOEOE:  g8f6
MOVE FROM:  62 MOVE TO:  45
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  45
position:  g8f6
board:  . n b q k b . R
. p p p p . p p
p . . . . n . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . R
. p p p p . p p
p . . . . n . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3565 next_s:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . N . .
. P P P P . P P
. N B Q K B . r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  0 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  2  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  0 -4  0  1  1  1  1  0  1  1  1  0  0  0  0  2  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  280
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . N . .
. P P P P . P P
. N B Q K B . r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [8, 1, 6, 1], [2, 7, 1, 6], [8, 7, 8, 6], [7, 7, 7, 6], [6, 7, 6, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [8, 7, 8, 5], [7, 7, 7, 5], [6, 7, 6, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  1 7 2 5  at:  981
count:  3
inserting:  1 7 0 5  at:  965
count:  4
inserting:  7 0 7 1  at:  3641
count:  5
inserting:  7 0 6 0  at:  3632
count:  6
inserting:  7 0 5 0  at:  3624
count:  7
inserting:  1 6 0 5  at:  901
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  5 6 5 5  at:  2989
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  7 6 7 4  at:  4028
count:  16
inserting:  6 6 6 4  at:  3508
count:  17
inserting:  5 6 5 4  at:  2988
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  901  :  0.0002467077865730971
POLICY:  908  :  0.0002422639518044889
POLICY:  909  :  0.00024316566123161465
POLICY:  965  :  0.00024408442550338805
POLICY:  981  :  0.00024413525534328073
POLICY:  1428  :  0.00024287773703690618
POLICY:  1429  :  0.00024086941266432405
POLICY:  1948  :  0.00024095075787045062
POLICY:  1949  :  0.00024433599901385605
POLICY:  2468  :  0.00024369200400542468
POLICY:  2469  :  0.00024254477466456592
POLICY:  2988  :  0.00024650347768329084
POLICY:  2989  :  0.00024401937844231725
POLICY:  3508  :  0.00024204974761232734
POLICY:  3509  :  0.00024371029576286674
POLICY:  3565  :  0.0002422590769128874
POLICY:  3581  :  0.00024331410531885922
POLICY:  3624  :  0.00024323926481883973
POLICY:  3632  :  0.0002436710783513263
POLICY:  3641  :  0.00024769274750724435
POLICY:  4028  :  0.0002455099893268198
POLICY:  4029  :  0.0002445559948682785
MCTS.py==>search  returning value of canonical board -v:  [-0.01280116]
MCTS.py==>search  returning value of canonical board -v2:  [0.01280116]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01280116]
MCTS.py==>search  returning value of canonical board -v2:  [0.01280116]
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
MCTS.py==>getActionProb self.game.stringRepresentation(canonicalBoard)  s:  [ 4  2  3  5  6  3  2  4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0 -1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1  0 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
4096
CNT NUM:  129 COUNT:  1
CNT NUM:  324 COUNT:  1
CNT NUM:  454 COUNT:  1
CNT NUM:  981 COUNT:  1
CNT NUM:  1428 COUNT:  1
CNT NUM:  1949 COUNT:  1
CNT NUM:  2468 COUNT:  1
CNT NUM:  2469 COUNT:  1
CNT NUM:  2542 COUNT:  1
CNT NUM:  2859 COUNT:  1
CNT NUM:  3509 COUNT:  1
CNT NUM:  3565 COUNT:  1
CNT NUM:  3581 COUNT:  1
CNT NUM:  4028 COUNT:  1
CNT NUM:  4029 COUNT:  1
IND:  129 PI:  1
Coach.py ==>executeEpisode  action:  129
ChessGame==>getNextState  param action number:  129 self.n*self.n:  64
selected action:  1 3 1 2
MOVE:  a3a2  by converting:  1 3 1 2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
P . . . . . . .
. P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a3a2
MOVE FROM:  16 MOVE TO:  8
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  8
piece moved: PAWN
position:  a3a2
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
FINAL SELECTED MOVE NEW BOARD:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
ChessGame.py==>getGameEnded  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
Coach.py ==>executeEpisode  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R self.curPlayer:  1
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R player:  1
if player boardturn1:  False
Coach.py ==>executeEpisode  canonicalBoard:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  281
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.1271355]
uuuuu2:  0.2973782567913768
uuuuu1:  [0.1277655]
uuuuu2:  0.29727952197687124
uuuuu1:  [0.12527063]
uuuuu1:  [0.12895562]
uuuuu1:  [0.12859356]
uuuuu1:  [0.12779443]
uuuuu1:  [0.12658481]
uuuuu1:  [0.13087256]
uuuuu2:  0.2993976004215755
uuuuu1:  [0.13152665]
uuuuu1:  [0.12767172]
uuuuu1:  [0.126568]
uuuuu1:  [0.12970339]
uuuuu1:  [0.12289922]
uuuuu2:  0.2996224374495445
uuuuu2:  0.3000373718111418
uuuuu2:  0.29960956290443685
uuuuu1:  [0.1263937]
uuuuu1:  [0.12679476]
uuuuu2:  0.3008540423274803
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  282
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.09779235]
uuuuu2:  0.21910022413218191
uuuuu1:  [0.10150691]
uuuuu1:  [0.10182273]
uuuuu2:  0.21938832926378285
uuuuu2:  0.2199137377441307
uuuuu1:  [0.10425243]
uuuuu1:  [0.10526472]
uuuuu1:  [0.0998546]
uuuuu2:  0.21836548226807664
uuuuu2:  0.21811877215767056
uuuuu1:  [0.09761424]
uuuuu1:  [0.09563756]
uuuuu2:  0.2196542349648576
uuuuu1:  [0.08642796]
uuuuu1:  [0.09435423]
uuuuu2:  0.2184752014712947
uuuuu1:  [0.09512246]
uuuuu2:  0.21976325590705614
uuuuu1:  [0.09815766]
uuuuu2:  0.21943499417946472
uuuuu1:  [0.09937607]
uuuuu1:  [0.10002171]
uuuuu1:  [0.09788639]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  283
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07053947]
in if
in if  cur_best:  [0.07053947] best_act:  901
uuuuu2:  0.181674782870293
in if
in if  cur_best:  0.181674782870293 best_act:  908
uuuuu2:  0.18165843288940836
uuuuu1:  [0.07273018]
uuuuu1:  [0.08207443]
uuuuu1:  [0.06705766]
uuuuu2:  0.18043033379260107
uuuuu2:  0.1797669839356578
uuuuu1:  [0.07098032]
uuuuu1:  [0.07077309]
uuuuu2:  0.1816615461347699
uuuuu1:  [0.07295829]
uuuuu1:  [0.07422962]
uuuuu2:  0.18071895123146606
uuuuu1:  [0.06407461]
uuuuu2:  0.18169592245942612
in if
in if  cur_best:  0.18169592245942612 best_act:  3565
uuuuu1:  [0.06921376]
uuuuu1:  [0.07021169]
uuuuu1:  [0.06779448]
a:  3565
ChessGame==>getNextState  param action number:  3565 self.n*self.n:  64
selected action:  7 8 6 6
MOVE:  g8f6  by converting:  7 8 6 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  g8f6
MOVE FROM:  62 MOVE TO:  45
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  45
position:  g8f6
board:  . n b q k b . R
. p p p p p p p
P . . . . n . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b . R
. p p p p p p p
P . . . . n . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  3565 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . N . .
. P P P P P P P
. N B Q K B . r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  0 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  2  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  0 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  2  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  284
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . N . .
. P P P P P P P
. N B Q K B . r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [8, 1, 6, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  7 0 5 0  at:  3624
count:  8
inserting:  0 2 1 1  at:  137
count:  9
inserting:  7 6 7 5  at:  4029
count:  10
inserting:  6 6 6 5  at:  3509
count:  11
inserting:  4 6 4 5  at:  2469
count:  12
inserting:  3 6 3 5  at:  1949
count:  13
inserting:  2 6 2 5  at:  1429
count:  14
inserting:  1 6 1 5  at:  909
count:  15
inserting:  0 6 0 5  at:  389
count:  16
inserting:  5 4 5 3  at:  2859
count:  17
inserting:  0 2 0 1  at:  129
count:  18
inserting:  7 6 7 4  at:  4028
count:  19
inserting:  6 6 6 4  at:  3508
count:  20
inserting:  4 6 4 4  at:  2468
count:  21
inserting:  3 6 3 4  at:  1948
count:  22
inserting:  2 6 2 4  at:  1428
count:  23
inserting:  1 6 1 4  at:  908
count:  24
inserting:  0 6 0 4  at:  388
count:  25
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024296964693348855
POLICY:  137  :  0.00024287229462061077
POLICY:  388  :  0.00024417060194537044
POLICY:  389  :  0.0002471031039021909
POLICY:  908  :  0.00024243004736490548
POLICY:  909  :  0.00024282303638756275
POLICY:  965  :  0.0002438242663629353
POLICY:  981  :  0.00024345965357497334
POLICY:  1428  :  0.00024291829322464764
POLICY:  1429  :  0.00024092714011203498
POLICY:  1948  :  0.00024103229225147516
POLICY:  1949  :  0.00024508978822268546
POLICY:  2468  :  0.00024366639263462275
POLICY:  2469  :  0.00024292156740557402
POLICY:  2542  :  0.00024320060038007796
POLICY:  2859  :  0.00024503987515345216
POLICY:  3508  :  0.00024227198446169496
POLICY:  3509  :  0.00024372857296839356
POLICY:  3565  :  0.00024220212071668357
POLICY:  3581  :  0.00024355427012778819
POLICY:  3624  :  0.00024299035430885851
POLICY:  3632  :  0.0002434099151287228
POLICY:  3641  :  0.0002474216453265399
POLICY:  4028  :  0.00024568309891037643
POLICY:  4029  :  0.0002443667035549879
MCTS.py==>search  returning value of canonical board -v:  [-0.01624701]
MCTS.py==>search  returning value of canonical board -v2:  [0.01624701]
MCTS.py==>search  returning value of canonical board -v2:  [-0.01624701]
MCTS.py==>search  returning value of canonical board -v2:  [0.01624701]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  285
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.12886181]
uuuuu2:  0.30073856974245744
uuuuu1:  [0.12948903]
uuuuu2:  0.3006387192449174
uuuuu1:  [0.1269826]
uuuuu1:  [0.130663]
uuuuu1:  [0.13031787]
uuuuu1:  [0.12949483]
uuuuu1:  [0.12828986]
uuuuu1:  [0.13258316]
uuuuu2:  0.30278073153907636
uuuuu1:  [0.13324128]
uuuuu1:  [0.12937939]
uuuuu1:  [0.12826814]
uuuuu1:  [0.13140388]
uuuuu1:  [0.1245995]
uuuuu2:  0.3030081091790764
uuuuu2:  0.30342773221335667
uuuuu2:  0.3029950891542651
uuuuu1:  [0.12810609]
uuuuu1:  [0.12849492]
uuuuu2:  0.30425363093804647
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  286
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.099737]
uuuuu2:  0.22297840528276003
uuuuu1:  [0.10346063]
uuuuu1:  [0.10380672]
uuuuu2:  0.22327161001613083
uuuuu2:  0.22380631848360968
uuuuu1:  [0.10621405]
uuuuu1:  [0.10721802]
uuuuu1:  [0.10180632]
uuuuu2:  0.22223065812822568
uuuuu2:  0.22197958112817526
uuuuu1:  [0.0995676]
uuuuu1:  [0.09758414]
uuuuu2:  0.22354222237819515
uuuuu1:  [0.08837596]
uuuuu1:  [0.09632075]
uuuuu2:  0.22234231941501514
uuuuu1:  [0.09707769]
uuuuu2:  0.2236531730444035
uuuuu1:  [0.10011017]
uuuuu2:  0.22331910092364862
uuuuu1:  [0.10134975]
uuuuu1:  [0.10199504]
uuuuu1:  [0.09984471]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  287
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07431082]
in if
in if  cur_best:  [0.07431082] best_act:  901
uuuuu2:  0.18909310923074057
in if
in if  cur_best:  0.18909310923074057 best_act:  908
uuuuu2:  0.18907609163109085
uuuuu1:  [0.07646132]
uuuuu1:  [0.08580323]
uuuuu1:  [0.07078547]
uuuuu2:  0.18779784556419143
uuuuu2:  0.18710740914271665
uuuuu1:  [0.07469812]
uuuuu1:  [0.0744868]
uuuuu2:  0.18907933199959936
uuuuu1:  [0.07672329]
uuuuu1:  [0.07795896]
uuuuu2:  0.18809824811886053
uuuuu1:  [0.06780424]
uuuuu1:  [0.07831054]
uuuuu1:  [0.07294232]
uuuuu1:  [0.07398036]
uuuuu1:  [0.07152743]
a:  908
ChessGame==>getNextState  param action number:  908 self.n*self.n:  64
selected action:  2 7 2 5
MOVE:  b7b5  by converting:  2 7 2 5
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  b7b5
MOVE FROM:  49 MOVE TO:  33
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  33
piece moved: PAWN
position:  b7b5
board:  . n b q k b n R
. . p p p p p p
P . . . . . . .
. p . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. . p p p p p p
P . . . . . . .
. p . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  908 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. P . . . . . .
p . . . . . . .
. . P P P P P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  0  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  1  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  0  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  1  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  288
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. P . . . . . .
p . . . . . . .
. . P P P P P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  7 6 7 5  at:  4029
count:  8
inserting:  6 6 6 5  at:  3509
count:  9
inserting:  4 6 4 5  at:  2469
count:  10
inserting:  3 6 3 5  at:  1949
count:  11
inserting:  2 6 2 5  at:  1429
count:  12
inserting:  1 6 1 5  at:  909
count:  13
inserting:  0 6 0 5  at:  389
count:  14
inserting:  5 4 5 3  at:  2859
count:  15
inserting:  0 2 0 1  at:  129
count:  16
inserting:  7 6 7 4  at:  4028
count:  17
inserting:  6 6 6 4  at:  3508
count:  18
inserting:  4 6 4 4  at:  2468
count:  19
inserting:  3 6 3 4  at:  1948
count:  20
inserting:  2 6 2 4  at:  1428
count:  21
inserting:  1 6 1 4  at:  908
count:  22
inserting:  0 6 0 4  at:  388
count:  23
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.00024278397904708982
POLICY:  388  :  0.0002438455558149144
POLICY:  389  :  0.00024789455346763134
POLICY:  908  :  0.00024277599004562944
POLICY:  909  :  0.0002428919106023386
POLICY:  965  :  0.0002443461853545159
POLICY:  981  :  0.0002440545940771699
POLICY:  1428  :  0.00024372742336709052
POLICY:  1429  :  0.00024089294311124831
POLICY:  1948  :  0.000241041139815934
POLICY:  1949  :  0.00024439176195301116
POLICY:  2468  :  0.0002432724868413061
POLICY:  2469  :  0.00024269903951790184
POLICY:  2542  :  0.00024293633759953082
POLICY:  2859  :  0.0002452324843034148
POLICY:  3508  :  0.00024172985285986215
POLICY:  3509  :  0.0002437825023662299
POLICY:  3565  :  0.00024254988238681108
POLICY:  3581  :  0.000243333081016317
POLICY:  3632  :  0.0002428092120680958
POLICY:  3641  :  0.00024689105339348316
POLICY:  4028  :  0.00024592227418906987
POLICY:  4029  :  0.00024406224838458002
MCTS.py==>search  returning value of canonical board -v:  [-0.02713174]
MCTS.py==>search  returning value of canonical board -v2:  [0.02713174]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02713174]
MCTS.py==>search  returning value of canonical board -v2:  [0.02713174]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  289
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.13056904]
uuuuu2:  0.304061748743902
uuuuu1:  [0.13119352]
uuuuu2:  0.30396079489245237
uuuuu1:  [0.12867567]
uuuuu1:  [0.13235152]
uuuuu1:  [0.1320231]
uuuuu1:  [0.13117644]
uuuuu1:  [0.12997606]
uuuuu1:  [0.13427484]
uuuuu2:  0.3061264765492836
uuuuu1:  [0.13493696]
uuuuu1:  [0.13106817]
uuuuu1:  [0.12994948]
uuuuu1:  [0.13308558]
uuuuu1:  [0.12628101]
uuuuu2:  0.3063563667256679
uuuuu2:  0.3067806266193216
uuuuu2:  0.3063432028288116
uuuuu1:  [0.12979954]
uuuuu1:  [0.13017629]
uuuuu2:  0.3076156515738181
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  290
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.10164841]
uuuuu2:  0.22679027807671392
uuuuu1:  [0.10538094]
uuuuu1:  [0.10575677]
uuuuu2:  0.22708849521989535
uuuuu2:  0.227632344665207
uuuuu1:  [0.10814214]
uuuuu1:  [0.10913792]
uuuuu1:  [0.10372467]
uuuuu2:  0.22602974799357484
uuuuu2:  0.22577437876807568
uuuuu1:  [0.10148756]
uuuuu1:  [0.09949744]
uuuuu2:  0.22736373376941202
uuuuu1:  [0.09029064]
uuuuu1:  [0.09825365]
uuuuu2:  0.22614331815858377
uuuuu1:  [0.0989995]
uuuuu2:  0.22747658116559943
uuuuu1:  [0.1020293]
uuuuu2:  0.22713679799660783
uuuuu1:  [0.10328968]
uuuuu1:  [0.10393462]
uuuuu1:  [0.10176954]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  291
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.07793969]
in if
in if  cur_best:  [0.07793969] best_act:  901
uuuuu1:  [0.07098385]
uuuuu2:  0.19621353320589696
in if
in if  cur_best:  0.19621353320589696 best_act:  909
uuuuu1:  [0.0800515]
uuuuu1:  [0.08939116]
uuuuu1:  [0.07437245]
uuuuu2:  0.1948870345728375
uuuuu2:  0.1941705348369749
uuuuu1:  [0.07827547]
uuuuu1:  [0.07806021]
uuuuu2:  0.19621689589521674
in if
in if  cur_best:  0.19621689589521674 best_act:  2469
uuuuu1:  [0.08034606]
uuuuu1:  [0.0815474]
uuuuu2:  0.19519877703655789
uuuuu1:  [0.07139298]
uuuuu1:  [0.08188]
uuuuu1:  [0.07653002]
uuuuu1:  [0.07760666]
uuuuu1:  [0.07511935]
a:  2469
ChessGame==>getNextState  param action number:  2469 self.n*self.n:  64
selected action:  5 7 5 6
MOVE:  e7e6  by converting:  5 7 5 6
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  e7e6
MOVE FROM:  52 MOVE TO:  44
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  44
piece moved: PAWN
position:  e7e6
board:  . n b q k b n R
. p p p . p p p
P . . . p . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n R
. p p p . p p p
P . . . p . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  2469 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . P . . .
. P P P . P P P
. N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2 -4  0  1  1  1  0  1  1  1 -1  0  0  0  1  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 0  2  3  5  6  3  2 -4  0  1  1  1  0  1  1  1 -1  0  0  0  1  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  292
ssssssss2
ChessGame.py==>getGameEnded  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . P . . .
. P P P . P P P
. N B Q K B N r player:  1
MCTS.py==>search  self.Es[s]:  0
ssssssss3
PLAYER :  True LIST OF MOVES:  [[7, 8, 8, 6], [7, 8, 6, 6], [5, 8, 6, 7], [2, 8, 3, 6], [2, 8, 1, 6], [8, 1, 8, 2], [8, 1, 7, 1], [1, 3, 2, 2], [8, 7, 8, 6], [7, 7, 7, 6], [5, 7, 5, 6], [4, 7, 4, 6], [3, 7, 3, 6], [2, 7, 2, 6], [1, 7, 1, 6], [6, 5, 6, 4], [1, 3, 1, 2], [8, 7, 8, 5], [7, 7, 7, 5], [5, 7, 5, 5], [4, 7, 4, 5], [3, 7, 3, 5], [2, 7, 2, 5], [1, 7, 1, 5]]
inserting:  6 7 7 5  at:  3581
count:  1
inserting:  6 7 5 5  at:  3565
count:  2
inserting:  4 7 5 6  at:  2542
count:  3
inserting:  1 7 2 5  at:  981
count:  4
inserting:  1 7 0 5  at:  965
count:  5
inserting:  7 0 7 1  at:  3641
count:  6
inserting:  7 0 6 0  at:  3632
count:  7
inserting:  0 2 1 1  at:  137
count:  8
inserting:  7 6 7 5  at:  4029
count:  9
inserting:  6 6 6 5  at:  3509
count:  10
inserting:  4 6 4 5  at:  2469
count:  11
inserting:  3 6 3 5  at:  1949
count:  12
inserting:  2 6 2 5  at:  1429
count:  13
inserting:  1 6 1 5  at:  909
count:  14
inserting:  0 6 0 5  at:  389
count:  15
inserting:  5 4 5 3  at:  2859
count:  16
inserting:  0 2 0 1  at:  129
count:  17
inserting:  7 6 7 4  at:  4028
count:  18
inserting:  6 6 6 4  at:  3508
count:  19
inserting:  4 6 4 4  at:  2468
count:  20
inserting:  3 6 3 4  at:  1948
count:  21
inserting:  2 6 2 4  at:  1428
count:  22
inserting:  1 6 1 4  at:  908
count:  23
inserting:  0 6 0 4  at:  388
count:  24
OthelloGame.py==>getValidMoves  returns: valids array:  [0 0 0 ... 0 0 0]
MCTS.py==>search  valid moves returned by getValidMoves():  [0 0 0 ... 0 0 0]
POLICY:  129  :  0.000243186776060611
POLICY:  137  :  0.00024283042876049876
POLICY:  388  :  0.0002434409543639049
POLICY:  389  :  0.0002473834319971502
POLICY:  908  :  0.0002429241721983999
POLICY:  909  :  0.00024320981174241751
POLICY:  965  :  0.0002450690953992307
POLICY:  981  :  0.00024394721549469978
POLICY:  1428  :  0.00024366044090129435
POLICY:  1429  :  0.00024148168449755758
POLICY:  1948  :  0.0002411239838693291
POLICY:  1949  :  0.0002437165385344997
POLICY:  2468  :  0.00024276571639347821
POLICY:  2469  :  0.00024314252368640155
POLICY:  2542  :  0.00024305049737449735
POLICY:  2859  :  0.0002447911538183689
POLICY:  3508  :  0.00024243289954029024
POLICY:  3509  :  0.0002437667571939528
POLICY:  3565  :  0.0002426903956802562
POLICY:  3581  :  0.00024406841839663684
POLICY:  3632  :  0.0002427927975077182
POLICY:  3641  :  0.0002471584884915501
POLICY:  4028  :  0.00024533356190659106
POLICY:  4029  :  0.00024392215709667653
MCTS.py==>search  returning value of canonical board -v:  [-0.02218051]
MCTS.py==>search  returning value of canonical board -v2:  [0.02218051]
MCTS.py==>search  returning value of canonical board -v2:  [-0.02218051]
MCTS.py==>search  returning value of canonical board -v2:  [0.02218051]
NEXT ITER numMCTSSims
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1 -4 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  293
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  66  :  1
co:  67  :  1
co:  326  :  1
co:  334  :  1
co:  514  :  1
co:  530  :  1
co:  586  :  1
co:  587  :  1
co:  1106  :  1
co:  1107  :  1
co:  1626  :  1
co:  1627  :  1
co:  2089  :  1
co:  2146  :  1
co:  2147  :  1
co:  2796  :  1
co:  3114  :  1
co:  3130  :  1
co:  3186  :  1
co:  3187  :  1
co:  3706  :  1
co:  3707  :  1
uuuuu1:  [0.13225782]
uuuuu2:  0.3073489983189479
uuuuu1:  [0.13287957]
uuuuu2:  0.3072469530427905
uuuuu1:  [0.13035041]
uuuuu1:  [0.13402177]
uuuuu1:  [0.13370991]
uuuuu1:  [0.13283987]
uuuuu1:  [0.13164403]
uuuuu1:  [0.13594824]
uuuuu2:  0.30943604815473574
uuuuu1:  [0.13661432]
uuuuu1:  [0.13273871]
uuuuu1:  [0.13161264]
uuuuu1:  [0.13474908]
uuuuu1:  [0.12794432]
uuuuu2:  0.3096684237025545
uuuuu2:  0.3100972703229532
uuuuu2:  0.3096551174891637
uuuuu1:  [0.1314747]
uuuuu1:  [0.1318395]
uuuuu2:  0.31094132283661546
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  r n b q k b n r
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
R N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
OthelloGame.py==>getCanonicalForm  parms:  board:  r n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R player:  -1
if player boardturn2:  False
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
sssssss:  [ 4  2  3  5  6  3  2 -4  0  1  1  1  1  1  1  1 -1  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0  0  0  0 -1  0  0  0  0  0  0  0  0  0  0
 -1 -1 -1 -1 -1  0 -1 -1  0 -2 -3 -5 -6 -3 -2 -4]
NUMBER RECUSRIONS:  294
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  129  :  1
co:  137  :  1
co:  388  :  1
co:  389  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2542  :  1
co:  2859  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  3632  :  1
co:  3641  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.1035282]
uuuuu2:  0.23053913168437082
uuuuu1:  [0.10726951]
uuuuu1:  [0.10767459]
uuuuu2:  0.23084227837048749
uuuuu2:  0.23139511767185633
uuuuu1:  [0.11003835]
uuuuu1:  [0.11102608]
uuuuu1:  [0.10561131]
uuuuu2:  0.22976603000437984
uuuuu2:  0.22950643951397276
uuuuu1:  [0.10337578]
uuuuu1:  [0.10137911]
uuuuu2:  0.23112206662574142
uuuuu1:  [0.09217367]
uuuuu1:  [0.10015459]
uuuuu2:  0.22988147748937984
uuuuu1:  [0.10088954]
uuuuu2:  0.23123677939451845
uuuuu1:  [0.1039167]
uuuuu2:  0.23089137959429512
uuuuu1:  [0.10519754]
uuuuu1:  [0.10584214]
uuuuu1:  [0.10366256]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
R N B Q K B N r
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
position:  a1h8
board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r
OthelloGame.py==>getCanonicalForm  parms:  board:  . n b q k b n r
p p p p p . p p
. . . . . . . .
. . . . . p . .
. . . . . . . .
p . . . . . . .
. P P P P P P P
. N B Q K B N r player:  -1
if player boardturn2:  True
MCTS.py==>search  best_act:  -1 next_s:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R next_player -1
ChessGame.py==>stringRepresentation  returns:  board.tostring() 
type:  <class 'pythonchess.chess.Board'>
X[0] [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
sssssss:  [ 0  2  3  5  6  3  2  4  1  1  1  1  1  0  1  1  0  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0
  0 -1 -1 -1 -1 -1 -1 -1  0 -2 -3 -5 -6 -3 -2  4]
NUMBER RECUSRIONS:  295
MCTS.py==>search  self.Es[s]:  0
Bahar ka valids: 
co:  901  :  1
co:  908  :  1
co:  909  :  1
co:  965  :  1
co:  981  :  1
co:  1428  :  1
co:  1429  :  1
co:  1948  :  1
co:  1949  :  1
co:  2468  :  1
co:  2469  :  1
co:  2988  :  1
co:  2989  :  1
co:  3508  :  1
co:  3509  :  1
co:  3565  :  1
co:  3581  :  1
co:  4028  :  1
co:  4029  :  1
uuuuu1:  [0.08144112]
uuuuu1:  [0.07442755]
uuuuu2:  0.20310030231340034
uuuuu1:  [0.08351559]
uuuuu1:  [0.09285309]
uuuuu1:  [0.07783345]
uuuuu2:  0.20172724578161674
uuuuu2:  0.20098559809512176
uuuuu1:  [0.08172719]
uuuuu1:  [0.08150811]
uuuuu1:  [0.07937138]
uuuuu1:  [0.08384161]
uuuuu1:  [0.08500983]
uuuuu2:  0.20204992988801374
uuuuu1:  [0.07485568]
uuuuu1:  [0.08532409]
uuuuu1:  [0.07999172]
uuuuu1:  [0.0811056]
uuuuu1:  [0.07858513]
a:  -1
ChessGame==>getNextState  param action number:  -1 self.n*self.n:  64
selected action:  1 1 8 8
MOVE:  a1h8  by converting:  1 1 8 8
board:  . n b q k b n R
. p p p p p p p
P . . . . . . .
. . . . . . . .
. . . . . P . .
. . . . . . . .
P P P P P . P P
. N B Q K B N R
MOOOVOVOEOE:  a1h8
MOVE FROM:  0 MOVE TO:  63
TYPE BOARD: <class 'pythonchess.chess.Board'>
MOOOVOVOEOEaaaa:  63
